// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { RootGetData, RootGetError, GoogleAuthUrlApiAuthGoogleUrlPostData, GoogleAuthUrlApiAuthGoogleUrlPostResponse, GoogleAuthUrlApiAuthGoogleUrlPostError, GoogleCallbackApiAuthGoogleCallbackGetData, GoogleCallbackApiAuthGoogleCallbackGetError, RefreshTokenApiAuthRefreshPostData, RefreshTokenApiAuthRefreshPostResponse, RefreshTokenApiAuthRefreshPostError, LogoutApiAuthLogoutPostData, LogoutApiAuthLogoutPostResponse, LogoutApiAuthLogoutPostError, AdminLoginApiAuthAdminLoginPostData, AdminLoginApiAuthAdminLoginPostResponse, AdminLoginApiAuthAdminLoginPostError, HealthCheckApiHealthGetData, HealthCheckApiHealthGetResponse, HealthCheckApiHealthGetError, CeleryHealthCheckApiCeleryHealthGetData, CeleryHealthCheckApiCeleryHealthGetResponse, CeleryHealthCheckApiCeleryHealthGetError, CeleryStatsApiCeleryStatsGetData, CeleryStatsApiCeleryStatsGetError, PurgeCeleryQueuesApiCeleryPurgePostData, PurgeCeleryQueuesApiCeleryPurgePostError, TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostData, TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostError, GetLocationInfoApiLocationsInfoCityIdGetData, GetLocationInfoApiLocationsInfoCityIdGetResponse, GetLocationInfoApiLocationsInfoCityIdGetError, GetAllRegionsApiLocationsRegionsGetData, GetAllRegionsApiLocationsRegionsGetResponse, GetAllRegionsApiLocationsRegionsGetError, GetAllSubregionsApiLocationsSubregionsGetData, GetAllSubregionsApiLocationsSubregionsGetResponse, GetAllSubregionsApiLocationsSubregionsGetError, GetAllCountriesApiLocationsCountriesGetData, GetAllCountriesApiLocationsCountriesGetResponse, GetAllCountriesApiLocationsCountriesGetError, GetAllStatesApiLocationsStatesGetData, GetAllStatesApiLocationsStatesGetResponse, GetAllStatesApiLocationsStatesGetError, GetAllCitiesApiLocationsCitiesGetData, GetAllCitiesApiLocationsCitiesGetResponse, GetAllCitiesApiLocationsCitiesGetError, StripeWebhookApiWebhooksStripePostData, StripeWebhookApiWebhooksStripePostResponse, StripeWebhookApiWebhooksStripePostError, RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostData, RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponse, RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostError, ProxyStorageFileApiStorageFilePathGetData, ProxyStorageFileApiStorageFilePathGetError, GetStoragePresignedUrlApiStorageUrlFilePathGetData, GetStoragePresignedUrlApiStorageUrlFilePathGetResponse, GetStoragePresignedUrlApiStorageUrlFilePathGetError, GetAllPlansApiPricingPlansGetData, GetAllPlansApiPricingPlansGetResponse, GetAllPlansApiPricingPlansGetError, GetProfileApiUserProfileGetData, GetProfileApiUserProfileGetResponse, GetProfileApiUserProfileGetError, UpdateProfileApiUserProfilePutData, UpdateProfileApiUserProfilePutResponse, UpdateProfileApiUserProfilePutError, GetClientProfileApiUserProfileClientGetData, GetClientProfileApiUserProfileClientGetResponse, GetClientProfileApiUserProfileClientGetError, ListIssuesApiUserForumIssuesGetData, ListIssuesApiUserForumIssuesGetResponse, ListIssuesApiUserForumIssuesGetError, CreateIssueApiUserForumIssuesPostData, CreateIssueApiUserForumIssuesPostResponse, CreateIssueApiUserForumIssuesPostError, ListMyIssuesApiUserForumIssuesMyGetData, ListMyIssuesApiUserForumIssuesMyGetResponse, ListMyIssuesApiUserForumIssuesMyGetError, DeleteIssueApiUserForumIssuesIssueIdDeleteData, DeleteIssueApiUserForumIssuesIssueIdDeleteResponse, DeleteIssueApiUserForumIssuesIssueIdDeleteError, UpdateIssueApiUserForumIssuesIssueIdPutData, UpdateIssueApiUserForumIssuesIssueIdPutResponse, UpdateIssueApiUserForumIssuesIssueIdPutError, ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetData, ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponse, ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetError, CreateCommentApiUserForumIssuesIssueIdCommentsPostData, CreateCommentApiUserForumIssuesIssueIdCommentsPostResponse, CreateCommentApiUserForumIssuesIssueIdCommentsPostError, DeleteCommentApiUserForumCommentsCommentIdDeleteData, DeleteCommentApiUserForumCommentsCommentIdDeleteResponse, DeleteCommentApiUserForumCommentsCommentIdDeleteError, UpdateCommentApiUserForumCommentsCommentIdPutData, UpdateCommentApiUserForumCommentsCommentIdPutResponse, UpdateCommentApiUserForumCommentsCommentIdPutError, UploadDocumentApiUserDocumentsUploadPostData, UploadDocumentApiUserDocumentsUploadPostResponse, UploadDocumentApiUserDocumentsUploadPostError, UploadDocumentsApiUserDocumentsUploadsPostData, UploadDocumentsApiUserDocumentsUploadsPostResponse, UploadDocumentsApiUserDocumentsUploadsPostError, ListDocumentsApiUserDocumentsGetData, ListDocumentsApiUserDocumentsGetResponse, ListDocumentsApiUserDocumentsGetError, DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetData, DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetError, DeleteDocumentApiUserDocumentsDocumentIdDeleteData, DeleteDocumentApiUserDocumentsDocumentIdDeleteResponse, DeleteDocumentApiUserDocumentsDocumentIdDeleteError, UpdateDocumentApiUserDocumentsDocumentIdPutData, UpdateDocumentApiUserDocumentsDocumentIdPutResponse, UpdateDocumentApiUserDocumentsDocumentIdPutError, GetStorageInfoApiUserDocumentsStorageInfoGetData, GetStorageInfoApiUserDocumentsStorageInfoGetResponse, GetStorageInfoApiUserDocumentsStorageInfoGetError, GetUserSubscriptionApiUserSubscriptionsGetData, GetUserSubscriptionApiUserSubscriptionsGetResponse, GetUserSubscriptionApiUserSubscriptionsGetError, CreateSubscriptionApiUserSubscriptionsPostData, CreateSubscriptionApiUserSubscriptionsPostResponse, CreateSubscriptionApiUserSubscriptionsPostError, GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetData, GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponse, GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetError, UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutData, UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponse, UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutError, CancelSubscriptionApiUserSubscriptionsSessionIdDeleteData, CancelSubscriptionApiUserSubscriptionsSessionIdDeleteResponse, CancelSubscriptionApiUserSubscriptionsSessionIdDeleteError, GetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetData, GetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetResponse, GetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetError, PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetData, PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponse, PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetError, ListMyTicketsApiUserSupportTicketsGetData, ListMyTicketsApiUserSupportTicketsGetResponse, ListMyTicketsApiUserSupportTicketsGetError, CreateTicketApiUserSupportTicketsPostData, CreateTicketApiUserSupportTicketsPostResponse, CreateTicketApiUserSupportTicketsPostError, DeleteTicketApiUserSupportTicketsTicketIdDeleteData, DeleteTicketApiUserSupportTicketsTicketIdDeleteResponse, DeleteTicketApiUserSupportTicketsTicketIdDeleteError, GetTicketApiUserSupportTicketsTicketIdGetData, GetTicketApiUserSupportTicketsTicketIdGetResponse, GetTicketApiUserSupportTicketsTicketIdGetError, UpdateTicketApiUserSupportTicketsTicketIdPutData, UpdateTicketApiUserSupportTicketsTicketIdPutResponse, UpdateTicketApiUserSupportTicketsTicketIdPutError, GetUsersApiAdminUsersGetData, GetUsersApiAdminUsersGetResponse, GetUsersApiAdminUsersGetError, GetUserDetailsApiAdminUsersUserIdGetData, GetUserDetailsApiAdminUsersUserIdGetResponse, GetUserDetailsApiAdminUsersUserIdGetError, UpdateUserApiAdminUsersUserIdPutData, UpdateUserApiAdminUsersUserIdPutResponse, UpdateUserApiAdminUsersUserIdPutError, GetStorageSummaryApiAdminUsersStorageSummaryGetData, GetStorageSummaryApiAdminUsersStorageSummaryGetResponse, GetStorageSummaryApiAdminUsersStorageSummaryGetError, GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetData, GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponse, GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetError, ListTicketsAdminApiAdminSupportTicketsGetData, ListTicketsAdminApiAdminSupportTicketsGetResponse, ListTicketsAdminApiAdminSupportTicketsGetError, RespondTicketApiAdminSupportTicketsTicketIdResponsesPostData, RespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponse, RespondTicketApiAdminSupportTicketsTicketIdResponsesPostError, GetTicketAdminApiAdminSupportTicketsTicketIdGetData, GetTicketAdminApiAdminSupportTicketsTicketIdGetResponse, GetTicketAdminApiAdminSupportTicketsTicketIdGetError, GetAllPlansApiAdminPricingPlansGetData, GetAllPlansApiAdminPricingPlansGetResponse, GetAllPlansApiAdminPricingPlansGetError, CreatePlanApiAdminPricingPlansPostData, CreatePlanApiAdminPricingPlansPostResponse, CreatePlanApiAdminPricingPlansPostError, DeletePlanApiAdminPricingPlansPlanIdDeleteData, DeletePlanApiAdminPricingPlansPlanIdDeleteResponse, DeletePlanApiAdminPricingPlansPlanIdDeleteError, UpdatePlanApiAdminPricingPlansPlanIdPutData, UpdatePlanApiAdminPricingPlansPlanIdPutResponse, UpdatePlanApiAdminPricingPlansPlanIdPutError, GetSystemSettingsApiAdminSystemSettingsGetData, GetSystemSettingsApiAdminSystemSettingsGetError, UpdateSystemSettingsApiAdminSystemSettingsPutData, UpdateSystemSettingsApiAdminSystemSettingsPutError } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { zGoogleAuthUrlApiAuthGoogleUrlPostResponse, zRefreshTokenApiAuthRefreshPostResponse, zLogoutApiAuthLogoutPostResponse, zAdminLoginApiAuthAdminLoginPostResponse, zHealthCheckApiHealthGetResponse, zCeleryHealthCheckApiCeleryHealthGetResponse, zGetLocationInfoApiLocationsInfoCityIdGetResponse, zGetAllRegionsApiLocationsRegionsGetResponse, zGetAllSubregionsApiLocationsSubregionsGetResponse, zGetAllCountriesApiLocationsCountriesGetResponse, zGetAllStatesApiLocationsStatesGetResponse, zGetAllCitiesApiLocationsCitiesGetResponse, zStripeWebhookApiWebhooksStripePostResponse, zRagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponse, zGetStoragePresignedUrlApiStorageUrlFilePathGetResponse, zGetAllPlansApiPricingPlansGetResponse, zGetProfileApiUserProfileGetResponse, zUpdateProfileApiUserProfilePutResponse, zGetClientProfileApiUserProfileClientGetResponse, zListIssuesApiUserForumIssuesGetResponse, zCreateIssueApiUserForumIssuesPostResponse, zListMyIssuesApiUserForumIssuesMyGetResponse, zDeleteIssueApiUserForumIssuesIssueIdDeleteResponse, zUpdateIssueApiUserForumIssuesIssueIdPutResponse, zListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponse, zCreateCommentApiUserForumIssuesIssueIdCommentsPostResponse, zDeleteCommentApiUserForumCommentsCommentIdDeleteResponse, zUpdateCommentApiUserForumCommentsCommentIdPutResponse, zUploadDocumentApiUserDocumentsUploadPostResponse, zUploadDocumentsApiUserDocumentsUploadsPostResponse, zListDocumentsApiUserDocumentsGetResponse, zDeleteDocumentApiUserDocumentsDocumentIdDeleteResponse, zUpdateDocumentApiUserDocumentsDocumentIdPutResponse, zGetStorageInfoApiUserDocumentsStorageInfoGetResponse, zGetUserSubscriptionApiUserSubscriptionsGetResponse, zCreateSubscriptionApiUserSubscriptionsPostResponse, zGetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponse, zUpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponse, zCancelSubscriptionApiUserSubscriptionsSessionIdDeleteResponse, zGetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetResponse, zPreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponse, zListMyTicketsApiUserSupportTicketsGetResponse, zCreateTicketApiUserSupportTicketsPostResponse, zDeleteTicketApiUserSupportTicketsTicketIdDeleteResponse, zGetTicketApiUserSupportTicketsTicketIdGetResponse, zUpdateTicketApiUserSupportTicketsTicketIdPutResponse, zGetUsersApiAdminUsersGetResponse, zGetUserDetailsApiAdminUsersUserIdGetResponse, zUpdateUserApiAdminUsersUserIdPutResponse, zGetStorageSummaryApiAdminUsersStorageSummaryGetResponse, zGetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponse, zListTicketsAdminApiAdminSupportTicketsGetResponse, zRespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponse, zGetTicketAdminApiAdminSupportTicketsTicketIdGetResponse, zGetAllPlansApiAdminPricingPlansGetResponse, zCreatePlanApiAdminPricingPlansPostResponse, zDeletePlanApiAdminPricingPlansPlanIdDeleteResponse, zUpdatePlanApiAdminPricingPlansPlanIdPutResponse } from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 * Root endpoint
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, RootGetError, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Google OAuth URL
 * Get Google OAuth authorization URL
 */
export const googleAuthUrlApiAuthGoogleUrlPost = <ThrowOnError extends boolean = false>(options?: Options<GoogleAuthUrlApiAuthGoogleUrlPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GoogleAuthUrlApiAuthGoogleUrlPostResponse, GoogleAuthUrlApiAuthGoogleUrlPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGoogleAuthUrlApiAuthGoogleUrlPostResponse.parseAsync(data);
        },
        url: '/api/auth/google/url',
        ...options
    });
};

/**
 * Google OAuth Callback
 * Handle Google OAuth callback and redirect to frontend with tokens
 */
export const googleCallbackApiAuthGoogleCallbackGet = <ThrowOnError extends boolean = false>(options: Options<GoogleCallbackApiAuthGoogleCallbackGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GoogleCallbackApiAuthGoogleCallbackGetError, ThrowOnError>({
        url: '/api/auth/google/callback',
        ...options
    });
};

/**
 * Refresh Access Token
 * Generate a new access token using a valid refresh token
 */
export const refreshTokenApiAuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenApiAuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshTokenApiAuthRefreshPostResponse, RefreshTokenApiAuthRefreshPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zRefreshTokenApiAuthRefreshPostResponse.parseAsync(data);
        },
        url: '/api/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * User Logout
 * Invalidate user's refresh token and log them out
 */
export const logoutApiAuthLogoutPost = <ThrowOnError extends boolean = false>(options: Options<LogoutApiAuthLogoutPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LogoutApiAuthLogoutPostResponse, LogoutApiAuthLogoutPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zLogoutApiAuthLogoutPostResponse.parseAsync(data);
        },
        url: '/api/auth/logout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin login without email verification
 * Admin login with email and password
 */
export const adminLoginApiAuthAdminLoginPost = <ThrowOnError extends boolean = false>(options: Options<AdminLoginApiAuthAdminLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminLoginApiAuthAdminLoginPostResponse, AdminLoginApiAuthAdminLoginPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zAdminLoginApiAuthAdminLoginPostResponse.parseAsync(data);
        },
        url: '/api/auth/admin/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Health Check
 * Basic health check endpoint
 */
export const healthCheckApiHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckApiHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckApiHealthGetResponse, HealthCheckApiHealthGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zHealthCheckApiHealthGetResponse.parseAsync(data);
        },
        url: '/api/health/',
        ...options
    });
};

/**
 * Celery Health Check
 */
export const celeryHealthCheckApiCeleryHealthGet = <ThrowOnError extends boolean = false>(options?: Options<CeleryHealthCheckApiCeleryHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CeleryHealthCheckApiCeleryHealthGetResponse, CeleryHealthCheckApiCeleryHealthGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCeleryHealthCheckApiCeleryHealthGetResponse.parseAsync(data);
        },
        url: '/api/celery/health',
        ...options
    });
};

/**
 * Celery Stats
 */
export const celeryStatsApiCeleryStatsGet = <ThrowOnError extends boolean = false>(options?: Options<CeleryStatsApiCeleryStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, CeleryStatsApiCeleryStatsGetError, ThrowOnError>({
        url: '/api/celery/stats',
        ...options
    });
};

/**
 * Purge Celery Queues
 */
export const purgeCeleryQueuesApiCeleryPurgePost = <ThrowOnError extends boolean = false>(options?: Options<PurgeCeleryQueuesApiCeleryPurgePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, PurgeCeleryQueuesApiCeleryPurgePostError, ThrowOnError>({
        url: '/api/celery/purge',
        ...options
    });
};

/**
 * Trigger Subscription Lifecycle
 */
export const triggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePost = <ThrowOnError extends boolean = false>(options?: Options<TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostError, ThrowOnError>({
        url: '/api/celery/tasks/enforce-subscription-lifecycle',
        ...options
    });
};

/**
 * Get location info
 * Get detailed location information by city ID
 */
export const getLocationInfoApiLocationsInfoCityIdGet = <ThrowOnError extends boolean = false>(options: Options<GetLocationInfoApiLocationsInfoCityIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLocationInfoApiLocationsInfoCityIdGetResponse, GetLocationInfoApiLocationsInfoCityIdGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetLocationInfoApiLocationsInfoCityIdGetResponse.parseAsync(data);
        },
        url: '/api/locations/info/{city_id}',
        ...options
    });
};

/**
 * Get all regions
 * Get all regions with optional search and pagination
 */
export const getAllRegionsApiLocationsRegionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllRegionsApiLocationsRegionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllRegionsApiLocationsRegionsGetResponse, GetAllRegionsApiLocationsRegionsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetAllRegionsApiLocationsRegionsGetResponse.parseAsync(data);
        },
        url: '/api/locations/regions',
        ...options
    });
};

/**
 * Get all subregions
 * Get all subregions with optional region filter, search and pagination
 */
export const getAllSubregionsApiLocationsSubregionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllSubregionsApiLocationsSubregionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllSubregionsApiLocationsSubregionsGetResponse, GetAllSubregionsApiLocationsSubregionsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetAllSubregionsApiLocationsSubregionsGetResponse.parseAsync(data);
        },
        url: '/api/locations/subregions',
        ...options
    });
};

/**
 * Get all countries
 * Get all countries with optional region/subregion filter, search and pagination
 */
export const getAllCountriesApiLocationsCountriesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllCountriesApiLocationsCountriesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCountriesApiLocationsCountriesGetResponse, GetAllCountriesApiLocationsCountriesGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetAllCountriesApiLocationsCountriesGetResponse.parseAsync(data);
        },
        url: '/api/locations/countries',
        ...options
    });
};

/**
 * Get all states
 * Get all states with optional country filter, search and pagination
 */
export const getAllStatesApiLocationsStatesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllStatesApiLocationsStatesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllStatesApiLocationsStatesGetResponse, GetAllStatesApiLocationsStatesGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetAllStatesApiLocationsStatesGetResponse.parseAsync(data);
        },
        url: '/api/locations/states',
        ...options
    });
};

/**
 * Get all cities
 * Get all cities with optional state/country filter, search and pagination
 */
export const getAllCitiesApiLocationsCitiesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllCitiesApiLocationsCitiesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllCitiesApiLocationsCitiesGetResponse, GetAllCitiesApiLocationsCitiesGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetAllCitiesApiLocationsCitiesGetResponse.parseAsync(data);
        },
        url: '/api/locations/cities',
        ...options
    });
};

/**
 * Stripe Webhook
 * Handle Stripe webhook events for subscription management
 */
export const stripeWebhookApiWebhooksStripePost = <ThrowOnError extends boolean = false>(options?: Options<StripeWebhookApiWebhooksStripePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StripeWebhookApiWebhooksStripePostResponse, StripeWebhookApiWebhooksStripePostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zStripeWebhookApiWebhooksStripePostResponse.parseAsync(data);
        },
        url: '/api/webhooks/stripe',
        ...options
    });
};

/**
 * RAG summary webhook
 * Receive AI summary from RAG and update document status
 */
export const ragSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPost = <ThrowOnError extends boolean = false>(options: Options<RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponse, RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zRagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponse.parseAsync(data);
        },
        url: '/api/webhooks/rag-summary/{user_id}/{document_id}',
        ...options
    });
};

/**
 * Proxy Storage File
 */
export const proxyStorageFileApiStorageFilePathGet = <ThrowOnError extends boolean = false>(options: Options<ProxyStorageFileApiStorageFilePathGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, ProxyStorageFileApiStorageFilePathGetError, ThrowOnError>({
        url: '/api/storage/{file_path}',
        ...options
    });
};

/**
 * Get Storage Presigned Url
 * Return a raw presigned URL for a given storage path (no rewrite).
 */
export const getStoragePresignedUrlApiStorageUrlFilePathGet = <ThrowOnError extends boolean = false>(options: Options<GetStoragePresignedUrlApiStorageUrlFilePathGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStoragePresignedUrlApiStorageUrlFilePathGetResponse, GetStoragePresignedUrlApiStorageUrlFilePathGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetStoragePresignedUrlApiStorageUrlFilePathGetResponse.parseAsync(data);
        },
        url: '/api/storage/url/{file_path}',
        ...options
    });
};

/**
 * Get all pricing plans
 * Get all pricing plans with search and pagination (Public endpoint)
 */
export const getAllPlansApiPricingPlansGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllPlansApiPricingPlansGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPlansApiPricingPlansGetResponse, GetAllPlansApiPricingPlansGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetAllPlansApiPricingPlansGetResponse.parseAsync(data);
        },
        url: '/api/pricing/plans',
        ...options
    });
};

/**
 * Get profile
 * Get current user's profile
 */
export const getProfileApiUserProfileGet = <ThrowOnError extends boolean = false>(options?: Options<GetProfileApiUserProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfileApiUserProfileGetResponse, GetProfileApiUserProfileGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetProfileApiUserProfileGetResponse.parseAsync(data);
        },
        url: '/api/user/profile',
        ...options
    });
};

/**
 * Update profile (Form Data)
 * Update current user's profile using form data (supports file uploads)
 */
export const updateProfileApiUserProfilePut = <ThrowOnError extends boolean = false>(options?: Options<UpdateProfileApiUserProfilePutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<UpdateProfileApiUserProfilePutResponse, UpdateProfileApiUserProfilePutError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zUpdateProfileApiUserProfilePutResponse.parseAsync(data);
        },
        url: '/api/user/profile',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get client profile
 * Get current client's profile with plan, storage, and state info
 */
export const getClientProfileApiUserProfileClientGet = <ThrowOnError extends boolean = false>(options?: Options<GetClientProfileApiUserProfileClientGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetClientProfileApiUserProfileClientGetResponse, GetClientProfileApiUserProfileClientGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetClientProfileApiUserProfileClientGetResponse.parseAsync(data);
        },
        url: '/api/user/profile/client',
        ...options
    });
};

/**
 * List all forum issues
 * List all forum issues with search and pagination
 */
export const listIssuesApiUserForumIssuesGet = <ThrowOnError extends boolean = false>(options?: Options<ListIssuesApiUserForumIssuesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIssuesApiUserForumIssuesGetResponse, ListIssuesApiUserForumIssuesGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zListIssuesApiUserForumIssuesGetResponse.parseAsync(data);
        },
        url: '/api/user/forum/issues',
        ...options
    });
};

/**
 * Create a new forum issue
 * User create a new forum issue with attachments
 */
export const createIssueApiUserForumIssuesPost = <ThrowOnError extends boolean = false>(options: Options<CreateIssueApiUserForumIssuesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIssueApiUserForumIssuesPostResponse, CreateIssueApiUserForumIssuesPostError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zCreateIssueApiUserForumIssuesPostResponse.parseAsync(data);
        },
        url: '/api/user/forum/issues',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * List my forum issues
 * List my forum issues with search and pagination
 */
export const listMyIssuesApiUserForumIssuesMyGet = <ThrowOnError extends boolean = false>(options?: Options<ListMyIssuesApiUserForumIssuesMyGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMyIssuesApiUserForumIssuesMyGetResponse, ListMyIssuesApiUserForumIssuesMyGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zListMyIssuesApiUserForumIssuesMyGetResponse.parseAsync(data);
        },
        url: '/api/user/forum/issues/my',
        ...options
    });
};

/**
 * Delete my forum issue
 * Delete my forum issue
 */
export const deleteIssueApiUserForumIssuesIssueIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteIssueApiUserForumIssuesIssueIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteIssueApiUserForumIssuesIssueIdDeleteResponse, DeleteIssueApiUserForumIssuesIssueIdDeleteError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zDeleteIssueApiUserForumIssuesIssueIdDeleteResponse.parseAsync(data);
        },
        url: '/api/user/forum/issues/{issue_id}',
        ...options
    });
};

/**
 * Update my forum issue
 * Update my forum issue
 */
export const updateIssueApiUserForumIssuesIssueIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateIssueApiUserForumIssuesIssueIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateIssueApiUserForumIssuesIssueIdPutResponse, UpdateIssueApiUserForumIssuesIssueIdPutError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zUpdateIssueApiUserForumIssuesIssueIdPutResponse.parseAsync(data);
        },
        url: '/api/user/forum/issues/{issue_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * List all comments for an issue
 * List all comments for an issue
 */
export const listCommentsByIssueApiUserForumIssuesIssueIdCommentsGet = <ThrowOnError extends boolean = false>(options: Options<ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponse, ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponse.parseAsync(data);
        },
        url: '/api/user/forum/issues/{issue_id}/comments',
        ...options
    });
};

/**
 * Create a new forum comment
 * Create a new forum comment with attachments
 */
export const createCommentApiUserForumIssuesIssueIdCommentsPost = <ThrowOnError extends boolean = false>(options: Options<CreateCommentApiUserForumIssuesIssueIdCommentsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCommentApiUserForumIssuesIssueIdCommentsPostResponse, CreateCommentApiUserForumIssuesIssueIdCommentsPostError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zCreateCommentApiUserForumIssuesIssueIdCommentsPostResponse.parseAsync(data);
        },
        url: '/api/user/forum/issues/{issue_id}/comments',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete my forum comment
 * Delete my forum comment
 */
export const deleteCommentApiUserForumCommentsCommentIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCommentApiUserForumCommentsCommentIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCommentApiUserForumCommentsCommentIdDeleteResponse, DeleteCommentApiUserForumCommentsCommentIdDeleteError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zDeleteCommentApiUserForumCommentsCommentIdDeleteResponse.parseAsync(data);
        },
        url: '/api/user/forum/comments/{comment_id}',
        ...options
    });
};

/**
 * Update my forum comment
 * Update my forum comment
 */
export const updateCommentApiUserForumCommentsCommentIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCommentApiUserForumCommentsCommentIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCommentApiUserForumCommentsCommentIdPutResponse, UpdateCommentApiUserForumCommentsCommentIdPutError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zUpdateCommentApiUserForumCommentsCommentIdPutResponse.parseAsync(data);
        },
        url: '/api/user/forum/comments/{comment_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Upload document (single)
 * Upload a single document file using form data with key 'file'.
 */
export const uploadDocumentApiUserDocumentsUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadDocumentApiUserDocumentsUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadDocumentApiUserDocumentsUploadPostResponse, UploadDocumentApiUserDocumentsUploadPostError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zUploadDocumentApiUserDocumentsUploadPostResponse.parseAsync(data);
        },
        url: '/api/user/documents/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Upload documents (multiple)
 * Upload one or more document files using form data with key 'files'.
 */
export const uploadDocumentsApiUserDocumentsUploadsPost = <ThrowOnError extends boolean = false>(options: Options<UploadDocumentsApiUserDocumentsUploadsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadDocumentsApiUserDocumentsUploadsPostResponse, UploadDocumentsApiUserDocumentsUploadsPostError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zUploadDocumentsApiUserDocumentsUploadsPostResponse.parseAsync(data);
        },
        url: '/api/user/documents/uploads',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * List my documents
 * List documents with pagination and optional search query
 */
export const listDocumentsApiUserDocumentsGet = <ThrowOnError extends boolean = false>(options?: Options<ListDocumentsApiUserDocumentsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDocumentsApiUserDocumentsGetResponse, ListDocumentsApiUserDocumentsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zListDocumentsApiUserDocumentsGetResponse.parseAsync(data);
        },
        url: '/api/user/documents/',
        ...options
    });
};

/**
 * Download document (Secure)
 * Download a document file by ID (Requires authentication and ownership)
 */
export const downloadDocumentSecureApiUserDocumentsDocumentIdDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetError, ThrowOnError>({
        url: '/api/user/documents/{document_id}/download',
        ...options
    });
};

/**
 * Delete document
 * Delete a document
 */
export const deleteDocumentApiUserDocumentsDocumentIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentApiUserDocumentsDocumentIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentApiUserDocumentsDocumentIdDeleteResponse, DeleteDocumentApiUserDocumentsDocumentIdDeleteError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zDeleteDocumentApiUserDocumentsDocumentIdDeleteResponse.parseAsync(data);
        },
        url: '/api/user/documents/{document_id}',
        ...options
    });
};

/**
 * Update document
 * Update a document
 */
export const updateDocumentApiUserDocumentsDocumentIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateDocumentApiUserDocumentsDocumentIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateDocumentApiUserDocumentsDocumentIdPutResponse, UpdateDocumentApiUserDocumentsDocumentIdPutError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zUpdateDocumentApiUserDocumentsDocumentIdPutResponse.parseAsync(data);
        },
        url: '/api/user/documents/{document_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get storage information
 * Get user storage information directly from storage service (more efficient than database queries)
 */
export const getStorageInfoApiUserDocumentsStorageInfoGet = <ThrowOnError extends boolean = false>(options?: Options<GetStorageInfoApiUserDocumentsStorageInfoGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStorageInfoApiUserDocumentsStorageInfoGetResponse, GetStorageInfoApiUserDocumentsStorageInfoGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetStorageInfoApiUserDocumentsStorageInfoGetResponse.parseAsync(data);
        },
        url: '/api/user/documents/storage/info',
        ...options
    });
};

/**
 * Get User Subscription
 * Get user's current subscription
 */
export const getUserSubscriptionApiUserSubscriptionsGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserSubscriptionApiUserSubscriptionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSubscriptionApiUserSubscriptionsGetResponse, GetUserSubscriptionApiUserSubscriptionsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetUserSubscriptionApiUserSubscriptionsGetResponse.parseAsync(data);
        },
        url: '/api/user/subscriptions',
        ...options
    });
};

/**
 * Create or Reactivate Subscription
 * Create a new subscription or return Stripe Checkout session when needed
 */
export const createSubscriptionApiUserSubscriptionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateSubscriptionApiUserSubscriptionsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubscriptionApiUserSubscriptionsPostResponse, CreateSubscriptionApiUserSubscriptionsPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCreateSubscriptionApiUserSubscriptionsPostResponse.parseAsync(data);
        },
        url: '/api/user/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User Subscriptions History
 * Get user's subscription history with optional filtering and pagination
 */
export const getUserSubscriptionsHistoryApiUserSubscriptionsHistoryGet = <ThrowOnError extends boolean = false>(options: Options<GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponse, GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponse.parseAsync(data);
        },
        url: '/api/user/subscriptions/history',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upgrade Subscription
 * Upgrade subscription to a new plan with proration
 */
export const upgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePut = <ThrowOnError extends boolean = false>(options: Options<UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponse, UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zUpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponse.parseAsync(data);
        },
        url: '/api/user/subscriptions/{subscription_id}/upgrade',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel Subscription
 * Cancel user's subscription using checkout session ID (immediate cancellation)
 */
export const cancelSubscriptionApiUserSubscriptionsSessionIdDelete = <ThrowOnError extends boolean = false>(options: Options<CancelSubscriptionApiUserSubscriptionsSessionIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelSubscriptionApiUserSubscriptionsSessionIdDeleteResponse, CancelSubscriptionApiUserSubscriptionsSessionIdDeleteError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCancelSubscriptionApiUserSubscriptionsSessionIdDeleteResponse.parseAsync(data);
        },
        url: '/api/user/subscriptions/{session_id}',
        ...options
    });
};

/**
 * Get Checkout Session Status
 * Get checkout session status for success/cancel pages (user-specific)
 */
export const getCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGet = <ThrowOnError extends boolean = false>(options: Options<GetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetResponse, GetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetResponse.parseAsync(data);
        },
        url: '/api/user/subscriptions/checkout/{session_id}/status',
        ...options
    });
};

/**
 * Preview upgrade
 * Preview subscription upgrade cost and proration
 */
export const previewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGet = <ThrowOnError extends boolean = false>(options: Options<PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponse, PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zPreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponse.parseAsync(data);
        },
        url: '/api/user/subscriptions/{subscription_id}/upgrade/preview/{new_plan_id}',
        ...options
    });
};

/**
 * List my tickets
 * List my tickets with search and pagination
 */
export const listMyTicketsApiUserSupportTicketsGet = <ThrowOnError extends boolean = false>(options?: Options<ListMyTicketsApiUserSupportTicketsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMyTicketsApiUserSupportTicketsGetResponse, ListMyTicketsApiUserSupportTicketsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zListMyTicketsApiUserSupportTicketsGetResponse.parseAsync(data);
        },
        url: '/api/user/support/tickets',
        ...options
    });
};

/**
 * Create support ticket
 * User create a new support ticket with attachments
 */
export const createTicketApiUserSupportTicketsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTicketApiUserSupportTicketsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTicketApiUserSupportTicketsPostResponse, CreateTicketApiUserSupportTicketsPostError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zCreateTicketApiUserSupportTicketsPostResponse.parseAsync(data);
        },
        url: '/api/user/support/tickets',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete my ticket
 * Delete my ticket
 */
export const deleteTicketApiUserSupportTicketsTicketIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketApiUserSupportTicketsTicketIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTicketApiUserSupportTicketsTicketIdDeleteResponse, DeleteTicketApiUserSupportTicketsTicketIdDeleteError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zDeleteTicketApiUserSupportTicketsTicketIdDeleteResponse.parseAsync(data);
        },
        url: '/api/user/support/tickets/{ticket_id}',
        ...options
    });
};

/**
 * Get my ticket
 * Get my ticket detail
 */
export const getTicketApiUserSupportTicketsTicketIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTicketApiUserSupportTicketsTicketIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketApiUserSupportTicketsTicketIdGetResponse, GetTicketApiUserSupportTicketsTicketIdGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetTicketApiUserSupportTicketsTicketIdGetResponse.parseAsync(data);
        },
        url: '/api/user/support/tickets/{ticket_id}',
        ...options
    });
};

/**
 * Update my ticket
 * Update my ticket
 */
export const updateTicketApiUserSupportTicketsTicketIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTicketApiUserSupportTicketsTicketIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTicketApiUserSupportTicketsTicketIdPutResponse, UpdateTicketApiUserSupportTicketsTicketIdPutError, ThrowOnError>({
        ...formDataBodySerializer,
        responseValidator: async (data) => {
            return await zUpdateTicketApiUserSupportTicketsTicketIdPutResponse.parseAsync(data);
        },
        url: '/api/user/support/tickets/{ticket_id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get Users
 */
export const getUsersApiAdminUsersGet = <ThrowOnError extends boolean = false>(options?: Options<GetUsersApiAdminUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersApiAdminUsersGetResponse, GetUsersApiAdminUsersGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetUsersApiAdminUsersGetResponse.parseAsync(data);
        },
        url: '/api/admin/users/',
        ...options
    });
};

/**
 * Get User Details
 * Get detailed information for a specific user
 */
export const getUserDetailsApiAdminUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserDetailsApiAdminUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserDetailsApiAdminUsersUserIdGetResponse, GetUserDetailsApiAdminUsersUserIdGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetUserDetailsApiAdminUsersUserIdGetResponse.parseAsync(data);
        },
        url: '/api/admin/users/{user_id}',
        ...options
    });
};

/**
 * Update User
 * Update user data by admin
 */
export const updateUserApiAdminUsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserApiAdminUsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserApiAdminUsersUserIdPutResponse, UpdateUserApiAdminUsersUserIdPutError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zUpdateUserApiAdminUsersUserIdPutResponse.parseAsync(data);
        },
        url: '/api/admin/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Storage Summary
 * Get overall storage usage summary across all users
 */
export const getStorageSummaryApiAdminUsersStorageSummaryGet = <ThrowOnError extends boolean = false>(options?: Options<GetStorageSummaryApiAdminUsersStorageSummaryGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStorageSummaryApiAdminUsersStorageSummaryGetResponse, GetStorageSummaryApiAdminUsersStorageSummaryGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetStorageSummaryApiAdminUsersStorageSummaryGetResponse.parseAsync(data);
        },
        url: '/api/admin/users/storage/summary',
        ...options
    });
};

/**
 * Get User Subscriptions
 * Get subscription history for a specific user (admin).
 */
export const getUserSubscriptionsApiAdminUsersUserIdSubscriptionsGet = <ThrowOnError extends boolean = false>(options: Options<GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponse, GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponse.parseAsync(data);
        },
        url: '/api/admin/users/{user_id}/subscriptions',
        ...options
    });
};

/**
 * List tickets for admin team (priority)
 * List tickets for admin with filtering and sorting
 */
export const listTicketsAdminApiAdminSupportTicketsGet = <ThrowOnError extends boolean = false>(options?: Options<ListTicketsAdminApiAdminSupportTicketsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTicketsAdminApiAdminSupportTicketsGetResponse, ListTicketsAdminApiAdminSupportTicketsGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zListTicketsAdminApiAdminSupportTicketsGetResponse.parseAsync(data);
        },
        url: '/api/admin/support/tickets',
        ...options
    });
};

/**
 * Respond to a ticket
 * Respond to a ticket
 */
export const respondTicketApiAdminSupportTicketsTicketIdResponsesPost = <ThrowOnError extends boolean = false>(options: Options<RespondTicketApiAdminSupportTicketsTicketIdResponsesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponse, RespondTicketApiAdminSupportTicketsTicketIdResponsesPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zRespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponse.parseAsync(data);
        },
        url: '/api/admin/support/tickets/{ticket_id}/responses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a ticket
 * Get a ticket
 */
export const getTicketAdminApiAdminSupportTicketsTicketIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTicketAdminApiAdminSupportTicketsTicketIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketAdminApiAdminSupportTicketsTicketIdGetResponse, GetTicketAdminApiAdminSupportTicketsTicketIdGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetTicketAdminApiAdminSupportTicketsTicketIdGetResponse.parseAsync(data);
        },
        url: '/api/admin/support/tickets/{ticket_id}',
        ...options
    });
};

/**
 * Get all pricing plans
 * Get all pricing plans with optional active filter, search, and pagination (Admin only)
 */
export const getAllPlansApiAdminPricingPlansGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllPlansApiAdminPricingPlansGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllPlansApiAdminPricingPlansGetResponse, GetAllPlansApiAdminPricingPlansGetError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zGetAllPlansApiAdminPricingPlansGetResponse.parseAsync(data);
        },
        url: '/api/admin/pricing/plans',
        ...options
    });
};

/**
 * Create pricing plan
 * Create a new pricing plan (Admin only)
 */
export const createPlanApiAdminPricingPlansPost = <ThrowOnError extends boolean = false>(options: Options<CreatePlanApiAdminPricingPlansPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePlanApiAdminPricingPlansPostResponse, CreatePlanApiAdminPricingPlansPostError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zCreatePlanApiAdminPricingPlansPostResponse.parseAsync(data);
        },
        url: '/api/admin/pricing/plans',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete pricing plan
 * Delete a pricing plan (Admin only)
 */
export const deletePlanApiAdminPricingPlansPlanIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePlanApiAdminPricingPlansPlanIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePlanApiAdminPricingPlansPlanIdDeleteResponse, DeletePlanApiAdminPricingPlansPlanIdDeleteError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zDeletePlanApiAdminPricingPlansPlanIdDeleteResponse.parseAsync(data);
        },
        url: '/api/admin/pricing/plans/{plan_id}',
        ...options
    });
};

/**
 * Update pricing plan
 * Update a pricing plan (Admin only)
 */
export const updatePlanApiAdminPricingPlansPlanIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePlanApiAdminPricingPlansPlanIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePlanApiAdminPricingPlansPlanIdPutResponse, UpdatePlanApiAdminPricingPlansPlanIdPutError, ThrowOnError>({
        responseValidator: async (data) => {
            return await zUpdatePlanApiAdminPricingPlansPlanIdPutResponse.parseAsync(data);
        },
        url: '/api/admin/pricing/plans/{plan_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get System Settings
 * Get current system admin settings
 */
export const getSystemSettingsApiAdminSystemSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<GetSystemSettingsApiAdminSystemSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetSystemSettingsApiAdminSystemSettingsGetError, ThrowOnError>({
        url: '/api/admin/system/settings',
        ...options
    });
};

/**
 * Update System Settings
 * Update system admin settings
 */
export const updateSystemSettingsApiAdminSystemSettingsPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSystemSettingsApiAdminSystemSettingsPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateSystemSettingsApiAdminSystemSettingsPutError, ThrowOnError>({
        url: '/api/admin/system/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};