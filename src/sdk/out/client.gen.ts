// This file is auto-generated by @hey-api/openapi-ts

import { clearAuth, getAccessToken, getRefreshToken, setAccessToken } from "@/lib/auth";
import {
  type Config,
  createClient,
  createConfig,
  type ClientOptions as DefaultClientOptions,
} from "@hey-api/client-axios";
import type { ClientOptions } from "./types.gen";

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> = (
  override?: Config<DefaultClientOptions & T>
) => Config<Required<DefaultClientOptions> & T>;

export const client = createClient(
  createConfig<ClientOptions>({
    baseURL: "http://localhost:8000",
  })
);

client.instance.interceptors.request.use(config => {
  const token = getAccessToken();

  if (token) {
    config.headers = config.headers || {};
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

client.instance.interceptors.response.use(
  response => {
    return response;
  },
  async error => {
    const originalRequest = error.config;
    const status = error.response?.status || error.status;
    const url = originalRequest?.url || "";

    if (url.includes("/api/auth/refresh")) {
      return Promise.reject(error);
    }

    if (!originalRequest._retryCount) {
      originalRequest._retryCount = 0;
    }

    const maxRetries = 2;

    if (status === 401 && originalRequest._retryCount < maxRetries) {
      originalRequest._retryCount += 1;
      const refreshToken = getRefreshToken();

      if (!refreshToken) {
        clearAuth();
        return Promise.reject(error);
      }

      await new Promise(resolve => setTimeout(resolve, 1000 * originalRequest._retryCount));

      try {
        const { refreshTokenApiAuthRefreshPost } = await import("./sdk.gen");
        const res = await refreshTokenApiAuthRefreshPost({
          body: { refresh_token: refreshToken },
        });

        if (res.data?.data?.access_token) {
          setAccessToken(res.data.data.access_token);
          originalRequest.headers.Authorization = `Bearer ${res.data.data.access_token}`;
          return client.instance.request(originalRequest);
        }
      } catch {
        clearAuth();
        return Promise.reject(error);
      }
    }

    return Promise.reject(error);
  }
);
