// This file is auto-generated by @hey-api/openapi-ts

/**
 * Defined entity each response for admin usecase
 */
export type AdminSupportResponseDao = {
    ticket_id: string;
    response_text: string;
    created_at: string;
    updated_at: string;
};

/**
 * Enum for sorting by
 */
export enum AdminSupportTicketSortBy {
    UPDATED_AT = 'updated_at',
    URGENCY = 'urgency',
    TIER_LABEL = 'tier_label',
    SENDER_NAME = 'sender_name'
}

/**
 * Defined entity each ticket for admin usecase for list tickets
 */
export type AdminTicketDao = {
    ticket_id: string;
    issue_title: string;
    status: TicketStatus;
    urgency: TicketUrgency;
    tier_label: TierLabel;
    created_at: string;
    updated_at: string;
    user: UserDao;
};

/**
 * Defined entity each ticket for admin usecase for read detail tickets
 */
export type AdminTicketDetailDao = {
    ticket_id: string;
    issue_title: string;
    status: TicketStatus;
    urgency: TicketUrgency;
    tier_label: TierLabel;
    created_at: string;
    updated_at: string;
    user: UserDao;
    description?: string | null;
    response?: AdminSupportResponseDao | null;
    attachments?: Array<SupportAttachmentDao>;
};

export type ApiResponse = {
    success: boolean;
    data?: unknown | null;
    message?: string | null;
};

export type ApiResponseAdminSupportResponseDao = {
    success: boolean;
    data?: AdminSupportResponseDao | null;
    message?: string | null;
};

export type ApiResponseAdminTicketDetailDao = {
    success: boolean;
    data?: AdminTicketDetailDao | null;
    message?: string | null;
};

export type ApiResponseAuthTokenDao = {
    success: boolean;
    data?: AuthTokenDao | null;
    message?: string | null;
};

export type ApiResponseAuthUrlDao = {
    success: boolean;
    data?: AuthUrlDao | null;
    message?: string | null;
};

export type ApiResponseDocumentDao = {
    success: boolean;
    data?: DocumentDao | null;
    message?: string | null;
};

export type ApiResponseForumCommentDao = {
    success: boolean;
    data?: ForumCommentDao | null;
    message?: string | null;
};

export type ApiResponseForumIssueDao = {
    success: boolean;
    data?: ForumIssueDao | null;
    message?: string | null;
};

export type ApiResponseHealthResponse = {
    success: boolean;
    data?: HealthResponse | null;
    message?: string | null;
};

export type ApiResponseLocationDao = {
    success: boolean;
    data?: LocationDao | null;
    message?: string | null;
};

export type ApiResponsePricingAdminPlanDao = {
    success: boolean;
    data?: PricingAdminPlanDao | null;
    message?: string | null;
};

export type ApiResponseStorageInfoDao = {
    success: boolean;
    data?: StorageInfoDao | null;
    message?: string | null;
};

export type ApiResponseSubscriptionWithPlanDao = {
    success: boolean;
    data?: SubscriptionWithPlanDao | null;
    message?: string | null;
};

export type ApiResponseSupportTicketDetailDao = {
    success: boolean;
    data?: SupportTicketDetailDao | null;
    message?: string | null;
};

export type ApiResponseUnionSubscriptionWithPlanDaoCheckoutSessionDao = {
    success: boolean;
    data?: SubscriptionWithPlanDao | CheckoutSessionDao | null;
    message?: string | null;
};

export type ApiResponseUnionSubscriptionWithPlanDaoNoneType = {
    success: boolean;
    data?: SubscriptionWithPlanDao | null;
    message?: string | null;
};

export type ApiResponseUpgradePreviewDao = {
    success: boolean;
    data?: UpgradePreviewDao | null;
    message?: string | null;
};

export type ApiResponseUserBaseDao = {
    success: boolean;
    data?: UserBaseDao | null;
    message?: string | null;
};

export type ApiResponseUserClientDao = {
    success: boolean;
    data?: UserClientDao | null;
    message?: string | null;
};

export type ApiResponseBool = {
    success: boolean;
    data?: boolean | null;
    message?: string | null;
};

export type ApiResponseListDocumentDao = {
    success: boolean;
    data?: Array<DocumentDao> | null;
    message?: string | null;
};

/**
 * Authentication token data access object
 */
export type AuthTokenDao = {
    /**
     * JWT access token
     */
    access_token: string;
    /**
     * JWT refresh token
     */
    refresh_token: string;
    /**
     * Token expiration time in seconds
     */
    expires_in: number;
    /**
     * Whether the user was newly registered during this auth flow
     */
    is_new?: boolean;
    /**
     * User information
     */
    user: UserBaseDao;
};

/**
 * DAO for representing an authentication URL payload
 */
export type AuthUrlDao = {
    /**
     * Authorization URL
     */
    url: string;
};

/**
 * Response model for 400 Bad Request errors
 */
export type BadRequestResponse = {
    success?: boolean;
    data?: null;
    message?: string;
    errors?: Array<FieldError> | null;
};

export type BodyCreateCommentApiUserForumIssuesIssueIdCommentsPost = {
    content: string;
    parent_comment_id?: string | null;
    files?: Array<Blob | File> | null;
};

export type BodyCreateIssueApiUserForumIssuesPost = {
    title: string;
    description?: string | null;
    files?: Array<Blob | File> | null;
};

export type BodyCreateTicketApiUserSupportTicketsPost = {
    issue_title: string;
    description?: string | null;
    urgency?: TicketUrgency;
    files?: Array<Blob | File> | null;
};

export type BodyUpdateCommentApiUserForumCommentsCommentIdPut = {
    content?: string | null;
    files?: Array<Blob | File> | null;
};

export type BodyUpdateIssueApiUserForumIssuesIssueIdPut = {
    title?: string | null;
    description?: string | null;
    status?: string | null;
    files?: Array<Blob | File> | null;
};

export type BodyUpdateProfileApiUserProfilePut = {
    first_name?: string | null;
    last_name?: string | null;
    state_id?: number | null;
    date_of_birth?: string | null;
    profile_picture?: (Blob | File) | null;
};

export type BodyUpdateTicketApiUserSupportTicketsTicketIdPut = {
    issue_title?: string | null;
    description?: string | null;
    urgency?: TicketUrgency | null;
    files?: Array<Blob | File> | null;
};

export type BodyUploadDocumentApiUserDocumentsUploadPost = {
    /**
     * File to upload
     */
    file: Blob | File;
    metadata?: {
        [key: string]: unknown;
    } | null;
};

export type BodyUploadDocumentsApiUserDocumentsUploadsPost = {
    /**
     * One or more files to upload
     */
    files: Array<Blob | File>;
    metadata?: UploadDocumentsRequest | null;
};

export type CeleryHealthResponse = {
    status: string;
    active_tasks: number;
    scheduled_tasks: number;
    workers: number;
    queues: {
        [key: string]: number;
    };
};

/**
 * Checkout session response for Stripe Checkout
 */
export type CheckoutSessionDao = {
    /**
     * Stripe Checkout session URL
     */
    checkout_url: string;
    /**
     * Stripe Checkout session ID
     */
    session_id: string;
};

export type CityDao = {
    /**
     * City unique identifier
     */
    id: number;
    /**
     * City name
     */
    name: string;
    /**
     * State ID
     */
    state_id: number;
    /**
     * Country ID
     */
    country_id: number;
    /**
     * City latitude
     */
    latitude: number;
    /**
     * City longitude
     */
    longitude: number;
};

export type CountryDao = {
    /**
     * Country unique identifier
     */
    id: number;
    /**
     * Country name
     */
    name: string;
    /**
     * Region ID
     */
    region_id?: number | null;
    /**
     * Subregion ID
     */
    subregion_id?: number | null;
    /**
     * Country latitude
     */
    latitude?: number | null;
    /**
     * Country longitude
     */
    longitude?: number | null;
};

/**
 * DTO for creating a pricing plan
 */
export type CreatePlanDto = {
    /**
     * Plan name
     */
    name: string;
    /**
     * Plan description
     */
    description?: string | null;
    /**
     * Plan price
     */
    price: number | string;
    /**
     * Duration in days (null for unlimited)
     */
    duration_days?: number | null;
    /**
     * Storage limit in GB (null for unlimited)
     */
    storage_gb?: number | null;
    /**
     * Token count (null for unlimited)
     */
    token_count?: number | null;
    /**
     * Stripe price ID
     */
    stripe_price_id?: string | null;
};

/**
 * DTO for creating a subscription
 */
export type CreateSubscriptionDto = {
    /**
     * Plan ID
     */
    plan_id: string;
};

/**
 * Document data access object
 */
export type DocumentDao = {
    /**
     * Document ID
     */
    document_id: string;
    /**
     * Uploader user ID
     */
    uploaded_by: string;
    /**
     * Original file name
     */
    file_name: string;
    /**
     * Storage file path
     */
    file_path: string;
    /**
     * Public URL to access the file
     */
    file_url?: string | null;
    /**
     * File MIME type
     */
    mime_type?: string | null;
    /**
     * File size in bytes
     */
    file_size?: number | null;
    /**
     * Processing status
     */
    processing_status: ProcessingStatus;
    /**
     * Document summary
     */
    ai_summary?: string | null;
    /**
     * Additional metadata
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Upload date
     */
    uploaded_at: string;
    /**
     * Processing completion date
     */
    processed_at?: string | null;
};

/**
 * Email and password login request
 */
export type EmailPasswordLoginRequest = {
    /**
     * User email address
     */
    email: string;
    /**
     * User password
     */
    password: string;
};

export type ErrorResponse = {
    success: boolean;
    data?: null;
    message?: string | null;
    errors?: Array<FieldError> | null;
};

/**
 * field validation error
 */
export type FieldError = {
    field: string;
    message: string;
    tag: string;
    details?: {
        [key: string]: unknown;
    };
};

/**
 * Response model for 403 Forbidden errors
 */
export type ForbiddenResponse = {
    success?: boolean;
    data?: null;
    message?: string;
    errors?: Array<FieldError> | null;
};

/**
 * Defined entity each attachment for forum usecase that referenced from forum issues/comments
 */
export type ForumAttachmentDao = {
    attachment_id: string;
    url?: string | null;
};

/**
 * Defined entity each comment for forum usecase for CRU, Read for detail comments
 */
export type ForumCommentDao = {
    comment_id: string;
    issue_id: string;
    user: UserProfileDao;
    parent_comment_id?: string | null;
    content: string;
    comment_count: number;
    created_at: string;
    updated_at: string;
    attachments?: Array<ForumAttachmentDao>;
};

/**
 * Defined entity each issue for forum usecase for CRU, Read for detail issues
 */
export type ForumIssueDao = {
    issue_id: string;
    user: UserProfileDao;
    title: string;
    description?: string | null;
    status: IssueStatus;
    comment_count: number;
    created_at: string;
    updated_at: string;
    attachments?: Array<ForumAttachmentDao>;
};

export type HealthResponse = {
    status: string;
    timestamp: string;
    service: string;
    database: string;
    redis: string;
    version: string;
};

export enum IssueStatus {
    OPEN = 'open',
    IN_PROGRESS = 'in_progress',
    RESOLVED = 'resolved',
    CLOSED = 'closed'
}

export type LocationDao = {
    /**
     * City information
     */
    city?: CityDao | null;
    /**
     * State information
     */
    state?: StateDao | null;
    /**
     * Country information
     */
    country?: CountryDao | null;
    /**
     * Region information
     */
    region?: RegionDao | null;
    /**
     * Subregion information
     */
    subregion?: SubregionDao | null;
};

/**
 * User logout request
 */
export type LogoutRequest = {
    /**
     * Refresh token to invalidate
     */
    refresh_token: string;
};

/**
 * Response model for 404 Not Found errors
 */
export type NotFoundResponse = {
    success?: boolean;
    data?: null;
    message?: string;
    errors?: Array<FieldError> | null;
};

export type PaginatedApiResponse = {
    success: boolean;
    data?: unknown | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListAdminTicketDao = {
    success: boolean;
    data?: Array<AdminTicketDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListCityDao = {
    success: boolean;
    data?: Array<CityDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListCountryDao = {
    success: boolean;
    data?: Array<CountryDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListDocumentDao = {
    success: boolean;
    data?: Array<DocumentDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListForumCommentDao = {
    success: boolean;
    data?: Array<ForumCommentDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListForumIssueDao = {
    success: boolean;
    data?: Array<ForumIssueDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListPricingAdminPlanDao = {
    success: boolean;
    data?: Array<PricingAdminPlanDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListPricingUserPlanDao = {
    success: boolean;
    data?: Array<PricingUserPlanDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListRegionDao = {
    success: boolean;
    data?: Array<RegionDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListStateDao = {
    success: boolean;
    data?: Array<StateDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListSubregionDao = {
    success: boolean;
    data?: Array<SubregionDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListSubscriptionWithPlanDao = {
    success: boolean;
    data?: Array<SubscriptionWithPlanDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

export type PaginatedApiResponseListSupportTicketDao = {
    success: boolean;
    data?: Array<SupportTicketDao> | null;
    message?: string | null;
    meta: PaginationMetaModel | {
        [key: string]: unknown;
    };
};

/**
 * Pagination meta DAO
 */
export type PaginationMetaDto = {
    /**
     * Limit
     */
    limit?: number | null;
    /**
     * Current page
     */
    current_page?: number | null;
};

export type PaginationMetaModel = {
    limit: number;
    total: number;
    total_page: number;
    current_page: number;
};

/**
 * Payment method type enum
 */
export enum PaymentMethodType {
    CARD = 'card',
    BANK_ACCOUNT = 'bank_account',
    US_BANK_ACCOUNT = 'us_bank_account',
    SEPA_DEBIT = 'sepa_debit',
    IDEAL = 'ideal',
    SOFORT = 'sofort',
    BANCONTACT = 'bancontact',
    GIROPAY = 'giropay',
    EPS = 'eps',
    P24 = 'p24',
    ALIPAY = 'alipay',
    WECHAT_PAY = 'wechat_pay',
    KLARNA = 'klarna',
    AFTERPAY_CLEARPAY = 'afterpay_clearpay',
    AFFIRM = 'affirm',
    GRABPAY = 'grabpay',
    PAYNOW = 'paynow',
    ZIP = 'zip'
}

/**
 * Plan details for embedding inside a subscription response
 */
export type PlanDao = {
    /**
     * Plan name
     */
    name: string;
    /**
     * Plan description
     */
    description?: string | null;
    /**
     * Plan storage limit
     */
    storage_gb?: number | null;
    /**
     * Plan token limit
     */
    token_count?: number | null;
    /**
     * Plan duration
     */
    duration_days?: number | null;
};

/**
 * Pricing plan data access object
 */
export type PricingAdminPlanDao = {
    /**
     * Plan ID
     */
    plan_id: string;
    /**
     * Plan name
     */
    name: string;
    /**
     * Plan description
     */
    description?: string | null;
    /**
     * Plan price
     */
    price: string;
    /**
     * Duration in days (null=unlimited)
     */
    duration_days?: number | null;
    /**
     * Storage limit in GB (null=unlimited)
     */
    storage_gb?: number | null;
    /**
     * Token count (null=unlimited)
     */
    token_count?: number | null;
    /**
     * Creation date
     */
    created_at: string;
    /**
     * Last update date
     */
    updated_at: string;
};

/**
 * Pricing plan data access object
 */
export type PricingUserPlanDao = {
    /**
     * Plan ID
     */
    plan_id: string;
    /**
     * Plan name
     */
    name: string;
    /**
     * Plan description
     */
    description?: string | null;
    /**
     * Plan price
     */
    price: string;
    /**
     * Duration in days (null=unlimited)
     */
    duration_days?: number | null;
    /**
     * Storage limit in GB (null=unlimited)
     */
    storage_gb?: number | null;
    /**
     * Token count (null=unlimited)
     */
    token_count?: number | null;
};

/**
 * Document processing status enumeration
 */
export enum ProcessingStatus {
    PENDING = 'pending',
    PROCESSING = 'processing',
    COMPLETED = 'completed',
    FAILED = 'failed'
}

/**
 * Token refresh request
 */
export type RefreshTokenRequest = {
    /**
     * Refresh token to generate new access token
     */
    refresh_token: string;
};

export type RegionDao = {
    /**
     * Region unique identifier
     */
    id: number;
    /**
     * Region name
     */
    name: string;
};

/**
 * DTO for responding to a ticket by admin
 */
export type RespondTicketDto = {
    response_text: string;
};

/**
 * Sign-in methods for user authentication
 */
export enum SignInMethod {
    GOOGLE = 'google',
    FACEBOOK = 'facebook',
    APPLE = 'apple',
    EMAIL_PASSWORD = 'email_password'
}

/**
 * Enum for sorting order
 */
export enum SortOrder {
    ASC = 'asc',
    DESC = 'desc'
}

export type StateDao = {
    /**
     * State unique identifier
     */
    id: number;
    /**
     * State name
     */
    name: string;
    /**
     * Country ID
     */
    country_id: number;
    /**
     * Country code
     */
    country_code: string;
    /**
     * State latitude
     */
    latitude?: number | null;
    /**
     * State longitude
     */
    longitude?: number | null;
};

/**
 * Storage information response DAO
 */
export type StorageInfoDao = {
    /**
     * User ID
     */
    user_id: string;
    /**
     * Total number of files
     */
    total_files: number;
    /**
     * Total storage used in bytes
     */
    total_size_bytes: number;
    /**
     * Total storage used in MB
     */
    total_size_mb: number;
    /**
     * Total storage used in GB
     */
    total_size_gb: number;
    /**
     * Last updated timestamp
     */
    last_updated: string;
    /**
     * Current storage limit in bytes (plan or system)
     */
    current_limit_storage_bytes: number;
    /**
     * Current storage limit in MB (plan or system)
     */
    current_limit_storage_mb: number;
    /**
     * Current storage limit in GB (plan or system)
     */
    current_limit_storage_gb: number;
};

/**
 * Stripe webhook event response
 */
export type StripeWebhookEventDao = {
    /**
     * Whether the webhook event was successful
     */
    success: boolean;
};

export type SubregionDao = {
    /**
     * Subregion unique identifier
     */
    id: number;
    /**
     * Subregion name
     */
    name: string;
    /**
     * Parent region ID
     */
    region_id: number;
};

/**
 * DTO for filtering subscription history
 */
export type SubscriptionHistoryFilterDto = {
    /**
     * Filter by subscription status
     */
    status?: SubscriptionStatus | null;
    /**
     * Pagination parameters
     */
    pagination?: PaginationMetaDto | null;
};

/**
 * Subscription status enum
 */
export enum SubscriptionStatus {
    PENDING = 'pending',
    ACTIVE = 'active',
    GRACE_PERIOD = 'grace_period',
    EXPIRED = 'expired',
    EXPIRED_UNPAID = 'expired_unpaid',
    FAILED = 'failed'
}

/**
 * Subscription DAO with plan details
 */
export type SubscriptionWithPlanDao = {
    /**
     * Subscription ID
     */
    subscription_id: string;
    /**
     * Client ID
     */
    client_id: string;
    /**
     * Plan ID
     */
    plan_id: string;
    /**
     * Stripe subscription ID
     */
    stripe_subscription_id?: string | null;
    /**
     * Stripe payment method ID
     */
    stripe_payment_method_id?: string | null;
    /**
     * Subscription status
     */
    status: SubscriptionStatus;
    /**
     * Payment method type
     */
    payment_method_type: PaymentMethodType;
    /**
     * Current subscription price
     */
    current_price: string;
    /**
     * Latest invoice URL
     */
    invoice_url?: string | null;
    /**
     * Current period start
     */
    current_period_start?: string | null;
    /**
     * Current period end
     */
    current_period_end?: string | null;
    /**
     * Grace period end
     */
    grace_period_end?: string | null;
    /**
     * Previous plan ID for upgrades
     */
    upgraded_from_plan_id?: string | null;
    /**
     * Creation date
     */
    created_at: string;
    /**
     * Last update date
     */
    updated_at: string;
    /**
     * Whether subscription is soft deleted
     */
    soft_delete: boolean;
    /**
     * Plan details
     */
    plan: PlanDao;
};

/**
 * Defined entity each attachments for user usecase that referenced from support ticket
 */
export type SupportAttachmentDao = {
    attachment_id: string;
    url?: string | null;
};

/**
 * Defined entity each ticket for user usecase for read tickets
 */
export type SupportTicketDao = {
    ticket_id: string;
    issue_title: string;
    status: TicketStatus;
    created_at: string;
    updated_at: string;
};

/**
 * Defined entity each ticket for user usecase for CRU, Read for detail tickets
 */
export type SupportTicketDetailDao = {
    ticket_id: string;
    issue_title: string;
    status: TicketStatus;
    created_at: string;
    updated_at: string;
    description?: string | null;
    urgency: TicketUrgency;
    attachments?: Array<SupportAttachmentDao>;
    response?: TicketResponseDao | null;
};

/**
 * Defined entity each response for user usecase after got responded by admin
 */
export type TicketResponseDao = {
    response_text: string;
    created_at: string;
    updated_at: string;
};

export enum TicketStatus {
    NEW = 'new',
    RESPONDED = 'responded'
}

export enum TicketUrgency {
    LOW = 'low',
    MEDIUM = 'medium',
    HIGH = 'high'
}

/**
 * Tier label enum for user subscription tiers
 */
export enum TierLabel {
    PREMIUM = 'premium',
    FREE = 'free'
}

/**
 * Response model for 401 Unauthorized errors
 */
export type UnauthorizedResponse = {
    success?: boolean;
    data?: null;
    message?: string;
    errors?: Array<FieldError> | null;
};

/**
 * Update document status request
 */
export type UpdateDocumentStatusRequest = {
    /**
     * Processing status
     */
    status: ProcessingStatus;
    /**
     * Document summary
     */
    ai_summary?: string | null;
};

/**
 * DTO for updating a pricing plan
 */
export type UpdatePlanDto = {
    /**
     * Plan name
     */
    name?: string | null;
    /**
     * Plan description
     */
    description?: string | null;
    /**
     * Plan price
     */
    price?: number | string | null;
    /**
     * Duration in days (null for unlimited)
     */
    duration_days?: number | null;
    /**
     * Storage limit in GB (null for unlimited)
     */
    storage_gb?: number | null;
    /**
     * Token count (null for unlimited)
     */
    token_count?: number | null;
    /**
     * Stripe price ID
     */
    stripe_price_id?: string | null;
};

/**
 * Update system admin settings request DTO
 */
export type UpdateSystemAdminSettingsDto = {
    /**
     * Whether free tier is active
     */
    is_free_active?: boolean | null;
    /**
     * Maximum free storage in GB
     */
    max_free_storage_gb?: number | null;
    /**
     * Maximum free token count
     */
    max_free_token_count?: number | null;
};

/**
 * Request DTO for admin to update user data
 */
export type UpdateUserRequest = {
    /**
     * Override plan ID for premium features
     */
    override_plan_id?: string | null;
};

/**
 * Upgrade preview response
 */
export type UpgradePreviewDao = {
    current_plan: UpgradePreviewPlanDao;
    new_plan: UpgradePreviewPlanDao;
    proration: UpgradePreviewProrationDao;
    line_items: Array<UpgradePreviewLineItemDao>;
};

/**
 * Line item for upgrade preview
 */
export type UpgradePreviewLineItemDao = {
    /**
     * Line item description
     */
    description: string;
    /**
     * Amount in dollars
     */
    amount: number;
    /**
     * Quantity
     */
    quantity: number;
};

/**
 * Plan info for preview
 */
export type UpgradePreviewPlanDao = {
    /**
     * Plan ID
     */
    id: string;
    /**
     * Plan price in dollars
     */
    price: number;
};

/**
 * Proration summary amounts
 */
export type UpgradePreviewProrationDao = {
    /**
     * Amount due in dollars
     */
    amount_due: number;
    /**
     * Amount paid in dollars
     */
    amount_paid: number;
    /**
     * Amount remaining in dollars
     */
    amount_remaining: number;
    /**
     * Total in dollars
     */
    total: number;
};

/**
 * DTO for upgrading a subscription
 */
export type UpgradeSubscriptionDto = {
    /**
     * New plan ID
     */
    new_plan_id: string;
};

/**
 * Per-file metadata mapping
 */
export type UploadDocumentMetadata = {
    /**
     * Target file name to apply this metadata (optional)
     */
    file_name?: string | null;
    /**
     * Additional metadata for this file
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * Multiple upload request wrapper
 */
export type UploadDocumentsRequest = {
    /**
     * List of per-file metadata entries
     */
    items?: Array<UploadDocumentMetadata> | null;
};

/**
 * User base data access object
 */
export type UserBaseDao = {
    /**
     * User unique identifier
     */
    id: string;
    /**
     * User email address
     */
    email: string;
    /**
     * User first name
     */
    first_name: string;
    /**
     * User last name
     */
    last_name: string;
    /**
     * Profile picture URL
     */
    profile_picture_url?: string | null;
    /**
     * User role
     */
    role?: UserRole;
    /**
     * Sign-in method used for authentication
     */
    sign_with?: SignInMethod | null;
};

/**
 * User client data access object
 */
export type UserClientDao = {
    /**
     * User unique identifier
     */
    id: string;
    /**
     * User email address
     */
    email: string;
    /**
     * User first name
     */
    first_name: string;
    /**
     * User last name
     */
    last_name: string;
    /**
     * Profile picture URL
     */
    profile_picture_url?: string | null;
    /**
     * User role
     */
    role?: UserRole;
    /**
     * Sign-in method used for authentication
     */
    sign_with?: SignInMethod | null;
    /**
     * State ID
     */
    state_id: number;
    /**
     * State name
     */
    state_name: string;
    /**
     * Date of birth
     */
    date_of_birth?: string | null;
    /**
     * Storage used
     */
    storage_used: number;
    /**
     * Plan ID
     */
    plan_id: string;
    /**
     * Plan name
     */
    plan_name: string;
    /**
     * Token used
     */
    token_used: number;
};

/**
 * User DAO
 */
export type UserDao = {
    /**
     * ID
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * First name
     */
    first_name: string;
    /**
     * Last name
     */
    last_name: string;
};

/**
 * User profile DAO
 */
export type UserProfileDao = {
    /**
     * ID
     */
    id: string;
    /**
     * Email
     */
    email: string;
    /**
     * First name
     */
    first_name: string;
    /**
     * Last name
     */
    last_name: string;
    /**
     * Profile picture URL
     */
    profile_picture_url?: string | null;
};

/**
 * User roles for system access control
 */
export enum UserRole {
    CLIENT = 'client',
    ADMIN = 'admin',
    LAWYER = 'lawyer'
}

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type RootGetError = RootGetErrors[keyof RootGetErrors];

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GoogleAuthUrlApiAuthGoogleUrlPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/google/url';
};

export type GoogleAuthUrlApiAuthGoogleUrlPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GoogleAuthUrlApiAuthGoogleUrlPostError = GoogleAuthUrlApiAuthGoogleUrlPostErrors[keyof GoogleAuthUrlApiAuthGoogleUrlPostErrors];

export type GoogleAuthUrlApiAuthGoogleUrlPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseAuthUrlDao;
};

export type GoogleAuthUrlApiAuthGoogleUrlPostResponse = GoogleAuthUrlApiAuthGoogleUrlPostResponses[keyof GoogleAuthUrlApiAuthGoogleUrlPostResponses];

export type GoogleCallbackApiAuthGoogleCallbackGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Authorization code from Google
         */
        code: string;
        /**
         * State parameter from Google
         */
        state?: string | null;
        /**
         * Error from Google OAuth
         */
        error?: string | null;
    };
    url: '/api/auth/google/callback';
};

export type GoogleCallbackApiAuthGoogleCallbackGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GoogleCallbackApiAuthGoogleCallbackGetError = GoogleCallbackApiAuthGoogleCallbackGetErrors[keyof GoogleCallbackApiAuthGoogleCallbackGetErrors];

export type GoogleCallbackApiAuthGoogleCallbackGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RefreshTokenApiAuthRefreshPostData = {
    body: RefreshTokenRequest;
    path?: never;
    query?: never;
    url: '/api/auth/refresh';
};

export type RefreshTokenApiAuthRefreshPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type RefreshTokenApiAuthRefreshPostError = RefreshTokenApiAuthRefreshPostErrors[keyof RefreshTokenApiAuthRefreshPostErrors];

export type RefreshTokenApiAuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseAuthTokenDao;
};

export type RefreshTokenApiAuthRefreshPostResponse = RefreshTokenApiAuthRefreshPostResponses[keyof RefreshTokenApiAuthRefreshPostResponses];

export type LogoutApiAuthLogoutPostData = {
    body: LogoutRequest;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutApiAuthLogoutPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type LogoutApiAuthLogoutPostError = LogoutApiAuthLogoutPostErrors[keyof LogoutApiAuthLogoutPostErrors];

export type LogoutApiAuthLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseBool;
};

export type LogoutApiAuthLogoutPostResponse = LogoutApiAuthLogoutPostResponses[keyof LogoutApiAuthLogoutPostResponses];

export type AdminLoginApiAuthAdminLoginPostData = {
    body: EmailPasswordLoginRequest;
    path?: never;
    query?: never;
    url: '/api/auth/admin/login';
};

export type AdminLoginApiAuthAdminLoginPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type AdminLoginApiAuthAdminLoginPostError = AdminLoginApiAuthAdminLoginPostErrors[keyof AdminLoginApiAuthAdminLoginPostErrors];

export type AdminLoginApiAuthAdminLoginPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseAuthTokenDao;
};

export type AdminLoginApiAuthAdminLoginPostResponse = AdminLoginApiAuthAdminLoginPostResponses[keyof AdminLoginApiAuthAdminLoginPostResponses];

export type HealthCheckApiHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/health/';
};

export type HealthCheckApiHealthGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type HealthCheckApiHealthGetError = HealthCheckApiHealthGetErrors[keyof HealthCheckApiHealthGetErrors];

export type HealthCheckApiHealthGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseHealthResponse;
};

export type HealthCheckApiHealthGetResponse = HealthCheckApiHealthGetResponses[keyof HealthCheckApiHealthGetResponses];

export type CeleryHealthCheckApiCeleryHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/celery/health';
};

export type CeleryHealthCheckApiCeleryHealthGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CeleryHealthCheckApiCeleryHealthGetError = CeleryHealthCheckApiCeleryHealthGetErrors[keyof CeleryHealthCheckApiCeleryHealthGetErrors];

export type CeleryHealthCheckApiCeleryHealthGetResponses = {
    /**
     * Successful Response
     */
    200: CeleryHealthResponse;
};

export type CeleryHealthCheckApiCeleryHealthGetResponse = CeleryHealthCheckApiCeleryHealthGetResponses[keyof CeleryHealthCheckApiCeleryHealthGetResponses];

export type CeleryStatsApiCeleryStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/celery/stats';
};

export type CeleryStatsApiCeleryStatsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CeleryStatsApiCeleryStatsGetError = CeleryStatsApiCeleryStatsGetErrors[keyof CeleryStatsApiCeleryStatsGetErrors];

export type CeleryStatsApiCeleryStatsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type PurgeCeleryQueuesApiCeleryPurgePostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/celery/purge';
};

export type PurgeCeleryQueuesApiCeleryPurgePostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PurgeCeleryQueuesApiCeleryPurgePostError = PurgeCeleryQueuesApiCeleryPurgePostErrors[keyof PurgeCeleryQueuesApiCeleryPurgePostErrors];

export type PurgeCeleryQueuesApiCeleryPurgePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/celery/tasks/enforce-subscription-lifecycle';
};

export type TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostError = TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostErrors[keyof TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostErrors];

export type TriggerSubscriptionLifecycleApiCeleryTasksEnforceSubscriptionLifecyclePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetLocationInfoApiLocationsInfoCityIdGetData = {
    body?: never;
    path: {
        city_id: number;
    };
    query?: never;
    url: '/api/locations/info/{city_id}';
};

export type GetLocationInfoApiLocationsInfoCityIdGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetLocationInfoApiLocationsInfoCityIdGetError = GetLocationInfoApiLocationsInfoCityIdGetErrors[keyof GetLocationInfoApiLocationsInfoCityIdGetErrors];

export type GetLocationInfoApiLocationsInfoCityIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseLocationDao;
};

export type GetLocationInfoApiLocationsInfoCityIdGetResponse = GetLocationInfoApiLocationsInfoCityIdGetResponses[keyof GetLocationInfoApiLocationsInfoCityIdGetResponses];

export type GetAllRegionsApiLocationsRegionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search term for region name
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/locations/regions';
};

export type GetAllRegionsApiLocationsRegionsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllRegionsApiLocationsRegionsGetError = GetAllRegionsApiLocationsRegionsGetErrors[keyof GetAllRegionsApiLocationsRegionsGetErrors];

export type GetAllRegionsApiLocationsRegionsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListRegionDao;
};

export type GetAllRegionsApiLocationsRegionsGetResponse = GetAllRegionsApiLocationsRegionsGetResponses[keyof GetAllRegionsApiLocationsRegionsGetResponses];

export type GetAllSubregionsApiLocationsSubregionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by region ID
         */
        region_id?: number | null;
        /**
         * Search term for subregion name
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/locations/subregions';
};

export type GetAllSubregionsApiLocationsSubregionsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllSubregionsApiLocationsSubregionsGetError = GetAllSubregionsApiLocationsSubregionsGetErrors[keyof GetAllSubregionsApiLocationsSubregionsGetErrors];

export type GetAllSubregionsApiLocationsSubregionsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListSubregionDao;
};

export type GetAllSubregionsApiLocationsSubregionsGetResponse = GetAllSubregionsApiLocationsSubregionsGetResponses[keyof GetAllSubregionsApiLocationsSubregionsGetResponses];

export type GetAllCountriesApiLocationsCountriesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by region ID
         */
        region_id?: number | null;
        /**
         * Filter by subregion ID
         */
        subregion_id?: number | null;
        /**
         * Search term for country name
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/locations/countries';
};

export type GetAllCountriesApiLocationsCountriesGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllCountriesApiLocationsCountriesGetError = GetAllCountriesApiLocationsCountriesGetErrors[keyof GetAllCountriesApiLocationsCountriesGetErrors];

export type GetAllCountriesApiLocationsCountriesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListCountryDao;
};

export type GetAllCountriesApiLocationsCountriesGetResponse = GetAllCountriesApiLocationsCountriesGetResponses[keyof GetAllCountriesApiLocationsCountriesGetResponses];

export type GetAllStatesApiLocationsStatesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by country ID
         */
        country_id?: number | null;
        /**
         * Search term for state name
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/locations/states';
};

export type GetAllStatesApiLocationsStatesGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllStatesApiLocationsStatesGetError = GetAllStatesApiLocationsStatesGetErrors[keyof GetAllStatesApiLocationsStatesGetErrors];

export type GetAllStatesApiLocationsStatesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListStateDao;
};

export type GetAllStatesApiLocationsStatesGetResponse = GetAllStatesApiLocationsStatesGetResponses[keyof GetAllStatesApiLocationsStatesGetResponses];

export type GetAllCitiesApiLocationsCitiesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by state ID
         */
        state_id?: number | null;
        /**
         * Filter by country ID
         */
        country_id?: number | null;
        /**
         * Search term for city name
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/locations/cities';
};

export type GetAllCitiesApiLocationsCitiesGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllCitiesApiLocationsCitiesGetError = GetAllCitiesApiLocationsCitiesGetErrors[keyof GetAllCitiesApiLocationsCitiesGetErrors];

export type GetAllCitiesApiLocationsCitiesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListCityDao;
};

export type GetAllCitiesApiLocationsCitiesGetResponse = GetAllCitiesApiLocationsCitiesGetResponses[keyof GetAllCitiesApiLocationsCitiesGetResponses];

export type StripeWebhookApiWebhooksStripePostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/webhooks/stripe';
};

export type StripeWebhookApiWebhooksStripePostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type StripeWebhookApiWebhooksStripePostError = StripeWebhookApiWebhooksStripePostErrors[keyof StripeWebhookApiWebhooksStripePostErrors];

export type StripeWebhookApiWebhooksStripePostResponses = {
    /**
     * Successful Response
     */
    200: StripeWebhookEventDao;
};

export type StripeWebhookApiWebhooksStripePostResponse = StripeWebhookApiWebhooksStripePostResponses[keyof StripeWebhookApiWebhooksStripePostResponses];

export type RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostData = {
    body?: never;
    path: {
        user_id: string;
        document_id: string;
    };
    query?: never;
    url: '/api/webhooks/rag-summary/{user_id}/{document_id}';
};

export type RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostError = RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostErrors[keyof RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostErrors];

export type RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseBool;
};

export type RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponse = RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponses[keyof RagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponses];

export type ProxyStorageFileApiStorageFilePathGetData = {
    body?: never;
    path: {
        file_path: string;
    };
    query?: never;
    url: '/api/storage/{file_path}';
};

export type ProxyStorageFileApiStorageFilePathGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ProxyStorageFileApiStorageFilePathGetError = ProxyStorageFileApiStorageFilePathGetErrors[keyof ProxyStorageFileApiStorageFilePathGetErrors];

export type ProxyStorageFileApiStorageFilePathGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetStoragePresignedUrlApiStorageUrlFilePathGetData = {
    body?: never;
    path: {
        file_path: string;
    };
    query?: never;
    url: '/api/storage/url/{file_path}';
};

export type GetStoragePresignedUrlApiStorageUrlFilePathGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetStoragePresignedUrlApiStorageUrlFilePathGetError = GetStoragePresignedUrlApiStorageUrlFilePathGetErrors[keyof GetStoragePresignedUrlApiStorageUrlFilePathGetErrors];

export type GetStoragePresignedUrlApiStorageUrlFilePathGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type GetStoragePresignedUrlApiStorageUrlFilePathGetResponse = GetStoragePresignedUrlApiStorageUrlFilePathGetResponses[keyof GetStoragePresignedUrlApiStorageUrlFilePathGetResponses];

export type GetAllPlansApiPricingPlansGetData = {
    body?: never;
    path?: never;
    query?: {
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/pricing/plans';
};

export type GetAllPlansApiPricingPlansGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllPlansApiPricingPlansGetError = GetAllPlansApiPricingPlansGetErrors[keyof GetAllPlansApiPricingPlansGetErrors];

export type GetAllPlansApiPricingPlansGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListPricingUserPlanDao;
};

export type GetAllPlansApiPricingPlansGetResponse = GetAllPlansApiPricingPlansGetResponses[keyof GetAllPlansApiPricingPlansGetResponses];

export type GetProfileApiUserProfileGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/profile';
};

export type GetProfileApiUserProfileGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetProfileApiUserProfileGetError = GetProfileApiUserProfileGetErrors[keyof GetProfileApiUserProfileGetErrors];

export type GetProfileApiUserProfileGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUserBaseDao;
};

export type GetProfileApiUserProfileGetResponse = GetProfileApiUserProfileGetResponses[keyof GetProfileApiUserProfileGetResponses];

export type UpdateProfileApiUserProfilePutData = {
    body?: BodyUpdateProfileApiUserProfilePut;
    path?: never;
    query?: never;
    url: '/api/user/profile';
};

export type UpdateProfileApiUserProfilePutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateProfileApiUserProfilePutError = UpdateProfileApiUserProfilePutErrors[keyof UpdateProfileApiUserProfilePutErrors];

export type UpdateProfileApiUserProfilePutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUserBaseDao;
};

export type UpdateProfileApiUserProfilePutResponse = UpdateProfileApiUserProfilePutResponses[keyof UpdateProfileApiUserProfilePutResponses];

export type GetClientProfileApiUserProfileClientGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/profile/client';
};

export type GetClientProfileApiUserProfileClientGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetClientProfileApiUserProfileClientGetError = GetClientProfileApiUserProfileClientGetErrors[keyof GetClientProfileApiUserProfileClientGetErrors];

export type GetClientProfileApiUserProfileClientGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUserClientDao;
};

export type GetClientProfileApiUserProfileClientGetResponse = GetClientProfileApiUserProfileClientGetResponses[keyof GetClientProfileApiUserProfileClientGetResponses];

export type ListIssuesApiUserForumIssuesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by title or description
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/user/forum/issues';
};

export type ListIssuesApiUserForumIssuesGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ListIssuesApiUserForumIssuesGetError = ListIssuesApiUserForumIssuesGetErrors[keyof ListIssuesApiUserForumIssuesGetErrors];

export type ListIssuesApiUserForumIssuesGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListForumIssueDao;
};

export type ListIssuesApiUserForumIssuesGetResponse = ListIssuesApiUserForumIssuesGetResponses[keyof ListIssuesApiUserForumIssuesGetResponses];

export type CreateIssueApiUserForumIssuesPostData = {
    body: BodyCreateIssueApiUserForumIssuesPost;
    path?: never;
    query?: never;
    url: '/api/user/forum/issues';
};

export type CreateIssueApiUserForumIssuesPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateIssueApiUserForumIssuesPostError = CreateIssueApiUserForumIssuesPostErrors[keyof CreateIssueApiUserForumIssuesPostErrors];

export type CreateIssueApiUserForumIssuesPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseForumIssueDao;
};

export type CreateIssueApiUserForumIssuesPostResponse = CreateIssueApiUserForumIssuesPostResponses[keyof CreateIssueApiUserForumIssuesPostResponses];

export type ListMyIssuesApiUserForumIssuesMyGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by title or description
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/user/forum/issues/my';
};

export type ListMyIssuesApiUserForumIssuesMyGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ListMyIssuesApiUserForumIssuesMyGetError = ListMyIssuesApiUserForumIssuesMyGetErrors[keyof ListMyIssuesApiUserForumIssuesMyGetErrors];

export type ListMyIssuesApiUserForumIssuesMyGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListForumIssueDao;
};

export type ListMyIssuesApiUserForumIssuesMyGetResponse = ListMyIssuesApiUserForumIssuesMyGetResponses[keyof ListMyIssuesApiUserForumIssuesMyGetResponses];

export type DeleteIssueApiUserForumIssuesIssueIdDeleteData = {
    body?: never;
    path: {
        issue_id: string;
    };
    query?: never;
    url: '/api/user/forum/issues/{issue_id}';
};

export type DeleteIssueApiUserForumIssuesIssueIdDeleteErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteIssueApiUserForumIssuesIssueIdDeleteError = DeleteIssueApiUserForumIssuesIssueIdDeleteErrors[keyof DeleteIssueApiUserForumIssuesIssueIdDeleteErrors];

export type DeleteIssueApiUserForumIssuesIssueIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseBool;
};

export type DeleteIssueApiUserForumIssuesIssueIdDeleteResponse = DeleteIssueApiUserForumIssuesIssueIdDeleteResponses[keyof DeleteIssueApiUserForumIssuesIssueIdDeleteResponses];

export type UpdateIssueApiUserForumIssuesIssueIdPutData = {
    body?: BodyUpdateIssueApiUserForumIssuesIssueIdPut;
    path: {
        issue_id: string;
    };
    query?: {
        /**
         * Handle type: patch for replace, put for add
         */
        handle_type?: string | null;
    };
    url: '/api/user/forum/issues/{issue_id}';
};

export type UpdateIssueApiUserForumIssuesIssueIdPutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateIssueApiUserForumIssuesIssueIdPutError = UpdateIssueApiUserForumIssuesIssueIdPutErrors[keyof UpdateIssueApiUserForumIssuesIssueIdPutErrors];

export type UpdateIssueApiUserForumIssuesIssueIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseForumIssueDao;
};

export type UpdateIssueApiUserForumIssuesIssueIdPutResponse = UpdateIssueApiUserForumIssuesIssueIdPutResponses[keyof UpdateIssueApiUserForumIssuesIssueIdPutResponses];

export type ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetData = {
    body?: never;
    path: {
        issue_id: string;
    };
    query?: {
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/user/forum/issues/{issue_id}/comments';
};

export type ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetError = ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetErrors[keyof ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetErrors];

export type ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListForumCommentDao;
};

export type ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponse = ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponses[keyof ListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponses];

export type CreateCommentApiUserForumIssuesIssueIdCommentsPostData = {
    body: BodyCreateCommentApiUserForumIssuesIssueIdCommentsPost;
    path: {
        issue_id: string;
    };
    query?: never;
    url: '/api/user/forum/issues/{issue_id}/comments';
};

export type CreateCommentApiUserForumIssuesIssueIdCommentsPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateCommentApiUserForumIssuesIssueIdCommentsPostError = CreateCommentApiUserForumIssuesIssueIdCommentsPostErrors[keyof CreateCommentApiUserForumIssuesIssueIdCommentsPostErrors];

export type CreateCommentApiUserForumIssuesIssueIdCommentsPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseForumCommentDao;
};

export type CreateCommentApiUserForumIssuesIssueIdCommentsPostResponse = CreateCommentApiUserForumIssuesIssueIdCommentsPostResponses[keyof CreateCommentApiUserForumIssuesIssueIdCommentsPostResponses];

export type DeleteCommentApiUserForumCommentsCommentIdDeleteData = {
    body?: never;
    path: {
        comment_id: string;
    };
    query?: never;
    url: '/api/user/forum/comments/{comment_id}';
};

export type DeleteCommentApiUserForumCommentsCommentIdDeleteErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteCommentApiUserForumCommentsCommentIdDeleteError = DeleteCommentApiUserForumCommentsCommentIdDeleteErrors[keyof DeleteCommentApiUserForumCommentsCommentIdDeleteErrors];

export type DeleteCommentApiUserForumCommentsCommentIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseBool;
};

export type DeleteCommentApiUserForumCommentsCommentIdDeleteResponse = DeleteCommentApiUserForumCommentsCommentIdDeleteResponses[keyof DeleteCommentApiUserForumCommentsCommentIdDeleteResponses];

export type UpdateCommentApiUserForumCommentsCommentIdPutData = {
    body?: BodyUpdateCommentApiUserForumCommentsCommentIdPut;
    path: {
        comment_id: string;
    };
    query?: {
        /**
         * Handle type: patch for replace, put for add
         */
        handle_type?: string | null;
    };
    url: '/api/user/forum/comments/{comment_id}';
};

export type UpdateCommentApiUserForumCommentsCommentIdPutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateCommentApiUserForumCommentsCommentIdPutError = UpdateCommentApiUserForumCommentsCommentIdPutErrors[keyof UpdateCommentApiUserForumCommentsCommentIdPutErrors];

export type UpdateCommentApiUserForumCommentsCommentIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseForumCommentDao;
};

export type UpdateCommentApiUserForumCommentsCommentIdPutResponse = UpdateCommentApiUserForumCommentsCommentIdPutResponses[keyof UpdateCommentApiUserForumCommentsCommentIdPutResponses];

export type UploadDocumentApiUserDocumentsUploadPostData = {
    body: BodyUploadDocumentApiUserDocumentsUploadPost;
    path?: never;
    query?: never;
    url: '/api/user/documents/upload';
};

export type UploadDocumentApiUserDocumentsUploadPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UploadDocumentApiUserDocumentsUploadPostError = UploadDocumentApiUserDocumentsUploadPostErrors[keyof UploadDocumentApiUserDocumentsUploadPostErrors];

export type UploadDocumentApiUserDocumentsUploadPostResponses = {
    /**
     * Successful Response
     */
    201: ApiResponseDocumentDao;
};

export type UploadDocumentApiUserDocumentsUploadPostResponse = UploadDocumentApiUserDocumentsUploadPostResponses[keyof UploadDocumentApiUserDocumentsUploadPostResponses];

export type UploadDocumentsApiUserDocumentsUploadsPostData = {
    body: BodyUploadDocumentsApiUserDocumentsUploadsPost;
    path?: never;
    query?: never;
    url: '/api/user/documents/uploads';
};

export type UploadDocumentsApiUserDocumentsUploadsPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UploadDocumentsApiUserDocumentsUploadsPostError = UploadDocumentsApiUserDocumentsUploadsPostErrors[keyof UploadDocumentsApiUserDocumentsUploadsPostErrors];

export type UploadDocumentsApiUserDocumentsUploadsPostResponses = {
    /**
     * Successful Response
     */
    201: ApiResponseListDocumentDao;
};

export type UploadDocumentsApiUserDocumentsUploadsPostResponse = UploadDocumentsApiUserDocumentsUploadsPostResponses[keyof UploadDocumentsApiUserDocumentsUploadsPostResponses];

export type ListDocumentsApiUserDocumentsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search term for file name or summary
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/user/documents/';
};

export type ListDocumentsApiUserDocumentsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ListDocumentsApiUserDocumentsGetError = ListDocumentsApiUserDocumentsGetErrors[keyof ListDocumentsApiUserDocumentsGetErrors];

export type ListDocumentsApiUserDocumentsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListDocumentDao;
};

export type ListDocumentsApiUserDocumentsGetResponse = ListDocumentsApiUserDocumentsGetResponses[keyof ListDocumentsApiUserDocumentsGetResponses];

export type DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetData = {
    body?: never;
    path: {
        document_id: string;
    };
    query?: never;
    url: '/api/user/documents/{document_id}/download';
};

export type DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetError = DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetErrors[keyof DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetErrors];

export type DownloadDocumentSecureApiUserDocumentsDocumentIdDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteDocumentApiUserDocumentsDocumentIdDeleteData = {
    body?: never;
    path: {
        document_id: string;
    };
    query?: never;
    url: '/api/user/documents/{document_id}';
};

export type DeleteDocumentApiUserDocumentsDocumentIdDeleteErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteDocumentApiUserDocumentsDocumentIdDeleteError = DeleteDocumentApiUserDocumentsDocumentIdDeleteErrors[keyof DeleteDocumentApiUserDocumentsDocumentIdDeleteErrors];

export type DeleteDocumentApiUserDocumentsDocumentIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseBool;
};

export type DeleteDocumentApiUserDocumentsDocumentIdDeleteResponse = DeleteDocumentApiUserDocumentsDocumentIdDeleteResponses[keyof DeleteDocumentApiUserDocumentsDocumentIdDeleteResponses];

export type UpdateDocumentApiUserDocumentsDocumentIdPutData = {
    body: UpdateDocumentStatusRequest;
    path: {
        document_id: string;
    };
    query?: never;
    url: '/api/user/documents/{document_id}';
};

export type UpdateDocumentApiUserDocumentsDocumentIdPutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateDocumentApiUserDocumentsDocumentIdPutError = UpdateDocumentApiUserDocumentsDocumentIdPutErrors[keyof UpdateDocumentApiUserDocumentsDocumentIdPutErrors];

export type UpdateDocumentApiUserDocumentsDocumentIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseDocumentDao;
};

export type UpdateDocumentApiUserDocumentsDocumentIdPutResponse = UpdateDocumentApiUserDocumentsDocumentIdPutResponses[keyof UpdateDocumentApiUserDocumentsDocumentIdPutResponses];

export type GetStorageInfoApiUserDocumentsStorageInfoGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/documents/storage/info';
};

export type GetStorageInfoApiUserDocumentsStorageInfoGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetStorageInfoApiUserDocumentsStorageInfoGetError = GetStorageInfoApiUserDocumentsStorageInfoGetErrors[keyof GetStorageInfoApiUserDocumentsStorageInfoGetErrors];

export type GetStorageInfoApiUserDocumentsStorageInfoGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseStorageInfoDao;
};

export type GetStorageInfoApiUserDocumentsStorageInfoGetResponse = GetStorageInfoApiUserDocumentsStorageInfoGetResponses[keyof GetStorageInfoApiUserDocumentsStorageInfoGetResponses];

export type GetUserSubscriptionApiUserSubscriptionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/user/subscriptions';
};

export type GetUserSubscriptionApiUserSubscriptionsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUserSubscriptionApiUserSubscriptionsGetError = GetUserSubscriptionApiUserSubscriptionsGetErrors[keyof GetUserSubscriptionApiUserSubscriptionsGetErrors];

export type GetUserSubscriptionApiUserSubscriptionsGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUnionSubscriptionWithPlanDaoNoneType;
};

export type GetUserSubscriptionApiUserSubscriptionsGetResponse = GetUserSubscriptionApiUserSubscriptionsGetResponses[keyof GetUserSubscriptionApiUserSubscriptionsGetResponses];

export type CreateSubscriptionApiUserSubscriptionsPostData = {
    body: CreateSubscriptionDto;
    path?: never;
    query?: never;
    url: '/api/user/subscriptions';
};

export type CreateSubscriptionApiUserSubscriptionsPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateSubscriptionApiUserSubscriptionsPostError = CreateSubscriptionApiUserSubscriptionsPostErrors[keyof CreateSubscriptionApiUserSubscriptionsPostErrors];

export type CreateSubscriptionApiUserSubscriptionsPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUnionSubscriptionWithPlanDaoCheckoutSessionDao;
};

export type CreateSubscriptionApiUserSubscriptionsPostResponse = CreateSubscriptionApiUserSubscriptionsPostResponses[keyof CreateSubscriptionApiUserSubscriptionsPostResponses];

export type GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetData = {
    body: SubscriptionHistoryFilterDto;
    path?: never;
    query?: never;
    url: '/api/user/subscriptions/history';
};

export type GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetError = GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetErrors[keyof GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetErrors];

export type GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListSubscriptionWithPlanDao;
};

export type GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponse = GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponses[keyof GetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponses];

export type UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutData = {
    body: UpgradeSubscriptionDto;
    path: {
        subscription_id: string;
    };
    query?: never;
    url: '/api/user/subscriptions/{subscription_id}/upgrade';
};

export type UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutError = UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutErrors[keyof UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutErrors];

export type UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseSubscriptionWithPlanDao;
};

export type UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponse = UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponses[keyof UpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponses];

export type PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetData = {
    body?: never;
    path: {
        subscription_id: string;
        new_plan_id: string;
    };
    query?: never;
    url: '/api/user/subscriptions/{subscription_id}/upgrade/preview/{new_plan_id}';
};

export type PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetError = PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetErrors[keyof PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetErrors];

export type PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseUpgradePreviewDao;
};

export type PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponse = PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponses[keyof PreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponses];

export type ListMyTicketsApiUserSupportTicketsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by title or description
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/user/support/tickets';
};

export type ListMyTicketsApiUserSupportTicketsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ListMyTicketsApiUserSupportTicketsGetError = ListMyTicketsApiUserSupportTicketsGetErrors[keyof ListMyTicketsApiUserSupportTicketsGetErrors];

export type ListMyTicketsApiUserSupportTicketsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListSupportTicketDao;
};

export type ListMyTicketsApiUserSupportTicketsGetResponse = ListMyTicketsApiUserSupportTicketsGetResponses[keyof ListMyTicketsApiUserSupportTicketsGetResponses];

export type CreateTicketApiUserSupportTicketsPostData = {
    body: BodyCreateTicketApiUserSupportTicketsPost;
    path?: never;
    query?: never;
    url: '/api/user/support/tickets';
};

export type CreateTicketApiUserSupportTicketsPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreateTicketApiUserSupportTicketsPostError = CreateTicketApiUserSupportTicketsPostErrors[keyof CreateTicketApiUserSupportTicketsPostErrors];

export type CreateTicketApiUserSupportTicketsPostResponses = {
    /**
     * Successful Response
     */
    201: ApiResponseSupportTicketDetailDao;
};

export type CreateTicketApiUserSupportTicketsPostResponse = CreateTicketApiUserSupportTicketsPostResponses[keyof CreateTicketApiUserSupportTicketsPostResponses];

export type DeleteTicketApiUserSupportTicketsTicketIdDeleteData = {
    body?: never;
    path: {
        ticket_id: string;
    };
    query?: never;
    url: '/api/user/support/tickets/{ticket_id}';
};

export type DeleteTicketApiUserSupportTicketsTicketIdDeleteErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeleteTicketApiUserSupportTicketsTicketIdDeleteError = DeleteTicketApiUserSupportTicketsTicketIdDeleteErrors[keyof DeleteTicketApiUserSupportTicketsTicketIdDeleteErrors];

export type DeleteTicketApiUserSupportTicketsTicketIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseBool;
};

export type DeleteTicketApiUserSupportTicketsTicketIdDeleteResponse = DeleteTicketApiUserSupportTicketsTicketIdDeleteResponses[keyof DeleteTicketApiUserSupportTicketsTicketIdDeleteResponses];

export type GetTicketApiUserSupportTicketsTicketIdGetData = {
    body?: never;
    path: {
        ticket_id: string;
    };
    query?: never;
    url: '/api/user/support/tickets/{ticket_id}';
};

export type GetTicketApiUserSupportTicketsTicketIdGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetTicketApiUserSupportTicketsTicketIdGetError = GetTicketApiUserSupportTicketsTicketIdGetErrors[keyof GetTicketApiUserSupportTicketsTicketIdGetErrors];

export type GetTicketApiUserSupportTicketsTicketIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseSupportTicketDetailDao;
};

export type GetTicketApiUserSupportTicketsTicketIdGetResponse = GetTicketApiUserSupportTicketsTicketIdGetResponses[keyof GetTicketApiUserSupportTicketsTicketIdGetResponses];

export type UpdateTicketApiUserSupportTicketsTicketIdPutData = {
    body?: BodyUpdateTicketApiUserSupportTicketsTicketIdPut;
    path: {
        ticket_id: string;
    };
    query?: {
        /**
         * Handle type: patch for replace, put for add
         */
        handle_type?: string | null;
    };
    url: '/api/user/support/tickets/{ticket_id}';
};

export type UpdateTicketApiUserSupportTicketsTicketIdPutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateTicketApiUserSupportTicketsTicketIdPutError = UpdateTicketApiUserSupportTicketsTicketIdPutErrors[keyof UpdateTicketApiUserSupportTicketsTicketIdPutErrors];

export type UpdateTicketApiUserSupportTicketsTicketIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseSupportTicketDetailDao;
};

export type UpdateTicketApiUserSupportTicketsTicketIdPutResponse = UpdateTicketApiUserSupportTicketsTicketIdPutResponses[keyof UpdateTicketApiUserSupportTicketsTicketIdPutResponses];

export type GetUsersApiAdminUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/admin/users/';
};

export type GetUsersApiAdminUsersGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUsersApiAdminUsersGetError = GetUsersApiAdminUsersGetErrors[keyof GetUsersApiAdminUsersGetErrors];

export type GetUsersApiAdminUsersGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponse;
};

export type GetUsersApiAdminUsersGetResponse = GetUsersApiAdminUsersGetResponses[keyof GetUsersApiAdminUsersGetResponses];

export type GetUserDetailsApiAdminUsersUserIdGetData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/admin/users/{user_id}';
};

export type GetUserDetailsApiAdminUsersUserIdGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUserDetailsApiAdminUsersUserIdGetError = GetUserDetailsApiAdminUsersUserIdGetErrors[keyof GetUserDetailsApiAdminUsersUserIdGetErrors];

export type GetUserDetailsApiAdminUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponse;
};

export type GetUserDetailsApiAdminUsersUserIdGetResponse = GetUserDetailsApiAdminUsersUserIdGetResponses[keyof GetUserDetailsApiAdminUsersUserIdGetResponses];

export type UpdateUserApiAdminUsersUserIdPutData = {
    body: UpdateUserRequest;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/admin/users/{user_id}';
};

export type UpdateUserApiAdminUsersUserIdPutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateUserApiAdminUsersUserIdPutError = UpdateUserApiAdminUsersUserIdPutErrors[keyof UpdateUserApiAdminUsersUserIdPutErrors];

export type UpdateUserApiAdminUsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponse;
};

export type UpdateUserApiAdminUsersUserIdPutResponse = UpdateUserApiAdminUsersUserIdPutResponses[keyof UpdateUserApiAdminUsersUserIdPutResponses];

export type GetStorageSummaryApiAdminUsersStorageSummaryGetData = {
    body?: never;
    path?: never;
    query?: {
        month?: number | null;
        year?: number | null;
    };
    url: '/api/admin/users/storage/summary';
};

export type GetStorageSummaryApiAdminUsersStorageSummaryGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetStorageSummaryApiAdminUsersStorageSummaryGetError = GetStorageSummaryApiAdminUsersStorageSummaryGetErrors[keyof GetStorageSummaryApiAdminUsersStorageSummaryGetErrors];

export type GetStorageSummaryApiAdminUsersStorageSummaryGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponse;
};

export type GetStorageSummaryApiAdminUsersStorageSummaryGetResponse = GetStorageSummaryApiAdminUsersStorageSummaryGetResponses[keyof GetStorageSummaryApiAdminUsersStorageSummaryGetResponses];

export type GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: {
        status?: SubscriptionStatus | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/admin/users/{user_id}/subscriptions';
};

export type GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetError = GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetErrors[keyof GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetErrors];

export type GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponse;
};

export type GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponse = GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponses[keyof GetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponses];

export type ListTicketsAdminApiAdminSupportTicketsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by ticket status
         */
        status?: TicketStatus | null;
        /**
         * Sort order: asc or desc
         */
        sort_order?: SortOrder | null;
        /**
         * Sort by field
         */
        sort_by?: AdminSupportTicketSortBy | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/admin/support/tickets';
};

export type ListTicketsAdminApiAdminSupportTicketsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ListTicketsAdminApiAdminSupportTicketsGetError = ListTicketsAdminApiAdminSupportTicketsGetErrors[keyof ListTicketsAdminApiAdminSupportTicketsGetErrors];

export type ListTicketsAdminApiAdminSupportTicketsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListAdminTicketDao;
};

export type ListTicketsAdminApiAdminSupportTicketsGetResponse = ListTicketsAdminApiAdminSupportTicketsGetResponses[keyof ListTicketsAdminApiAdminSupportTicketsGetResponses];

export type RespondTicketApiAdminSupportTicketsTicketIdResponsesPostData = {
    body: RespondTicketDto;
    path: {
        ticket_id: string;
    };
    query?: never;
    url: '/api/admin/support/tickets/{ticket_id}/responses';
};

export type RespondTicketApiAdminSupportTicketsTicketIdResponsesPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type RespondTicketApiAdminSupportTicketsTicketIdResponsesPostError = RespondTicketApiAdminSupportTicketsTicketIdResponsesPostErrors[keyof RespondTicketApiAdminSupportTicketsTicketIdResponsesPostErrors];

export type RespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseAdminSupportResponseDao;
};

export type RespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponse = RespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponses[keyof RespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponses];

export type GetTicketAdminApiAdminSupportTicketsTicketIdGetData = {
    body?: never;
    path: {
        ticket_id: string;
    };
    query?: never;
    url: '/api/admin/support/tickets/{ticket_id}';
};

export type GetTicketAdminApiAdminSupportTicketsTicketIdGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetTicketAdminApiAdminSupportTicketsTicketIdGetError = GetTicketAdminApiAdminSupportTicketsTicketIdGetErrors[keyof GetTicketAdminApiAdminSupportTicketsTicketIdGetErrors];

export type GetTicketAdminApiAdminSupportTicketsTicketIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseAdminTicketDetailDao;
};

export type GetTicketAdminApiAdminSupportTicketsTicketIdGetResponse = GetTicketAdminApiAdminSupportTicketsTicketIdGetResponses[keyof GetTicketAdminApiAdminSupportTicketsTicketIdGetResponses];

export type GetAllPlansApiAdminPricingPlansGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search by name
         */
        search?: string | null;
        limit?: number | null;
        current_page?: number | null;
    };
    url: '/api/admin/pricing/plans';
};

export type GetAllPlansApiAdminPricingPlansGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetAllPlansApiAdminPricingPlansGetError = GetAllPlansApiAdminPricingPlansGetErrors[keyof GetAllPlansApiAdminPricingPlansGetErrors];

export type GetAllPlansApiAdminPricingPlansGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedApiResponseListPricingAdminPlanDao;
};

export type GetAllPlansApiAdminPricingPlansGetResponse = GetAllPlansApiAdminPricingPlansGetResponses[keyof GetAllPlansApiAdminPricingPlansGetResponses];

export type CreatePlanApiAdminPricingPlansPostData = {
    body: CreatePlanDto;
    path?: never;
    query?: never;
    url: '/api/admin/pricing/plans';
};

export type CreatePlanApiAdminPricingPlansPostErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type CreatePlanApiAdminPricingPlansPostError = CreatePlanApiAdminPricingPlansPostErrors[keyof CreatePlanApiAdminPricingPlansPostErrors];

export type CreatePlanApiAdminPricingPlansPostResponses = {
    /**
     * Successful Response
     */
    201: ApiResponsePricingAdminPlanDao;
};

export type CreatePlanApiAdminPricingPlansPostResponse = CreatePlanApiAdminPricingPlansPostResponses[keyof CreatePlanApiAdminPricingPlansPostResponses];

export type DeletePlanApiAdminPricingPlansPlanIdDeleteData = {
    body?: never;
    path: {
        plan_id: string;
    };
    query?: never;
    url: '/api/admin/pricing/plans/{plan_id}';
};

export type DeletePlanApiAdminPricingPlansPlanIdDeleteErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type DeletePlanApiAdminPricingPlansPlanIdDeleteError = DeletePlanApiAdminPricingPlansPlanIdDeleteErrors[keyof DeletePlanApiAdminPricingPlansPlanIdDeleteErrors];

export type DeletePlanApiAdminPricingPlansPlanIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ApiResponseBool;
};

export type DeletePlanApiAdminPricingPlansPlanIdDeleteResponse = DeletePlanApiAdminPricingPlansPlanIdDeleteResponses[keyof DeletePlanApiAdminPricingPlansPlanIdDeleteResponses];

export type UpdatePlanApiAdminPricingPlansPlanIdPutData = {
    body: UpdatePlanDto;
    path: {
        plan_id: string;
    };
    query?: never;
    url: '/api/admin/pricing/plans/{plan_id}';
};

export type UpdatePlanApiAdminPricingPlansPlanIdPutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdatePlanApiAdminPricingPlansPlanIdPutError = UpdatePlanApiAdminPricingPlansPlanIdPutErrors[keyof UpdatePlanApiAdminPricingPlansPlanIdPutErrors];

export type UpdatePlanApiAdminPricingPlansPlanIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiResponsePricingAdminPlanDao;
};

export type UpdatePlanApiAdminPricingPlansPlanIdPutResponse = UpdatePlanApiAdminPricingPlansPlanIdPutResponses[keyof UpdatePlanApiAdminPricingPlansPlanIdPutResponses];

export type GetSystemSettingsApiAdminSystemSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/admin/system/settings';
};

export type GetSystemSettingsApiAdminSystemSettingsGetErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetSystemSettingsApiAdminSystemSettingsGetError = GetSystemSettingsApiAdminSystemSettingsGetErrors[keyof GetSystemSettingsApiAdminSystemSettingsGetErrors];

export type GetSystemSettingsApiAdminSystemSettingsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateSystemSettingsApiAdminSystemSettingsPutData = {
    body: UpdateSystemAdminSettingsDto;
    path?: never;
    query?: never;
    url: '/api/admin/system/settings';
};

export type UpdateSystemSettingsApiAdminSystemSettingsPutErrors = {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type UpdateSystemSettingsApiAdminSystemSettingsPutError = UpdateSystemSettingsApiAdminSystemSettingsPutErrors[keyof UpdateSystemSettingsApiAdminSystemSettingsPutErrors];

export type UpdateSystemSettingsApiAdminSystemSettingsPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};