// This file is auto-generated by @hey-api/openapi-ts

export const AdminSupportResponseDAOSchema = {
    properties: {
        ticket_id: {
            type: 'string',
            format: 'uuid',
            title: 'Ticket Id'
        },
        response_text: {
            type: 'string',
            title: 'Response Text'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['ticket_id', 'response_text', 'created_at', 'updated_at'],
    title: 'AdminSupportResponseDAO',
    description: 'Defined entity each response for admin usecase'
} as const;

export const AdminSupportTicketSortBySchema = {
    type: 'string',
    enum: ['updated_at', 'urgency', 'tier_label', 'sender_name'],
    title: 'AdminSupportTicketSortBy',
    description: 'Enum for sorting by'
} as const;

export const AdminTicketDAOSchema = {
    properties: {
        ticket_id: {
            type: 'string',
            format: 'uuid',
            title: 'Ticket Id'
        },
        issue_title: {
            type: 'string',
            title: 'Issue Title'
        },
        status: {
            '$ref': '#/components/schemas/TicketStatus'
        },
        urgency: {
            '$ref': '#/components/schemas/TicketUrgency'
        },
        tier_label: {
            '$ref': '#/components/schemas/TierLabel'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        user: {
            '$ref': '#/components/schemas/UserDAO'
        }
    },
    type: 'object',
    required: ['ticket_id', 'issue_title', 'status', 'urgency', 'tier_label', 'created_at', 'updated_at', 'user'],
    title: 'AdminTicketDAO',
    description: 'Defined entity each ticket for admin usecase for list tickets'
} as const;

export const AdminTicketDetailDAOSchema = {
    properties: {
        ticket_id: {
            type: 'string',
            format: 'uuid',
            title: 'Ticket Id'
        },
        issue_title: {
            type: 'string',
            title: 'Issue Title'
        },
        status: {
            '$ref': '#/components/schemas/TicketStatus'
        },
        urgency: {
            '$ref': '#/components/schemas/TicketUrgency'
        },
        tier_label: {
            '$ref': '#/components/schemas/TierLabel'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        user: {
            '$ref': '#/components/schemas/UserDAO'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        response: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AdminSupportResponseDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        attachments: {
            items: {
                '$ref': '#/components/schemas/SupportAttachmentDAO'
            },
            type: 'array',
            title: 'Attachments'
        }
    },
    type: 'object',
    required: ['ticket_id', 'issue_title', 'status', 'urgency', 'tier_label', 'created_at', 'updated_at', 'user'],
    title: 'AdminTicketDetailDAO',
    description: 'Defined entity each ticket for admin usecase for read detail tickets'
} as const;

export const ApiResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse'
} as const;

export const ApiResponse_AdminSupportResponseDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AdminSupportResponseDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[AdminSupportResponseDAO]'
} as const;

export const ApiResponse_AdminTicketDetailDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AdminTicketDetailDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[AdminTicketDetailDAO]'
} as const;

export const ApiResponse_AuthTokenDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AuthTokenDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[AuthTokenDAO]'
} as const;

export const ApiResponse_AuthUrlDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AuthUrlDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[AuthUrlDAO]'
} as const;

export const ApiResponse_CheckoutSessionDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CheckoutSessionDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[CheckoutSessionDAO]'
} as const;

export const ApiResponse_CheckoutSessionStatusDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CheckoutSessionStatusDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[CheckoutSessionStatusDAO]'
} as const;

export const ApiResponse_DocumentDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/DocumentDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[DocumentDAO]'
} as const;

export const ApiResponse_ForumCommentDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ForumCommentDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[ForumCommentDAO]'
} as const;

export const ApiResponse_ForumIssueDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ForumIssueDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[ForumIssueDAO]'
} as const;

export const ApiResponse_HealthResponse_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/HealthResponse'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[HealthResponse]'
} as const;

export const ApiResponse_LocationDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/LocationDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[LocationDAO]'
} as const;

export const ApiResponse_PricingAdminPlanDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PricingAdminPlanDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[PricingAdminPlanDAO]'
} as const;

export const ApiResponse_StorageInfoDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StorageInfoDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[StorageInfoDAO]'
} as const;

export const ApiResponse_SubscriptionWithPlanDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubscriptionWithPlanDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[SubscriptionWithPlanDAO]'
} as const;

export const ApiResponse_SupportTicketDetailDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SupportTicketDetailDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[SupportTicketDetailDAO]'
} as const;

export const ApiResponse_Union_SubscriptionWithPlanDAO__NoneType__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubscriptionWithPlanDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[Union[SubscriptionWithPlanDAO, NoneType]]'
} as const;

export const ApiResponse_UpgradePreviewDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UpgradePreviewDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[UpgradePreviewDAO]'
} as const;

export const ApiResponse_UserBaseDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UserBaseDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[UserBaseDAO]'
} as const;

export const ApiResponse_UserClientDAO_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UserClientDAO'
                },
                {
                    type: 'null'
                }
            ]
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[UserClientDAO]'
} as const;

export const ApiResponse_bool_Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[bool]'
} as const;

export const ApiResponse_list_DocumentDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/DocumentDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ApiResponse[list[DocumentDAO]]'
} as const;

export const AuthTokenDAOSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token',
            description: 'JWT access token'
        },
        refresh_token: {
            type: 'string',
            title: 'Refresh Token',
            description: 'JWT refresh token'
        },
        expires_in: {
            type: 'integer',
            title: 'Expires In',
            description: 'Token expiration time in seconds'
        },
        is_new: {
            type: 'boolean',
            title: 'Is New',
            description: 'Whether the user was newly registered during this auth flow',
            default: false
        },
        user: {
            '$ref': '#/components/schemas/UserBaseDAO',
            description: 'User information'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['access_token', 'refresh_token', 'expires_in', 'user'],
    title: 'AuthTokenDAO',
    description: 'Authentication token data access object'
} as const;

export const AuthUrlDAOSchema = {
    properties: {
        url: {
            type: 'string',
            title: 'Url',
            description: 'Authorization URL'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['url'],
    title: 'AuthUrlDAO',
    description: 'DAO for representing an authentication URL payload'
} as const;

export const BadRequestResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            default: false
        },
        data: {
            type: 'null',
            title: 'Data'
        },
        message: {
            type: 'string',
            title: 'Message',
            default: 'Bad Request'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FieldError'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        }
    },
    type: 'object',
    title: 'BadRequestResponse',
    description: 'Response model for 400 Bad Request errors'
} as const;

export const Body_create_comment_api_user_forum_issues__issue_id__comments_postSchema = {
    properties: {
        content: {
            type: 'string',
            minLength: 1,
            title: 'Content'
        },
        parent_comment_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Comment Id'
        },
        files: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'binary'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Files'
        }
    },
    type: 'object',
    required: ['content'],
    title: 'Body_create_comment_api_user_forum_issues__issue_id__comments_post'
} as const;

export const Body_create_issue_api_user_forum_issues_postSchema = {
    properties: {
        title: {
            type: 'string',
            maxLength: 500,
            minLength: 3,
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        files: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'binary'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Files'
        }
    },
    type: 'object',
    required: ['title'],
    title: 'Body_create_issue_api_user_forum_issues_post'
} as const;

export const Body_create_ticket_api_user_support_tickets_postSchema = {
    properties: {
        issue_title: {
            type: 'string',
            title: 'Issue Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        urgency: {
            '$ref': '#/components/schemas/TicketUrgency',
            default: 'low'
        },
        files: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'binary'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Files'
        }
    },
    type: 'object',
    required: ['issue_title'],
    title: 'Body_create_ticket_api_user_support_tickets_post'
} as const;

export const Body_update_comment_api_user_forum_comments__comment_id__putSchema = {
    properties: {
        content: {
            anyOf: [
                {
                    type: 'string',
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content'
        },
        files: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'binary'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Files'
        }
    },
    type: 'object',
    title: 'Body_update_comment_api_user_forum_comments__comment_id__put'
} as const;

export const Body_update_issue_api_user_forum_issues__issue_id__putSchema = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500,
                    minLength: 3
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        files: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'binary'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Files'
        }
    },
    type: 'object',
    title: 'Body_update_issue_api_user_forum_issues__issue_id__put'
} as const;

export const Body_update_profile_api_user_profile_putSchema = {
    properties: {
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        state_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State Id'
        },
        date_of_birth: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Of Birth'
        },
        profile_picture: {
            anyOf: [
                {
                    type: 'string',
                    format: 'binary'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Profile Picture'
        }
    },
    type: 'object',
    title: 'Body_update_profile_api_user_profile_put'
} as const;

export const Body_update_ticket_api_user_support_tickets__ticket_id__putSchema = {
    properties: {
        issue_title: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 500,
                    minLength: 3
                },
                {
                    type: 'null'
                }
            ],
            title: 'Issue Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 5000,
                    minLength: 3
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        urgency: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TicketUrgency'
                },
                {
                    type: 'null'
                }
            ]
        },
        files: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'binary'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Files'
        }
    },
    type: 'object',
    title: 'Body_update_ticket_api_user_support_tickets__ticket_id__put'
} as const;

export const Body_upload_document_api_user_documents_upload_postSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File',
            description: 'File to upload'
        },
        metadata: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_upload_document_api_user_documents_upload_post'
} as const;

export const Body_upload_documents_api_user_documents_uploads_postSchema = {
    properties: {
        files: {
            items: {
                type: 'string',
                format: 'binary'
            },
            type: 'array',
            title: 'Files',
            description: 'One or more files to upload'
        },
        metadata: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UploadDocumentsRequest'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['files'],
    title: 'Body_upload_documents_api_user_documents_uploads_post'
} as const;

export const CeleryHealthResponseSchema = {
    properties: {
        status: {
            type: 'string',
            title: 'Status'
        },
        active_tasks: {
            type: 'integer',
            title: 'Active Tasks'
        },
        scheduled_tasks: {
            type: 'integer',
            title: 'Scheduled Tasks'
        },
        workers: {
            type: 'integer',
            title: 'Workers'
        },
        queues: {
            additionalProperties: {
                type: 'integer'
            },
            type: 'object',
            title: 'Queues'
        }
    },
    type: 'object',
    required: ['status', 'active_tasks', 'scheduled_tasks', 'workers', 'queues'],
    title: 'CeleryHealthResponse'
} as const;

export const CheckoutSessionDAOSchema = {
    properties: {
        checkout_url: {
            type: 'string',
            title: 'Checkout Url',
            description: 'Stripe Checkout session URL'
        },
        session_id: {
            type: 'string',
            title: 'Session Id',
            description: 'Stripe Checkout session ID'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['checkout_url', 'session_id'],
    title: 'CheckoutSessionDAO',
    description: 'Checkout session response for Stripe Checkout'
} as const;

export const CheckoutSessionStatusDAOSchema = {
    properties: {
        status: {
            '$ref': '#/components/schemas/SubscriptionStatus',
            description: 'Session status: success, cancelled, not_found, error'
        },
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'Whether the checkout was successful'
        },
        session_id: {
            type: 'string',
            title: 'Session Id',
            description: 'Stripe checkout session ID'
        },
        price: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price',
            description: 'Price amount in USD'
        },
        plan_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Plan Name',
            description: 'Plan name'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['status', 'success', 'session_id'],
    title: 'CheckoutSessionStatusDAO',
    description: 'Checkout session status response'
} as const;

export const CityDAOSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id',
            description: 'City unique identifier'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'City name'
        },
        state_id: {
            type: 'integer',
            title: 'State Id',
            description: 'State ID'
        },
        country_id: {
            type: 'integer',
            title: 'Country Id',
            description: 'Country ID'
        },
        latitude: {
            type: 'number',
            title: 'Latitude',
            description: 'City latitude'
        },
        longitude: {
            type: 'number',
            title: 'Longitude',
            description: 'City longitude'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'name', 'state_id', 'country_id', 'latitude', 'longitude'],
    title: 'CityDAO'
} as const;

export const CountryDAOSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id',
            description: 'Country unique identifier'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'Country name'
        },
        region_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Region Id',
            description: 'Region ID'
        },
        subregion_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subregion Id',
            description: 'Subregion ID'
        },
        latitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Latitude',
            description: 'Country latitude'
        },
        longitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Longitude',
            description: 'Country longitude'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'name'],
    title: 'CountryDAO'
} as const;

export const CreatePlanDTOSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name',
            description: 'Plan name'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Plan description'
        },
        price: {
            anyOf: [
                {
                    type: 'number',
                    minimum: 0
                },
                {
                    type: 'string'
                }
            ],
            title: 'Price',
            description: 'Plan price'
        },
        duration_days: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Duration Days',
            description: 'Duration in days (null for unlimited)'
        },
        storage_gb: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Gb',
            description: 'Storage limit in GB (null for unlimited)'
        },
        token_count: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token Count',
            description: 'Token count (null for unlimited)'
        },
        stripe_price_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stripe Price Id',
            description: 'Stripe price ID'
        }
    },
    type: 'object',
    required: ['name', 'price'],
    title: 'CreatePlanDTO',
    description: 'DTO for creating a pricing plan'
} as const;

export const CreateSubscriptionDTOSchema = {
    properties: {
        plan_id: {
            type: 'string',
            format: 'uuid',
            title: 'Plan Id',
            description: 'Plan ID'
        }
    },
    type: 'object',
    required: ['plan_id'],
    title: 'CreateSubscriptionDTO',
    description: 'DTO for creating a subscription'
} as const;

export const DocumentDAOSchema = {
    properties: {
        document_id: {
            type: 'string',
            format: 'uuid',
            title: 'Document Id',
            description: 'Document ID'
        },
        uploaded_by: {
            type: 'string',
            format: 'uuid',
            title: 'Uploaded By',
            description: 'Uploader user ID'
        },
        file_name: {
            type: 'string',
            title: 'File Name',
            description: 'Original file name'
        },
        file_path: {
            type: 'string',
            title: 'File Path',
            description: 'Storage file path'
        },
        file_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File Url',
            description: 'Public URL to access the file'
        },
        mime_type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mime Type',
            description: 'File MIME type'
        },
        file_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File Size',
            description: 'File size in bytes'
        },
        processing_status: {
            '$ref': '#/components/schemas/ProcessingStatus',
            description: 'Processing status'
        },
        ai_summary: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ai Summary',
            description: 'Document summary'
        },
        metadata: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata',
            description: 'Additional metadata'
        },
        uploaded_at: {
            type: 'string',
            format: 'date-time',
            title: 'Uploaded At',
            description: 'Upload date'
        },
        processed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Processed At',
            description: 'Processing completion date'
        }
    },
    type: 'object',
    required: ['document_id', 'uploaded_by', 'file_name', 'file_path', 'processing_status', 'uploaded_at'],
    title: 'DocumentDAO',
    description: 'Document data access object'
} as const;

export const EmailPasswordLoginRequestSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            minLength: 5,
            pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',
            title: 'Email',
            description: 'User email address'
        },
        password: {
            type: 'string',
            maxLength: 128,
            minLength: 8,
            title: 'Password',
            description: 'User password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'EmailPasswordLoginRequest',
    description: 'Email and password login request'
} as const;

export const ErrorResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            type: 'null',
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FieldError'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'ErrorResponse'
} as const;

export const FieldErrorSchema = {
    properties: {
        field: {
            type: 'string',
            title: 'Field'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        tag: {
            type: 'string',
            title: 'Tag'
        },
        details: {
            additionalProperties: true,
            type: 'object',
            title: 'Details'
        }
    },
    type: 'object',
    required: ['field', 'message', 'tag'],
    title: 'FieldError',
    description: 'field validation error'
} as const;

export const ForbiddenResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            default: false
        },
        data: {
            type: 'null',
            title: 'Data'
        },
        message: {
            type: 'string',
            title: 'Message',
            default: 'Forbidden'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FieldError'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        }
    },
    type: 'object',
    title: 'ForbiddenResponse',
    description: 'Response model for 403 Forbidden errors'
} as const;

export const ForumAttachmentDAOSchema = {
    properties: {
        attachment_id: {
            type: 'string',
            format: 'uuid',
            title: 'Attachment Id'
        },
        url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Url'
        }
    },
    type: 'object',
    required: ['attachment_id'],
    title: 'ForumAttachmentDAO',
    description: 'Defined entity each attachment for forum usecase that referenced from forum issues/comments'
} as const;

export const ForumCommentDAOSchema = {
    properties: {
        comment_id: {
            type: 'string',
            format: 'uuid',
            title: 'Comment Id'
        },
        issue_id: {
            type: 'string',
            format: 'uuid',
            title: 'Issue Id'
        },
        user: {
            '$ref': '#/components/schemas/UserProfileDAO'
        },
        parent_comment_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Comment Id'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        comment_count: {
            type: 'integer',
            title: 'Comment Count'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        attachments: {
            items: {
                '$ref': '#/components/schemas/ForumAttachmentDAO'
            },
            type: 'array',
            title: 'Attachments'
        }
    },
    type: 'object',
    required: ['comment_id', 'issue_id', 'user', 'content', 'comment_count', 'created_at', 'updated_at'],
    title: 'ForumCommentDAO',
    description: 'Defined entity each comment for forum usecase for CRU, Read for detail comments'
} as const;

export const ForumIssueDAOSchema = {
    properties: {
        issue_id: {
            type: 'string',
            format: 'uuid',
            title: 'Issue Id'
        },
        user: {
            '$ref': '#/components/schemas/UserProfileDAO'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            '$ref': '#/components/schemas/IssueStatus'
        },
        comment_count: {
            type: 'integer',
            title: 'Comment Count'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        attachments: {
            items: {
                '$ref': '#/components/schemas/ForumAttachmentDAO'
            },
            type: 'array',
            title: 'Attachments'
        }
    },
    type: 'object',
    required: ['issue_id', 'user', 'title', 'status', 'comment_count', 'created_at', 'updated_at'],
    title: 'ForumIssueDAO',
    description: 'Defined entity each issue for forum usecase for CRU, Read for detail issues'
} as const;

export const HealthResponseSchema = {
    properties: {
        status: {
            type: 'string',
            title: 'Status'
        },
        timestamp: {
            type: 'string',
            title: 'Timestamp'
        },
        service: {
            type: 'string',
            title: 'Service'
        },
        database: {
            type: 'string',
            title: 'Database'
        },
        redis: {
            type: 'string',
            title: 'Redis'
        },
        version: {
            type: 'string',
            title: 'Version'
        }
    },
    type: 'object',
    required: ['status', 'timestamp', 'service', 'database', 'redis', 'version'],
    title: 'HealthResponse'
} as const;

export const IssueStatusSchema = {
    type: 'string',
    enum: ['open', 'in_progress', 'resolved', 'closed'],
    title: 'IssueStatus'
} as const;

export const LocationDAOSchema = {
    properties: {
        city: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CityDAO'
                },
                {
                    type: 'null'
                }
            ],
            description: 'City information'
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StateDAO'
                },
                {
                    type: 'null'
                }
            ],
            description: 'State information'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CountryDAO'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Country information'
        },
        region: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RegionDAO'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Region information'
        },
        subregion: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubregionDAO'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Subregion information'
        }
    },
    additionalProperties: false,
    type: 'object',
    title: 'LocationDAO'
} as const;

export const LogoutRequestSchema = {
    properties: {
        refresh_token: {
            type: 'string',
            maxLength: 500,
            minLength: 20,
            title: 'Refresh Token',
            description: 'Refresh token to invalidate'
        }
    },
    type: 'object',
    required: ['refresh_token'],
    title: 'LogoutRequest',
    description: 'User logout request'
} as const;

export const NotFoundResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            default: false
        },
        data: {
            type: 'null',
            title: 'Data'
        },
        message: {
            type: 'string',
            title: 'Message',
            default: 'Resource not found'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FieldError'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        }
    },
    type: 'object',
    title: 'NotFoundResponse',
    description: 'Response model for 404 Not Found errors'
} as const;

export const PaginatedApiResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse'
} as const;

export const PaginatedApiResponse_list_AdminTicketDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/AdminTicketDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[AdminTicketDAO]]'
} as const;

export const PaginatedApiResponse_list_CityDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/CityDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[CityDAO]]'
} as const;

export const PaginatedApiResponse_list_CountryDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/CountryDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[CountryDAO]]'
} as const;

export const PaginatedApiResponse_list_DocumentDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/DocumentDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[DocumentDAO]]'
} as const;

export const PaginatedApiResponse_list_ForumCommentDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ForumCommentDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[ForumCommentDAO]]'
} as const;

export const PaginatedApiResponse_list_ForumIssueDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ForumIssueDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[ForumIssueDAO]]'
} as const;

export const PaginatedApiResponse_list_PricingAdminPlanDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/PricingAdminPlanDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[PricingAdminPlanDAO]]'
} as const;

export const PaginatedApiResponse_list_PricingUserPlanDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/PricingUserPlanDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[PricingUserPlanDAO]]'
} as const;

export const PaginatedApiResponse_list_RegionDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/RegionDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[RegionDAO]]'
} as const;

export const PaginatedApiResponse_list_StateDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/StateDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[StateDAO]]'
} as const;

export const PaginatedApiResponse_list_SubregionDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubregionDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[SubregionDAO]]'
} as const;

export const PaginatedApiResponse_list_SubscriptionWithPlanDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SubscriptionWithPlanDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[SubscriptionWithPlanDAO]]'
} as const;

export const PaginatedApiResponse_list_SupportTicketDAO__Schema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        data: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SupportTicketDAO'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        },
        meta: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaModel'
                },
                {
                    additionalProperties: true,
                    type: 'object'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['success', 'meta'],
    title: 'PaginatedApiResponse[list[SupportTicketDAO]]'
} as const;

export const PaginationMetaDTOSchema = {
    properties: {
        limit: {
            anyOf: [
                {
                    type: 'integer',
                    maximum: 100,
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Limit',
            description: 'Limit'
        },
        current_page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Page',
            description: 'Current page'
        }
    },
    type: 'object',
    title: 'PaginationMetaDTO',
    description: 'Pagination meta DAO'
} as const;

export const PaginationMetaModelSchema = {
    properties: {
        limit: {
            type: 'integer',
            title: 'Limit'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        total_page: {
            type: 'integer',
            title: 'Total Page'
        },
        current_page: {
            type: 'integer',
            title: 'Current Page'
        }
    },
    type: 'object',
    required: ['limit', 'total', 'total_page', 'current_page'],
    title: 'PaginationMetaModel'
} as const;

export const PaymentMethodTypeSchema = {
    type: 'string',
    enum: ['card', 'bank_account', 'us_bank_account', 'sepa_debit', 'ideal', 'sofort', 'bancontact', 'giropay', 'eps', 'p24', 'alipay', 'wechat_pay', 'klarna', 'afterpay_clearpay', 'affirm', 'grabpay', 'paynow', 'zip'],
    title: 'PaymentMethodType',
    description: 'Payment method type enum'
} as const;

export const PlanDAOSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Plan name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Plan description'
        },
        storage_gb: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Gb',
            description: 'Plan storage limit'
        },
        token_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token Count',
            description: 'Plan token limit'
        },
        duration_days: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Duration Days',
            description: 'Plan duration'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['name'],
    title: 'PlanDAO',
    description: 'Plan details for embedding inside a subscription response'
} as const;

export const PricingAdminPlanDAOSchema = {
    properties: {
        plan_id: {
            type: 'string',
            format: 'uuid',
            title: 'Plan Id',
            description: 'Plan ID'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'Plan name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Plan description'
        },
        price: {
            type: 'string',
            title: 'Price',
            description: 'Plan price'
        },
        duration_days: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Duration Days',
            description: 'Duration in days (null=unlimited)'
        },
        storage_gb: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Gb',
            description: 'Storage limit in GB (null=unlimited)'
        },
        token_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token Count',
            description: 'Token count (null=unlimited)'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: 'Creation date'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At',
            description: 'Last update date'
        }
    },
    type: 'object',
    required: ['plan_id', 'name', 'price', 'created_at', 'updated_at'],
    title: 'PricingAdminPlanDAO',
    description: 'Pricing plan data access object'
} as const;

export const PricingUserPlanDAOSchema = {
    properties: {
        plan_id: {
            type: 'string',
            format: 'uuid',
            title: 'Plan Id',
            description: 'Plan ID'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'Plan name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Plan description'
        },
        price: {
            type: 'string',
            title: 'Price',
            description: 'Plan price'
        },
        duration_days: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Duration Days',
            description: 'Duration in days (null=unlimited)'
        },
        storage_gb: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Gb',
            description: 'Storage limit in GB (null=unlimited)'
        },
        token_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token Count',
            description: 'Token count (null=unlimited)'
        }
    },
    type: 'object',
    required: ['plan_id', 'name', 'price'],
    title: 'PricingUserPlanDAO',
    description: 'Pricing plan data access object'
} as const;

export const ProcessingStatusSchema = {
    type: 'string',
    enum: ['pending', 'processing', 'completed', 'failed'],
    title: 'ProcessingStatus',
    description: 'Document processing status enumeration'
} as const;

export const RefreshTokenRequestSchema = {
    properties: {
        refresh_token: {
            type: 'string',
            maxLength: 500,
            minLength: 20,
            title: 'Refresh Token',
            description: 'Refresh token to generate new access token'
        }
    },
    type: 'object',
    required: ['refresh_token'],
    title: 'RefreshTokenRequest',
    description: 'Token refresh request'
} as const;

export const RegionDAOSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id',
            description: 'Region unique identifier'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'Region name'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'name'],
    title: 'RegionDAO'
} as const;

export const RespondTicketDTOSchema = {
    properties: {
        response_text: {
            type: 'string',
            maxLength: 5000,
            minLength: 1,
            title: 'Response Text'
        }
    },
    type: 'object',
    required: ['response_text'],
    title: 'RespondTicketDTO',
    description: 'DTO for responding to a ticket by admin'
} as const;

export const SignInMethodSchema = {
    type: 'string',
    enum: ['google', 'facebook', 'apple', 'email_password'],
    title: 'SignInMethod',
    description: 'Sign-in methods for user authentication'
} as const;

export const SortOrderSchema = {
    type: 'string',
    enum: ['asc', 'desc'],
    title: 'SortOrder',
    description: 'Enum for sorting order'
} as const;

export const StateDAOSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id',
            description: 'State unique identifier'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'State name'
        },
        country_id: {
            type: 'integer',
            title: 'Country Id',
            description: 'Country ID'
        },
        country_code: {
            type: 'string',
            title: 'Country Code',
            description: 'Country code'
        },
        latitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Latitude',
            description: 'State latitude'
        },
        longitude: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Longitude',
            description: 'State longitude'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'name', 'country_id', 'country_code'],
    title: 'StateDAO'
} as const;

export const StorageInfoDAOSchema = {
    properties: {
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id',
            description: 'User ID'
        },
        total_files: {
            type: 'integer',
            title: 'Total Files',
            description: 'Total number of files'
        },
        total_size_bytes: {
            type: 'integer',
            title: 'Total Size Bytes',
            description: 'Total storage used in bytes'
        },
        total_size_mb: {
            type: 'number',
            title: 'Total Size Mb',
            description: 'Total storage used in MB'
        },
        total_size_gb: {
            type: 'number',
            title: 'Total Size Gb',
            description: 'Total storage used in GB'
        },
        last_updated: {
            type: 'string',
            format: 'date-time',
            title: 'Last Updated',
            description: 'Last updated timestamp'
        },
        current_limit_storage_bytes: {
            type: 'integer',
            title: 'Current Limit Storage Bytes',
            description: 'Current storage limit in bytes (plan or system)'
        },
        current_limit_storage_mb: {
            type: 'number',
            title: 'Current Limit Storage Mb',
            description: 'Current storage limit in MB (plan or system)'
        },
        current_limit_storage_gb: {
            type: 'number',
            title: 'Current Limit Storage Gb',
            description: 'Current storage limit in GB (plan or system)'
        }
    },
    type: 'object',
    required: ['user_id', 'total_files', 'total_size_bytes', 'total_size_mb', 'total_size_gb', 'last_updated', 'current_limit_storage_bytes', 'current_limit_storage_mb', 'current_limit_storage_gb'],
    title: 'StorageInfoDAO',
    description: 'Storage information response DAO'
} as const;

export const StripeWebhookEventDAOSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            description: 'Whether the webhook event was successful'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['success'],
    title: 'StripeWebhookEventDAO',
    description: 'Stripe webhook event response'
} as const;

export const SubregionDAOSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id',
            description: 'Subregion unique identifier'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'Subregion name'
        },
        region_id: {
            type: 'integer',
            title: 'Region Id',
            description: 'Parent region ID'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'name', 'region_id'],
    title: 'SubregionDAO'
} as const;

export const SubscriptionHistoryFilterDTOSchema = {
    properties: {
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SubscriptionStatus'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter by subscription status'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationMetaDTO'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Pagination parameters'
        }
    },
    type: 'object',
    title: 'SubscriptionHistoryFilterDTO',
    description: 'DTO for filtering subscription history'
} as const;

export const SubscriptionStatusSchema = {
    type: 'string',
    enum: ['pending', 'active', 'grace_period', 'expired', 'cancelled', 'expired_unpaid', 'failed'],
    title: 'SubscriptionStatus',
    description: 'Subscription status enum'
} as const;

export const SubscriptionWithPlanDAOSchema = {
    properties: {
        subscription_id: {
            type: 'string',
            format: 'uuid',
            title: 'Subscription Id',
            description: 'Subscription ID'
        },
        client_id: {
            type: 'string',
            format: 'uuid',
            title: 'Client Id',
            description: 'Client ID'
        },
        plan_id: {
            type: 'string',
            format: 'uuid',
            title: 'Plan Id',
            description: 'Plan ID'
        },
        stripe_subscription_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stripe Subscription Id',
            description: 'Stripe subscription ID'
        },
        stripe_payment_method_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stripe Payment Method Id',
            description: 'Stripe payment method ID'
        },
        status: {
            '$ref': '#/components/schemas/SubscriptionStatus',
            description: 'Subscription status'
        },
        payment_method_type: {
            '$ref': '#/components/schemas/PaymentMethodType',
            description: 'Payment method type'
        },
        current_price: {
            type: 'string',
            title: 'Current Price',
            description: 'Current subscription price'
        },
        invoice_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Invoice Url',
            description: 'Latest invoice URL'
        },
        current_period_start: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Period Start',
            description: 'Current period start'
        },
        current_period_end: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Period End',
            description: 'Current period end'
        },
        grace_period_end: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grace Period End',
            description: 'Grace period end'
        },
        upgraded_from_plan_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Upgraded From Plan Id',
            description: 'Previous plan ID for upgrades'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: 'Creation date'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At',
            description: 'Last update date'
        },
        soft_delete: {
            type: 'boolean',
            title: 'Soft Delete',
            description: 'Whether subscription is soft deleted'
        },
        plan: {
            '$ref': '#/components/schemas/PlanDAO',
            description: 'Plan details'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['subscription_id', 'client_id', 'plan_id', 'status', 'payment_method_type', 'current_price', 'created_at', 'updated_at', 'soft_delete', 'plan'],
    title: 'SubscriptionWithPlanDAO',
    description: 'Subscription DAO with plan details'
} as const;

export const SupportAttachmentDAOSchema = {
    properties: {
        attachment_id: {
            type: 'string',
            format: 'uuid',
            title: 'Attachment Id'
        },
        url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Url'
        }
    },
    type: 'object',
    required: ['attachment_id'],
    title: 'SupportAttachmentDAO',
    description: 'Defined entity each attachments for user usecase that referenced from support ticket'
} as const;

export const SupportTicketDAOSchema = {
    properties: {
        ticket_id: {
            type: 'string',
            format: 'uuid',
            title: 'Ticket Id'
        },
        issue_title: {
            type: 'string',
            title: 'Issue Title'
        },
        status: {
            '$ref': '#/components/schemas/TicketStatus'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['ticket_id', 'issue_title', 'status', 'created_at', 'updated_at'],
    title: 'SupportTicketDAO',
    description: 'Defined entity each ticket for user usecase for read tickets'
} as const;

export const SupportTicketDetailDAOSchema = {
    properties: {
        ticket_id: {
            type: 'string',
            format: 'uuid',
            title: 'Ticket Id'
        },
        issue_title: {
            type: 'string',
            title: 'Issue Title'
        },
        status: {
            '$ref': '#/components/schemas/TicketStatus'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        urgency: {
            '$ref': '#/components/schemas/TicketUrgency'
        },
        attachments: {
            items: {
                '$ref': '#/components/schemas/SupportAttachmentDAO'
            },
            type: 'array',
            title: 'Attachments'
        },
        response: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/TicketResponseDAO'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['ticket_id', 'issue_title', 'status', 'created_at', 'updated_at', 'urgency'],
    title: 'SupportTicketDetailDAO',
    description: 'Defined entity each ticket for user usecase for CRU, Read for detail tickets'
} as const;

export const TicketResponseDAOSchema = {
    properties: {
        response_text: {
            type: 'string',
            title: 'Response Text'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['response_text', 'created_at', 'updated_at'],
    title: 'TicketResponseDAO',
    description: 'Defined entity each response for user usecase after got responded by admin'
} as const;

export const TicketStatusSchema = {
    type: 'string',
    enum: ['new', 'responded'],
    title: 'TicketStatus'
} as const;

export const TicketUrgencySchema = {
    type: 'string',
    enum: ['low', 'medium', 'high'],
    title: 'TicketUrgency'
} as const;

export const TierLabelSchema = {
    type: 'string',
    enum: ['premium', 'free'],
    title: 'TierLabel',
    description: 'Tier label enum for user subscription tiers'
} as const;

export const UnauthorizedResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            default: false
        },
        data: {
            type: 'null',
            title: 'Data'
        },
        message: {
            type: 'string',
            title: 'Message',
            default: 'Unauthorized'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FieldError'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        }
    },
    type: 'object',
    title: 'UnauthorizedResponse',
    description: 'Response model for 401 Unauthorized errors'
} as const;

export const UpdateDocumentStatusRequestSchema = {
    properties: {
        status: {
            '$ref': '#/components/schemas/ProcessingStatus',
            description: 'Processing status'
        },
        ai_summary: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ai Summary',
            description: 'Document summary'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'UpdateDocumentStatusRequest',
    description: 'Update document status request'
} as const;

export const UpdatePlanDTOSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            description: 'Plan name'
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 1000
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Plan description'
        },
        price: {
            anyOf: [
                {
                    type: 'number',
                    minimum: 0
                },
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price',
            description: 'Plan price'
        },
        duration_days: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Duration Days',
            description: 'Duration in days (null for unlimited)'
        },
        storage_gb: {
            anyOf: [
                {
                    type: 'integer',
                    exclusiveMinimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Storage Gb',
            description: 'Storage limit in GB (null for unlimited)'
        },
        token_count: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token Count',
            description: 'Token count (null for unlimited)'
        },
        stripe_price_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Stripe Price Id',
            description: 'Stripe price ID'
        }
    },
    type: 'object',
    title: 'UpdatePlanDTO',
    description: 'DTO for updating a pricing plan'
} as const;

export const UpdateSystemAdminSettingsDTOSchema = {
    properties: {
        is_free_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Free Active',
            description: 'Whether free tier is active'
        },
        max_free_storage_gb: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Free Storage Gb',
            description: 'Maximum free storage in GB'
        },
        max_free_token_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Free Token Count',
            description: 'Maximum free token count'
        }
    },
    type: 'object',
    title: 'UpdateSystemAdminSettingsDTO',
    description: 'Update system admin settings request DTO'
} as const;

export const UpdateUserRequestSchema = {
    properties: {
        override_plan_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Override Plan Id',
            description: 'Override plan ID for premium features'
        }
    },
    type: 'object',
    title: 'UpdateUserRequest',
    description: 'Request DTO for admin to update user data'
} as const;

export const UpgradePreviewDAOSchema = {
    properties: {
        current_plan: {
            '$ref': '#/components/schemas/UpgradePreviewPlanDAO'
        },
        new_plan: {
            '$ref': '#/components/schemas/UpgradePreviewPlanDAO'
        },
        proration: {
            '$ref': '#/components/schemas/UpgradePreviewProrationDAO'
        },
        line_items: {
            items: {
                '$ref': '#/components/schemas/UpgradePreviewLineItemDAO'
            },
            type: 'array',
            title: 'Line Items'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['current_plan', 'new_plan', 'proration', 'line_items'],
    title: 'UpgradePreviewDAO',
    description: 'Upgrade preview response'
} as const;

export const UpgradePreviewLineItemDAOSchema = {
    properties: {
        description: {
            type: 'string',
            title: 'Description',
            description: 'Line item description'
        },
        amount: {
            type: 'number',
            title: 'Amount',
            description: 'Amount in dollars'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity',
            description: 'Quantity'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['description', 'amount', 'quantity'],
    title: 'UpgradePreviewLineItemDAO',
    description: 'Line item for upgrade preview'
} as const;

export const UpgradePreviewPlanDAOSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Plan ID'
        },
        price: {
            type: 'number',
            title: 'Price',
            description: 'Plan price in dollars'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'price'],
    title: 'UpgradePreviewPlanDAO',
    description: 'Plan info for preview'
} as const;

export const UpgradePreviewProrationDAOSchema = {
    properties: {
        amount_due: {
            type: 'number',
            title: 'Amount Due',
            description: 'Amount due in dollars'
        },
        amount_paid: {
            type: 'number',
            title: 'Amount Paid',
            description: 'Amount paid in dollars'
        },
        amount_remaining: {
            type: 'number',
            title: 'Amount Remaining',
            description: 'Amount remaining in dollars'
        },
        total: {
            type: 'number',
            title: 'Total',
            description: 'Total in dollars'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['amount_due', 'amount_paid', 'amount_remaining', 'total'],
    title: 'UpgradePreviewProrationDAO',
    description: 'Proration summary amounts'
} as const;

export const UpgradeSubscriptionDTOSchema = {
    properties: {
        new_plan_id: {
            type: 'string',
            format: 'uuid',
            title: 'New Plan Id',
            description: 'New plan ID'
        }
    },
    type: 'object',
    required: ['new_plan_id'],
    title: 'UpgradeSubscriptionDTO',
    description: 'DTO for upgrading a subscription'
} as const;

export const UploadDocumentMetadataSchema = {
    properties: {
        file_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File Name',
            description: 'Target file name to apply this metadata (optional)'
        },
        metadata: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata',
            description: 'Additional metadata for this file'
        }
    },
    type: 'object',
    title: 'UploadDocumentMetadata',
    description: 'Per-file metadata mapping'
} as const;

export const UploadDocumentsRequestSchema = {
    properties: {
        items: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/UploadDocumentMetadata'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Items',
            description: 'List of per-file metadata entries'
        }
    },
    type: 'object',
    title: 'UploadDocumentsRequest',
    description: 'Multiple upload request wrapper'
} as const;

export const UserBaseDAOSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'User unique identifier'
        },
        email: {
            type: 'string',
            maxLength: 254,
            pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',
            title: 'Email',
            description: 'User email address'
        },
        first_name: {
            type: 'string',
            title: 'First Name',
            description: 'User first name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name',
            description: 'User last name'
        },
        profile_picture_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Profile Picture Url',
            description: 'Profile picture URL'
        },
        role: {
            '$ref': '#/components/schemas/UserRole',
            description: 'User role',
            default: 'client'
        },
        sign_with: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SignInMethod'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Sign-in method used for authentication'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'email', 'first_name', 'last_name'],
    title: 'UserBaseDAO',
    description: 'User base data access object'
} as const;

export const UserClientDAOSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'User unique identifier'
        },
        email: {
            type: 'string',
            maxLength: 254,
            pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$',
            title: 'Email',
            description: 'User email address'
        },
        first_name: {
            type: 'string',
            title: 'First Name',
            description: 'User first name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name',
            description: 'User last name'
        },
        profile_picture_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Profile Picture Url',
            description: 'Profile picture URL'
        },
        role: {
            '$ref': '#/components/schemas/UserRole',
            description: 'User role',
            default: 'client'
        },
        sign_with: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SignInMethod'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Sign-in method used for authentication'
        },
        state_id: {
            type: 'integer',
            title: 'State Id',
            description: 'State ID'
        },
        state_name: {
            type: 'string',
            title: 'State Name',
            description: 'State name'
        },
        date_of_birth: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date Of Birth',
            description: 'Date of birth'
        },
        storage_used: {
            type: 'number',
            title: 'Storage Used',
            description: 'Storage used'
        },
        plan_id: {
            type: 'string',
            title: 'Plan Id',
            description: 'Plan ID'
        },
        plan_name: {
            type: 'string',
            title: 'Plan Name',
            description: 'Plan name'
        },
        token_used: {
            type: 'integer',
            title: 'Token Used',
            description: 'Token used'
        }
    },
    additionalProperties: false,
    type: 'object',
    required: ['id', 'email', 'first_name', 'last_name', 'state_id', 'state_name', 'storage_used', 'plan_id', 'plan_name', 'token_used'],
    title: 'UserClientDAO',
    description: 'User client data access object'
} as const;

export const UserDAOSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'ID'
        },
        email: {
            type: 'string',
            title: 'Email',
            description: 'Email'
        },
        first_name: {
            type: 'string',
            title: 'First Name',
            description: 'First name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name',
            description: 'Last name'
        }
    },
    type: 'object',
    required: ['id', 'email', 'first_name', 'last_name'],
    title: 'UserDAO',
    description: 'User DAO'
} as const;

export const UserProfileDAOSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'ID'
        },
        email: {
            type: 'string',
            title: 'Email',
            description: 'Email'
        },
        first_name: {
            type: 'string',
            title: 'First Name',
            description: 'First name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name',
            description: 'Last name'
        },
        profile_picture_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Profile Picture Url',
            description: 'Profile picture URL'
        }
    },
    type: 'object',
    required: ['id', 'email', 'first_name', 'last_name'],
    title: 'UserProfileDAO',
    description: 'User profile DAO'
} as const;

export const UserRoleSchema = {
    type: 'string',
    enum: ['client', 'admin', 'lawyer'],
    title: 'UserRole',
    description: 'User roles for system access control'
} as const;