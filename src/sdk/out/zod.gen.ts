// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAdminSupportResponseDao = z.object({
    ticket_id: z.string().uuid(),
    response_text: z.string(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime()
});

export const zAdminSupportTicketSortBy = z.enum([
    'updated_at',
    'urgency',
    'tier_label',
    'sender_name'
]);

export const zTicketStatus = z.enum([
    'new',
    'responded'
]);

export const zTicketUrgency = z.enum([
    'low',
    'medium',
    'high'
]);

export const zTierLabel = z.enum([
    'premium',
    'free'
]);

export const zUserDao = z.object({
    id: z.string(),
    email: z.string(),
    first_name: z.string(),
    last_name: z.string()
});

export const zAdminTicketDao = z.object({
    ticket_id: z.string().uuid(),
    issue_title: z.string(),
    status: zTicketStatus,
    urgency: zTicketUrgency,
    tier_label: zTierLabel,
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    user: zUserDao
});

export const zSupportAttachmentDao = z.object({
    attachment_id: z.string().uuid(),
    url: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zAdminTicketDetailDao = z.object({
    ticket_id: z.string().uuid(),
    issue_title: z.string(),
    status: zTicketStatus,
    urgency: zTicketUrgency,
    tier_label: zTierLabel,
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    user: zUserDao,
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    response: z.union([
        zAdminSupportResponseDao,
        z.null()
    ]).optional(),
    attachments: z.array(zSupportAttachmentDao).optional()
});

export const zApiResponse = z.object({
    success: z.boolean(),
    data: z.union([
        z.unknown(),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zApiResponseAdminSupportResponseDao = z.object({
    success: z.boolean(),
    data: z.union([
        zAdminSupportResponseDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zApiResponseAdminTicketDetailDao = z.object({
    success: z.boolean(),
    data: z.union([
        zAdminTicketDetailDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUserRole = z.enum([
    'client',
    'admin',
    'lawyer'
]);

export const zSignInMethod = z.enum([
    'google',
    'facebook',
    'apple',
    'email_password'
]);

export const zUserBaseDao = z.object({
    id: z.string(),
    email: z.string().max(254).regex(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/),
    first_name: z.string(),
    last_name: z.string(),
    profile_picture_url: z.union([
        z.string(),
        z.null()
    ]).optional(),
    role: zUserRole.optional(),
    sign_with: z.union([
        zSignInMethod,
        z.null()
    ]).optional()
});

export const zAuthTokenDao = z.object({
    access_token: z.string(),
    refresh_token: z.string(),
    expires_in: z.number().int(),
    is_new: z.boolean().optional().default(false),
    user: zUserBaseDao
});

export const zApiResponseAuthTokenDao = z.object({
    success: z.boolean(),
    data: z.union([
        zAuthTokenDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zAuthUrlDao = z.object({
    url: z.string()
});

export const zApiResponseAuthUrlDao = z.object({
    success: z.boolean(),
    data: z.union([
        zAuthUrlDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zCheckoutSessionDao = z.object({
    checkout_url: z.string(),
    session_id: z.string()
});

export const zApiResponseCheckoutSessionDao = z.object({
    success: z.boolean(),
    data: z.union([
        zCheckoutSessionDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zSubscriptionStatus = z.enum([
    'pending',
    'active',
    'grace_period',
    'expired',
    'cancelled',
    'expired_unpaid',
    'failed'
]);

export const zCheckoutSessionStatusDao = z.object({
    status: zSubscriptionStatus,
    success: z.boolean(),
    session_id: z.string(),
    price: z.union([
        z.number(),
        z.null()
    ]).optional(),
    plan_name: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zApiResponseCheckoutSessionStatusDao = z.object({
    success: z.boolean(),
    data: z.union([
        zCheckoutSessionStatusDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zProcessingStatus = z.enum([
    'pending',
    'processing',
    'completed',
    'failed'
]);

export const zDocumentDao = z.object({
    document_id: z.string().uuid(),
    uploaded_by: z.string().uuid(),
    file_name: z.string(),
    file_path: z.string(),
    file_url: z.union([
        z.string(),
        z.null()
    ]).optional(),
    mime_type: z.union([
        z.string(),
        z.null()
    ]).optional(),
    file_size: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    processing_status: zProcessingStatus,
    ai_summary: z.union([
        z.string(),
        z.null()
    ]).optional(),
    metadata: z.union([
        z.object({}),
        z.null()
    ]).optional(),
    uploaded_at: z.string().datetime(),
    processed_at: z.union([
        z.string().datetime(),
        z.null()
    ]).optional()
});

export const zApiResponseDocumentDao = z.object({
    success: z.boolean(),
    data: z.union([
        zDocumentDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUserProfileDao = z.object({
    id: z.string(),
    email: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    profile_picture_url: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zForumAttachmentDao = z.object({
    attachment_id: z.string().uuid(),
    url: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zForumCommentDao = z.object({
    comment_id: z.string().uuid(),
    issue_id: z.string().uuid(),
    user: zUserProfileDao,
    parent_comment_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    content: z.string(),
    comment_count: z.number().int(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    attachments: z.array(zForumAttachmentDao).optional()
});

export const zApiResponseForumCommentDao = z.object({
    success: z.boolean(),
    data: z.union([
        zForumCommentDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zIssueStatus = z.enum([
    'open',
    'in_progress',
    'resolved',
    'closed'
]);

export const zForumIssueDao = z.object({
    issue_id: z.string().uuid(),
    user: zUserProfileDao,
    title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    status: zIssueStatus,
    comment_count: z.number().int(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    attachments: z.array(zForumAttachmentDao).optional()
});

export const zApiResponseForumIssueDao = z.object({
    success: z.boolean(),
    data: z.union([
        zForumIssueDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zHealthResponse = z.object({
    status: z.string(),
    timestamp: z.string(),
    service: z.string(),
    database: z.string(),
    redis: z.string(),
    version: z.string()
});

export const zApiResponseHealthResponse = z.object({
    success: z.boolean(),
    data: z.union([
        zHealthResponse,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zCityDao = z.object({
    id: z.number().int(),
    name: z.string(),
    state_id: z.number().int(),
    country_id: z.number().int(),
    latitude: z.number(),
    longitude: z.number()
});

export const zStateDao = z.object({
    id: z.number().int(),
    name: z.string(),
    country_id: z.number().int(),
    country_code: z.string(),
    latitude: z.union([
        z.number(),
        z.null()
    ]).optional(),
    longitude: z.union([
        z.number(),
        z.null()
    ]).optional()
});

export const zCountryDao = z.object({
    id: z.number().int(),
    name: z.string(),
    region_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    subregion_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    latitude: z.union([
        z.number(),
        z.null()
    ]).optional(),
    longitude: z.union([
        z.number(),
        z.null()
    ]).optional()
});

export const zRegionDao = z.object({
    id: z.number().int(),
    name: z.string()
});

export const zSubregionDao = z.object({
    id: z.number().int(),
    name: z.string(),
    region_id: z.number().int()
});

export const zLocationDao = z.object({
    city: z.union([
        zCityDao,
        z.null()
    ]).optional(),
    state: z.union([
        zStateDao,
        z.null()
    ]).optional(),
    country: z.union([
        zCountryDao,
        z.null()
    ]).optional(),
    region: z.union([
        zRegionDao,
        z.null()
    ]).optional(),
    subregion: z.union([
        zSubregionDao,
        z.null()
    ]).optional()
});

export const zApiResponseLocationDao = z.object({
    success: z.boolean(),
    data: z.union([
        zLocationDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zPricingAdminPlanDao = z.object({
    plan_id: z.string().uuid(),
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    price: z.string(),
    duration_days: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    storage_gb: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    token_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime()
});

export const zApiResponsePricingAdminPlanDao = z.object({
    success: z.boolean(),
    data: z.union([
        zPricingAdminPlanDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zStorageInfoDao = z.object({
    user_id: z.string().uuid(),
    total_files: z.number().int(),
    total_size_bytes: z.number().int(),
    total_size_mb: z.number(),
    total_size_gb: z.number(),
    last_updated: z.string().datetime(),
    current_limit_storage_bytes: z.number().int(),
    current_limit_storage_mb: z.number(),
    current_limit_storage_gb: z.number()
});

export const zApiResponseStorageInfoDao = z.object({
    success: z.boolean(),
    data: z.union([
        zStorageInfoDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zPaymentMethodType = z.enum([
    'card',
    'bank_account',
    'us_bank_account',
    'sepa_debit',
    'ideal',
    'sofort',
    'bancontact',
    'giropay',
    'eps',
    'p24',
    'alipay',
    'wechat_pay',
    'klarna',
    'afterpay_clearpay',
    'affirm',
    'grabpay',
    'paynow',
    'zip'
]);

export const zPlanDao = z.object({
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    storage_gb: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    token_count: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    duration_days: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zSubscriptionWithPlanDao = z.object({
    subscription_id: z.string().uuid(),
    client_id: z.string().uuid(),
    plan_id: z.string().uuid(),
    stripe_subscription_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    stripe_payment_method_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    status: zSubscriptionStatus,
    payment_method_type: zPaymentMethodType,
    current_price: z.string(),
    invoice_url: z.union([
        z.string(),
        z.null()
    ]).optional(),
    current_period_start: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    current_period_end: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    grace_period_end: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    upgraded_from_plan_id: z.union([
        z.string().uuid(),
        z.null()
    ]).optional(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    soft_delete: z.boolean(),
    plan: zPlanDao
});

export const zApiResponseSubscriptionWithPlanDao = z.object({
    success: z.boolean(),
    data: z.union([
        zSubscriptionWithPlanDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zTicketResponseDao = z.object({
    response_text: z.string(),
    created_at: z.string().datetime(),
    updated_at: z.string().datetime()
});

export const zSupportTicketDetailDao = z.object({
    ticket_id: z.string().uuid(),
    issue_title: z.string(),
    status: zTicketStatus,
    created_at: z.string().datetime(),
    updated_at: z.string().datetime(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    urgency: zTicketUrgency,
    attachments: z.array(zSupportAttachmentDao).optional(),
    response: z.union([
        zTicketResponseDao,
        z.null()
    ]).optional()
});

export const zApiResponseSupportTicketDetailDao = z.object({
    success: z.boolean(),
    data: z.union([
        zSupportTicketDetailDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zApiResponseUnionSubscriptionWithPlanDaoNoneType = z.object({
    success: z.boolean(),
    data: z.union([
        zSubscriptionWithPlanDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUpgradePreviewPlanDao = z.object({
    id: z.string(),
    price: z.number()
});

export const zUpgradePreviewProrationDao = z.object({
    amount_due: z.number(),
    amount_paid: z.number(),
    amount_remaining: z.number(),
    total: z.number()
});

export const zUpgradePreviewLineItemDao = z.object({
    description: z.string(),
    amount: z.number(),
    quantity: z.number().int()
});

export const zUpgradePreviewDao = z.object({
    current_plan: zUpgradePreviewPlanDao,
    new_plan: zUpgradePreviewPlanDao,
    proration: zUpgradePreviewProrationDao,
    line_items: z.array(zUpgradePreviewLineItemDao)
});

export const zApiResponseUpgradePreviewDao = z.object({
    success: z.boolean(),
    data: z.union([
        zUpgradePreviewDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zApiResponseUserBaseDao = z.object({
    success: z.boolean(),
    data: z.union([
        zUserBaseDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUserClientDao = z.object({
    id: z.string(),
    email: z.string().max(254).regex(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/),
    first_name: z.string(),
    last_name: z.string(),
    profile_picture_url: z.union([
        z.string(),
        z.null()
    ]).optional(),
    role: zUserRole.optional(),
    sign_with: z.union([
        zSignInMethod,
        z.null()
    ]).optional(),
    state_id: z.number().int(),
    state_name: z.string(),
    date_of_birth: z.union([
        z.string().date(),
        z.null()
    ]).optional(),
    storage_used: z.number(),
    plan_id: z.string(),
    plan_name: z.string(),
    token_used: z.number().int()
});

export const zApiResponseUserClientDao = z.object({
    success: z.boolean(),
    data: z.union([
        zUserClientDao,
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zApiResponseBool = z.object({
    success: z.boolean(),
    data: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zApiResponseListDocumentDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zDocumentDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zFieldError = z.object({
    field: z.string(),
    message: z.string(),
    tag: z.string(),
    details: z.object({}).optional()
});

export const zBadRequestResponse = z.object({
    success: z.boolean().optional().default(false),
    data: z.null().optional(),
    message: z.string().optional().default('Bad Request'),
    errors: z.union([
        z.array(zFieldError),
        z.null()
    ]).optional()
});

export const zBodyCreateCommentApiUserForumIssuesIssueIdCommentsPost = z.object({
    content: z.string().min(1),
    parent_comment_id: z.union([
        z.string(),
        z.null()
    ]).optional(),
    files: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zBodyCreateIssueApiUserForumIssuesPost = z.object({
    title: z.string().min(3).max(500),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    files: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zBodyCreateTicketApiUserSupportTicketsPost = z.object({
    issue_title: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    urgency: zTicketUrgency.optional(),
    files: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zBodyUpdateCommentApiUserForumCommentsCommentIdPut = z.object({
    content: z.union([
        z.string().min(1),
        z.null()
    ]).optional(),
    files: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zBodyUpdateIssueApiUserForumIssuesIssueIdPut = z.object({
    title: z.union([
        z.string().min(3).max(500),
        z.null()
    ]).optional(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    status: z.union([
        z.string(),
        z.null()
    ]).optional(),
    files: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zBodyUpdateProfileApiUserProfilePut = z.object({
    first_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    last_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    state_id: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    date_of_birth: z.union([
        z.string(),
        z.null()
    ]).optional(),
    profile_picture: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zBodyUpdateTicketApiUserSupportTicketsTicketIdPut = z.object({
    issue_title: z.union([
        z.string().min(3).max(500),
        z.null()
    ]).optional(),
    description: z.union([
        z.string().min(3).max(5000),
        z.null()
    ]).optional(),
    urgency: z.union([
        zTicketUrgency,
        z.null()
    ]).optional(),
    files: z.union([
        z.array(z.string()),
        z.null()
    ]).optional()
});

export const zBodyUploadDocumentApiUserDocumentsUploadPost = z.object({
    file: z.string(),
    metadata: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zUploadDocumentMetadata = z.object({
    file_name: z.union([
        z.string(),
        z.null()
    ]).optional(),
    metadata: z.union([
        z.object({}),
        z.null()
    ]).optional()
});

export const zUploadDocumentsRequest = z.object({
    items: z.union([
        z.array(zUploadDocumentMetadata),
        z.null()
    ]).optional()
});

export const zBodyUploadDocumentsApiUserDocumentsUploadsPost = z.object({
    files: z.array(z.string()),
    metadata: z.union([
        zUploadDocumentsRequest,
        z.null()
    ]).optional()
});

export const zCeleryHealthResponse = z.object({
    status: z.string(),
    active_tasks: z.number().int(),
    scheduled_tasks: z.number().int(),
    workers: z.number().int(),
    queues: z.object({})
});

export const zCreatePlanDto = z.object({
    name: z.string().min(1).max(255),
    description: z.union([
        z.string().max(1000),
        z.null()
    ]).optional(),
    price: z.union([
        z.number().gte(0),
        z.string()
    ]),
    duration_days: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    storage_gb: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    token_count: z.union([
        z.number().int().gte(0),
        z.null()
    ]).optional(),
    stripe_price_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zCreateSubscriptionDto = z.object({
    plan_id: z.string().uuid()
});

export const zEmailPasswordLoginRequest = z.object({
    email: z.string().min(5).max(255).regex(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/),
    password: z.string().min(8).max(128)
});

export const zErrorResponse = z.object({
    success: z.boolean(),
    data: z.null().optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    errors: z.union([
        z.array(zFieldError),
        z.null()
    ]).optional()
});

export const zForbiddenResponse = z.object({
    success: z.boolean().optional().default(false),
    data: z.null().optional(),
    message: z.string().optional().default('Forbidden'),
    errors: z.union([
        z.array(zFieldError),
        z.null()
    ]).optional()
});

export const zLogoutRequest = z.object({
    refresh_token: z.string().min(20).max(500)
});

export const zNotFoundResponse = z.object({
    success: z.boolean().optional().default(false),
    data: z.null().optional(),
    message: z.string().optional().default('Resource not found'),
    errors: z.union([
        z.array(zFieldError),
        z.null()
    ]).optional()
});

export const zPaginationMetaModel = z.object({
    limit: z.number().int(),
    total: z.number().int(),
    total_page: z.number().int(),
    current_page: z.number().int()
});

export const zPaginatedApiResponse = z.object({
    success: z.boolean(),
    data: z.union([
        z.unknown(),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListAdminTicketDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zAdminTicketDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListCityDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zCityDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListCountryDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zCountryDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListDocumentDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zDocumentDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListForumCommentDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zForumCommentDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListForumIssueDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zForumIssueDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListPricingAdminPlanDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zPricingAdminPlanDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPricingUserPlanDao = z.object({
    plan_id: z.string().uuid(),
    name: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    price: z.string(),
    duration_days: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    storage_gb: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    token_count: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zPaginatedApiResponseListPricingUserPlanDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zPricingUserPlanDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListRegionDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zRegionDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListStateDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zStateDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListSubregionDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zSubregionDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginatedApiResponseListSubscriptionWithPlanDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zSubscriptionWithPlanDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zSupportTicketDao = z.object({
    ticket_id: z.string().uuid(),
    issue_title: z.string(),
    status: zTicketStatus,
    created_at: z.string().datetime(),
    updated_at: z.string().datetime()
});

export const zPaginatedApiResponseListSupportTicketDao = z.object({
    success: z.boolean(),
    data: z.union([
        z.array(zSupportTicketDao),
        z.null()
    ]).optional(),
    message: z.union([
        z.string(),
        z.null()
    ]).optional(),
    meta: z.union([
        zPaginationMetaModel,
        z.object({})
    ])
});

export const zPaginationMetaDto = z.object({
    limit: z.union([
        z.number().int().gte(1).lte(100),
        z.null()
    ]).optional(),
    current_page: z.union([
        z.number().int().gte(1),
        z.null()
    ]).optional()
});

export const zRefreshTokenRequest = z.object({
    refresh_token: z.string().min(20).max(500)
});

export const zRespondTicketDto = z.object({
    response_text: z.string().min(1).max(5000)
});

export const zSortOrder = z.enum([
    'asc',
    'desc'
]);

export const zStripeWebhookEventDao = z.object({
    success: z.boolean()
});

export const zSubscriptionHistoryFilterDto = z.object({
    status: z.union([
        zSubscriptionStatus,
        z.null()
    ]).optional(),
    pagination: z.union([
        zPaginationMetaDto,
        z.null()
    ]).optional()
});

export const zUnauthorizedResponse = z.object({
    success: z.boolean().optional().default(false),
    data: z.null().optional(),
    message: z.string().optional().default('Unauthorized'),
    errors: z.union([
        z.array(zFieldError),
        z.null()
    ]).optional()
});

export const zUpdateDocumentStatusRequest = z.object({
    status: zProcessingStatus,
    ai_summary: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUpdatePlanDto = z.object({
    name: z.union([
        z.string().min(1).max(255),
        z.null()
    ]).optional(),
    description: z.union([
        z.string().max(1000),
        z.null()
    ]).optional(),
    price: z.union([
        z.number().gte(0),
        z.string(),
        z.null()
    ]).optional(),
    duration_days: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    storage_gb: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    token_count: z.union([
        z.number().int().gte(0),
        z.null()
    ]).optional(),
    stripe_price_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUpdateSystemAdminSettingsDto = z.object({
    is_free_active: z.union([
        z.boolean(),
        z.null()
    ]).optional(),
    max_free_storage_gb: z.union([
        z.number(),
        z.null()
    ]).optional(),
    max_free_token_count: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zUpdateUserRequest = z.object({
    override_plan_id: z.union([
        z.string(),
        z.null()
    ]).optional()
});

export const zUpgradeSubscriptionDto = z.object({
    new_plan_id: z.string().uuid()
});

export const zGoogleAuthUrlApiAuthGoogleUrlPostResponse = zApiResponseAuthUrlDao;

export const zRefreshTokenApiAuthRefreshPostResponse = zApiResponseAuthTokenDao;

export const zLogoutApiAuthLogoutPostResponse = zApiResponseBool;

export const zAdminLoginApiAuthAdminLoginPostResponse = zApiResponseAuthTokenDao;

export const zHealthCheckApiHealthGetResponse = zApiResponseHealthResponse;

export const zCeleryHealthCheckApiCeleryHealthGetResponse = zCeleryHealthResponse;

export const zGetLocationInfoApiLocationsInfoCityIdGetResponse = zApiResponseLocationDao;

export const zGetAllRegionsApiLocationsRegionsGetResponse = zPaginatedApiResponseListRegionDao;

export const zGetAllSubregionsApiLocationsSubregionsGetResponse = zPaginatedApiResponseListSubregionDao;

export const zGetAllCountriesApiLocationsCountriesGetResponse = zPaginatedApiResponseListCountryDao;

export const zGetAllStatesApiLocationsStatesGetResponse = zPaginatedApiResponseListStateDao;

export const zGetAllCitiesApiLocationsCitiesGetResponse = zPaginatedApiResponseListCityDao;

export const zStripeWebhookApiWebhooksStripePostResponse = zStripeWebhookEventDao;

export const zRagSummaryWebhookApiWebhooksRagSummaryUserIdDocumentIdPostResponse = zApiResponseBool;

export const zGetStoragePresignedUrlApiStorageUrlFilePathGetResponse = z.object({});

export const zGetAllPlansApiPricingPlansGetResponse = zPaginatedApiResponseListPricingUserPlanDao;

export const zGetProfileApiUserProfileGetResponse = zApiResponseUserBaseDao;

export const zUpdateProfileApiUserProfilePutResponse = zApiResponseUserBaseDao;

export const zGetClientProfileApiUserProfileClientGetResponse = zApiResponseUserClientDao;

export const zListIssuesApiUserForumIssuesGetResponse = zPaginatedApiResponseListForumIssueDao;

export const zCreateIssueApiUserForumIssuesPostResponse = zApiResponseForumIssueDao;

export const zListMyIssuesApiUserForumIssuesMyGetResponse = zPaginatedApiResponseListForumIssueDao;

export const zDeleteIssueApiUserForumIssuesIssueIdDeleteResponse = zApiResponseBool;

export const zUpdateIssueApiUserForumIssuesIssueIdPutResponse = zApiResponseForumIssueDao;

export const zListCommentsByIssueApiUserForumIssuesIssueIdCommentsGetResponse = zPaginatedApiResponseListForumCommentDao;

export const zCreateCommentApiUserForumIssuesIssueIdCommentsPostResponse = zApiResponseForumCommentDao;

export const zDeleteCommentApiUserForumCommentsCommentIdDeleteResponse = zApiResponseBool;

export const zUpdateCommentApiUserForumCommentsCommentIdPutResponse = zApiResponseForumCommentDao;

export const zUploadDocumentApiUserDocumentsUploadPostResponse = zApiResponseDocumentDao;

export const zUploadDocumentsApiUserDocumentsUploadsPostResponse = zApiResponseListDocumentDao;

export const zListDocumentsApiUserDocumentsGetResponse = zPaginatedApiResponseListDocumentDao;

export const zDeleteDocumentApiUserDocumentsDocumentIdDeleteResponse = zApiResponseBool;

export const zUpdateDocumentApiUserDocumentsDocumentIdPutResponse = zApiResponseDocumentDao;

export const zGetStorageInfoApiUserDocumentsStorageInfoGetResponse = zApiResponseStorageInfoDao;

export const zGetUserSubscriptionApiUserSubscriptionsGetResponse = zApiResponseUnionSubscriptionWithPlanDaoNoneType;

export const zCreateSubscriptionApiUserSubscriptionsPostResponse = zApiResponseCheckoutSessionDao;

export const zGetUserSubscriptionsHistoryApiUserSubscriptionsHistoryGetResponse = zPaginatedApiResponseListSubscriptionWithPlanDao;

export const zUpgradeSubscriptionApiUserSubscriptionsSubscriptionIdUpgradePutResponse = zApiResponseSubscriptionWithPlanDao;

export const zCancelSubscriptionApiUserSubscriptionsSessionIdDeleteResponse = zApiResponseSubscriptionWithPlanDao;

export const zGetCheckoutSessionStatusApiUserSubscriptionsCheckoutSessionIdStatusGetResponse = zApiResponseCheckoutSessionStatusDao;

export const zPreviewSubscriptionUpgradeApiUserSubscriptionsSubscriptionIdUpgradePreviewNewPlanIdGetResponse = zApiResponseUpgradePreviewDao;

export const zListMyTicketsApiUserSupportTicketsGetResponse = zPaginatedApiResponseListSupportTicketDao;

export const zCreateTicketApiUserSupportTicketsPostResponse = zApiResponseSupportTicketDetailDao;

export const zDeleteTicketApiUserSupportTicketsTicketIdDeleteResponse = zApiResponseBool;

export const zGetTicketApiUserSupportTicketsTicketIdGetResponse = zApiResponseSupportTicketDetailDao;

export const zUpdateTicketApiUserSupportTicketsTicketIdPutResponse = zApiResponseSupportTicketDetailDao;

export const zGetUsersApiAdminUsersGetResponse = zPaginatedApiResponse;

export const zGetUserDetailsApiAdminUsersUserIdGetResponse = zApiResponse;

export const zUpdateUserApiAdminUsersUserIdPutResponse = zApiResponse;

export const zGetStorageSummaryApiAdminUsersStorageSummaryGetResponse = zApiResponse;

export const zGetUserSubscriptionsApiAdminUsersUserIdSubscriptionsGetResponse = zPaginatedApiResponse;

export const zListTicketsAdminApiAdminSupportTicketsGetResponse = zPaginatedApiResponseListAdminTicketDao;

export const zRespondTicketApiAdminSupportTicketsTicketIdResponsesPostResponse = zApiResponseAdminSupportResponseDao;

export const zGetTicketAdminApiAdminSupportTicketsTicketIdGetResponse = zApiResponseAdminTicketDetailDao;

export const zGetAllPlansApiAdminPricingPlansGetResponse = zPaginatedApiResponseListPricingAdminPlanDao;

export const zCreatePlanApiAdminPricingPlansPostResponse = zApiResponsePricingAdminPlanDao;

export const zDeletePlanApiAdminPricingPlansPlanIdDeleteResponse = zApiResponseBool;

export const zUpdatePlanApiAdminPricingPlansPlanIdPutResponse = zApiResponsePricingAdminPlanDao;