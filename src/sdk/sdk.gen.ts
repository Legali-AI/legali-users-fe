// This file is auto-generated by @hey-api/openapi-ts

import {
  type Client,
  type Options as ClientOptions,
  formDataBodySerializer,
  type TDataShape,
} from "@hey-api/client-axios";
import { client as _heyApiClient } from "./client.gen";
import type {
  CreatePlanApiPricingPlansPostData,
  CreatePlanApiPricingPlansPostError,
  CreatePlanApiPricingPlansPostResponse,
  DeleteDocumentApiDocumentsDocumentIdDeleteData,
  DeleteDocumentApiDocumentsDocumentIdDeleteError,
  DeleteDocumentApiDocumentsDocumentIdDeleteResponse,
  DeletePlanApiPricingPlansPlanIdDeleteData,
  DeletePlanApiPricingPlansPlanIdDeleteError,
  DeletePlanApiPricingPlansPlanIdDeleteResponse,
  DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetData,
  DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetError,
  DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetData,
  DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetError,
  GetAllCitiesApiLocationsCitiesGetData,
  GetAllCitiesApiLocationsCitiesGetError,
  GetAllCitiesApiLocationsCitiesGetResponse,
  GetAllCountriesApiLocationsCountriesGetData,
  GetAllCountriesApiLocationsCountriesGetError,
  GetAllCountriesApiLocationsCountriesGetResponse,
  GetAllPlansApiPricingPlansGetData,
  GetAllPlansApiPricingPlansGetError,
  GetAllPlansApiPricingPlansGetResponse,
  GetAllRegionsApiLocationsRegionsGetData,
  GetAllRegionsApiLocationsRegionsGetError,
  GetAllRegionsApiLocationsRegionsGetResponse,
  GetAllStatesApiLocationsStatesGetData,
  GetAllStatesApiLocationsStatesGetError,
  GetAllStatesApiLocationsStatesGetResponse,
  GetAllSubregionsApiLocationsSubregionsGetData,
  GetAllSubregionsApiLocationsSubregionsGetError,
  GetAllSubregionsApiLocationsSubregionsGetResponse,
  GetDocumentApiDocumentsDocumentIdGetData,
  GetDocumentApiDocumentsDocumentIdGetError,
  GetDocumentApiDocumentsDocumentIdGetResponse,
  GetLocationInfoApiLocationsInfoCityIdGetData,
  GetLocationInfoApiLocationsInfoCityIdGetError,
  GetLocationInfoApiLocationsInfoCityIdGetResponse,
  GetPlanApiPricingPlansPlanIdGetData,
  GetPlanApiPricingPlansPlanIdGetError,
  GetPlanApiPricingPlansPlanIdGetResponse,
  GetProfileApiAuthProfileGetData,
  GetProfileApiAuthProfileGetError,
  GetProfileApiAuthProfileGetResponse,
  GetStorageSummaryApiAdminStorageSummaryGetData,
  GetStorageSummaryApiAdminStorageSummaryGetError,
  GetStorageSummaryApiAdminStorageSummaryGetResponse,
  GetStorageSummaryApiPricingStorageSummaryGetData,
  GetStorageSummaryApiPricingStorageSummaryGetError,
  GetStorageSummaryApiPricingStorageSummaryGetResponse,
  GetUserDetailsApiAdminUsersUserIdGetData,
  GetUserDetailsApiAdminUsersUserIdGetError,
  GetUserDetailsApiAdminUsersUserIdGetResponse,
  GetUserStorageInfoApiDocumentsStorageInfoGetData,
  GetUserStorageInfoApiDocumentsStorageInfoGetError,
  GetUserStorageInfoApiDocumentsStorageInfoGetResponse,
  GetUserStorageInfoApiPricingUsersStorageGetData,
  GetUserStorageInfoApiPricingUsersStorageGetError,
  GetUserStorageInfoApiPricingUsersStorageGetResponse,
  GetUsersApiAdminUsersGetData,
  GetUsersApiAdminUsersGetError,
  GetUsersApiAdminUsersGetResponse,
  GoogleAuthUrlApiAuthGoogleUrlPostData,
  GoogleAuthUrlApiAuthGoogleUrlPostError,
  GoogleAuthUrlApiAuthGoogleUrlPostResponse,
  GoogleLoginApiAuthGoogleCallbackPostData,
  GoogleLoginApiAuthGoogleCallbackPostError,
  GoogleLoginApiAuthGoogleCallbackPostResponse,
  HealthCheckApiHealthGetData,
  HealthCheckApiHealthGetError,
  HealthCheckApiHealthGetResponse,
  ListDocumentsApiDocumentsGetData,
  ListDocumentsApiDocumentsGetError,
  ListDocumentsApiDocumentsGetResponse,
  LogoutApiAuthLogoutPostData,
  LogoutApiAuthLogoutPostError,
  LogoutApiAuthLogoutPostResponse,
  RefreshTokenApiAuthRefreshPostData,
  RefreshTokenApiAuthRefreshPostError,
  RefreshTokenApiAuthRefreshPostResponse,
  RootGetData,
  RootGetError,
  UpdatePlanApiPricingPlansPlanIdPutData,
  UpdatePlanApiPricingPlansPlanIdPutError,
  UpdatePlanApiPricingPlansPlanIdPutResponse,
  UpdateProfileApiAuthProfilePutData,
  UpdateProfileApiAuthProfilePutError,
  UpdateProfileApiAuthProfilePutResponse,
  UpdateUserApiAdminUsersUserIdPutData,
  UpdateUserApiAdminUsersUserIdPutError,
  UpdateUserApiAdminUsersUserIdPutResponse,
  UploadDocumentAltApiDocumentsPostData,
  UploadDocumentAltApiDocumentsPostError,
  UploadDocumentAltApiDocumentsPostResponse,
  UploadDocumentApiDocumentsUploadPostData,
  UploadDocumentApiDocumentsUploadPostError,
  UploadDocumentApiDocumentsUploadPostResponse,
} from "./types.gen";
import {
  zCreatePlanApiPricingPlansPostResponse,
  zDeleteDocumentApiDocumentsDocumentIdDeleteResponse,
  zDeletePlanApiPricingPlansPlanIdDeleteResponse,
  zGetAllCitiesApiLocationsCitiesGetResponse,
  zGetAllCountriesApiLocationsCountriesGetResponse,
  zGetAllPlansApiPricingPlansGetResponse,
  zGetAllRegionsApiLocationsRegionsGetResponse,
  zGetAllStatesApiLocationsStatesGetResponse,
  zGetAllSubregionsApiLocationsSubregionsGetResponse,
  zGetDocumentApiDocumentsDocumentIdGetResponse,
  zGetLocationInfoApiLocationsInfoCityIdGetResponse,
  zGetPlanApiPricingPlansPlanIdGetResponse,
  zGetProfileApiAuthProfileGetResponse,
  zGetStorageSummaryApiAdminStorageSummaryGetResponse,
  zGetStorageSummaryApiPricingStorageSummaryGetResponse,
  zGetUserDetailsApiAdminUsersUserIdGetResponse,
  zGetUserStorageInfoApiDocumentsStorageInfoGetResponse,
  zGetUserStorageInfoApiPricingUsersStorageGetResponse,
  zGetUsersApiAdminUsersGetResponse,
  zGoogleAuthUrlApiAuthGoogleUrlPostResponse,
  zGoogleLoginApiAuthGoogleCallbackPostResponse,
  zHealthCheckApiHealthGetResponse,
  zListDocumentsApiDocumentsGetResponse,
  zLogoutApiAuthLogoutPostResponse,
  zRefreshTokenApiAuthRefreshPostResponse,
  zUpdatePlanApiPricingPlansPlanIdPutResponse,
  zUpdateProfileApiAuthProfilePutResponse,
  zUpdateUserApiAdminUsersUserIdPutResponse,
  zUploadDocumentAltApiDocumentsPostResponse,
  zUploadDocumentApiDocumentsUploadPostResponse,
} from "./zod.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Root
 * Root endpoint
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    RootGetError,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};

/**
 * Get Users
 * Get paginated list of users with optional search and filters
 */
export const getUsersApiAdminUsersGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersApiAdminUsersGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUsersApiAdminUsersGetResponse,
    GetUsersApiAdminUsersGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetUsersApiAdminUsersGetResponse.parseAsync(data);
    },
    url: "/api/admin/users",
    ...options,
  });
};

/**
 * Get User Details
 * Get detailed information for a specific user
 */
export const getUserDetailsApiAdminUsersUserIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserDetailsApiAdminUsersUserIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserDetailsApiAdminUsersUserIdGetResponse,
    GetUserDetailsApiAdminUsersUserIdGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetUserDetailsApiAdminUsersUserIdGetResponse.parseAsync(
        data
      );
    },
    url: "/api/admin/users/{user_id}",
    ...options,
  });
};

/**
 * Update User
 * Update user data by admin
 */
export const updateUserApiAdminUsersUserIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateUserApiAdminUsersUserIdPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserApiAdminUsersUserIdPutResponse,
    UpdateUserApiAdminUsersUserIdPutError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zUpdateUserApiAdminUsersUserIdPutResponse.parseAsync(data);
    },
    url: "/api/admin/users/{user_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get Storage Summary
 * Get overall storage usage summary across all users
 */
export const getStorageSummaryApiAdminStorageSummaryGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetStorageSummaryApiAdminStorageSummaryGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStorageSummaryApiAdminStorageSummaryGetResponse,
    GetStorageSummaryApiAdminStorageSummaryGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetStorageSummaryApiAdminStorageSummaryGetResponse.parseAsync(
        data
      );
    },
    url: "/api/admin/storage/summary",
    ...options,
  });
};

/**
 * Google OAuth URL
 * Get Google OAuth authorization URL
 */
export const googleAuthUrlApiAuthGoogleUrlPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GoogleAuthUrlApiAuthGoogleUrlPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    GoogleAuthUrlApiAuthGoogleUrlPostResponse,
    GoogleAuthUrlApiAuthGoogleUrlPostError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGoogleAuthUrlApiAuthGoogleUrlPostResponse.parseAsync(data);
    },
    url: "/api/auth/google/url",
    ...options,
  });
};

/**
 * Google OAuth Login
 * Authenticate user with Google OAuth authorization code and return JWT tokens
 */
export const googleLoginApiAuthGoogleCallbackPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GoogleLoginApiAuthGoogleCallbackPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GoogleLoginApiAuthGoogleCallbackPostResponse,
    GoogleLoginApiAuthGoogleCallbackPostError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGoogleLoginApiAuthGoogleCallbackPostResponse.parseAsync(
        data
      );
    },
    url: "/api/auth/google/callback",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Refresh Access Token
 * Generate a new access token using a valid refresh token
 */
export const refreshTokenApiAuthRefreshPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RefreshTokenApiAuthRefreshPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RefreshTokenApiAuthRefreshPostResponse,
    RefreshTokenApiAuthRefreshPostError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zRefreshTokenApiAuthRefreshPostResponse.parseAsync(data);
    },
    url: "/api/auth/refresh",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * User Logout
 * Invalidate user's refresh token and log them out
 */
export const logoutApiAuthLogoutPost = <ThrowOnError extends boolean = false>(
  options: Options<LogoutApiAuthLogoutPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LogoutApiAuthLogoutPostResponse,
    LogoutApiAuthLogoutPostError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zLogoutApiAuthLogoutPostResponse.parseAsync(data);
    },
    url: "/api/auth/logout",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get profile
 * Get current user's profile
 */
export const getProfileApiAuthProfileGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetProfileApiAuthProfileGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetProfileApiAuthProfileGetResponse,
    GetProfileApiAuthProfileGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetProfileApiAuthProfileGetResponse.parseAsync(data);
    },
    url: "/api/auth/profile",
    ...options,
  });
};

/**
 * Update profile (Form Data)
 * Update current user's profile using form data (supports file uploads)
 */
export const updateProfileApiAuthProfilePut = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UpdateProfileApiAuthProfilePutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    UpdateProfileApiAuthProfilePutResponse,
    UpdateProfileApiAuthProfilePutError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseValidator: async (data) => {
      return await zUpdateProfileApiAuthProfilePutResponse.parseAsync(data);
    },
    url: "/api/auth/profile",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Upload document
 * Upload a document file using form data with key 'file'. Example: curl -X POST -F 'file=@document.pdf' /api/documents/upload
 */
export const uploadDocumentApiDocumentsUploadPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UploadDocumentApiDocumentsUploadPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadDocumentApiDocumentsUploadPostResponse,
    UploadDocumentApiDocumentsUploadPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseValidator: async (data) => {
      return await zUploadDocumentApiDocumentsUploadPostResponse.parseAsync(
        data
      );
    },
    url: "/api/documents/upload",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * List my documents
 */
export const listDocumentsApiDocumentsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListDocumentsApiDocumentsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListDocumentsApiDocumentsGetResponse,
    ListDocumentsApiDocumentsGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zListDocumentsApiDocumentsGetResponse.parseAsync(data);
    },
    url: "/api/documents/",
    ...options,
  });
};

/**
 * Upload document (alternative endpoint)
 * Upload a document file using form data with key 'file'. Example: curl -X POST -F 'file=@document.pdf' /api/documents/
 */
export const uploadDocumentAltApiDocumentsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UploadDocumentAltApiDocumentsPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UploadDocumentAltApiDocumentsPostResponse,
    UploadDocumentAltApiDocumentsPostError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    responseValidator: async (data) => {
      return await zUploadDocumentAltApiDocumentsPostResponse.parseAsync(data);
    },
    url: "/api/documents/",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

/**
 * Delete document
 */
export const deleteDocumentApiDocumentsDocumentIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDocumentApiDocumentsDocumentIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDocumentApiDocumentsDocumentIdDeleteResponse,
    DeleteDocumentApiDocumentsDocumentIdDeleteError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zDeleteDocumentApiDocumentsDocumentIdDeleteResponse.parseAsync(
        data
      );
    },
    url: "/api/documents/{document_id}",
    ...options,
  });
};

/**
 * Get document
 */
export const getDocumentApiDocumentsDocumentIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDocumentApiDocumentsDocumentIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDocumentApiDocumentsDocumentIdGetResponse,
    GetDocumentApiDocumentsDocumentIdGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetDocumentApiDocumentsDocumentIdGetResponse.parseAsync(
        data
      );
    },
    url: "/api/documents/{document_id}",
    ...options,
  });
};

/**
 * Download document (Public)
 * Download a document file by ID (Public access - no authentication required)
 */
export const downloadDocumentPublicApiDocumentsDocumentIdDownloadGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetError,
    ThrowOnError
  >({
    url: "/api/documents/{document_id}/download",
    ...options,
  });
};

/**
 * Download document (Secure)
 * Download a document file by ID (Requires authentication and ownership)
 */
export const downloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetError,
    ThrowOnError
  >({
    url: "/api/documents/{document_id}/download/secure",
    ...options,
  });
};

/**
 * Get user storage information
 * Get current storage usage and limits for the authenticated user
 */
export const getUserStorageInfoApiDocumentsStorageInfoGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetUserStorageInfoApiDocumentsStorageInfoGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserStorageInfoApiDocumentsStorageInfoGetResponse,
    GetUserStorageInfoApiDocumentsStorageInfoGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetUserStorageInfoApiDocumentsStorageInfoGetResponse.parseAsync(
        data
      );
    },
    url: "/api/documents/storage/info",
    ...options,
  });
};

/**
 * Health Check
 * Basic health check endpoint
 */
export const healthCheckApiHealthGet = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckApiHealthGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckApiHealthGetResponse,
    HealthCheckApiHealthGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zHealthCheckApiHealthGetResponse.parseAsync(data);
    },
    url: "/api/health/",
    ...options,
  });
};

/**
 * Get location info
 * Get detailed location information by city ID
 */
export const getLocationInfoApiLocationsInfoCityIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetLocationInfoApiLocationsInfoCityIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetLocationInfoApiLocationsInfoCityIdGetResponse,
    GetLocationInfoApiLocationsInfoCityIdGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetLocationInfoApiLocationsInfoCityIdGetResponse.parseAsync(
        data
      );
    },
    url: "/api/locations/info/{city_id}",
    ...options,
  });
};

/**
 * Get all regions
 * Get all regions with optional search and pagination
 */
export const getAllRegionsApiLocationsRegionsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllRegionsApiLocationsRegionsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllRegionsApiLocationsRegionsGetResponse,
    GetAllRegionsApiLocationsRegionsGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetAllRegionsApiLocationsRegionsGetResponse.parseAsync(
        data
      );
    },
    url: "/api/locations/regions",
    ...options,
  });
};

/**
 * Get all subregions
 * Get all subregions with optional region filter, search and pagination
 */
export const getAllSubregionsApiLocationsSubregionsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllSubregionsApiLocationsSubregionsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllSubregionsApiLocationsSubregionsGetResponse,
    GetAllSubregionsApiLocationsSubregionsGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetAllSubregionsApiLocationsSubregionsGetResponse.parseAsync(
        data
      );
    },
    url: "/api/locations/subregions",
    ...options,
  });
};

/**
 * Get all countries
 * Get all countries with optional region/subregion filter, search and pagination
 */
export const getAllCountriesApiLocationsCountriesGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllCountriesApiLocationsCountriesGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllCountriesApiLocationsCountriesGetResponse,
    GetAllCountriesApiLocationsCountriesGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetAllCountriesApiLocationsCountriesGetResponse.parseAsync(
        data
      );
    },
    url: "/api/locations/countries",
    ...options,
  });
};

/**
 * Get all states
 * Get all states with optional country filter, search and pagination
 */
export const getAllStatesApiLocationsStatesGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllStatesApiLocationsStatesGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllStatesApiLocationsStatesGetResponse,
    GetAllStatesApiLocationsStatesGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetAllStatesApiLocationsStatesGetResponse.parseAsync(data);
    },
    url: "/api/locations/states",
    ...options,
  });
};

/**
 * Get all cities
 * Get all cities with optional state/country filter, search and pagination
 */
export const getAllCitiesApiLocationsCitiesGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllCitiesApiLocationsCitiesGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllCitiesApiLocationsCitiesGetResponse,
    GetAllCitiesApiLocationsCitiesGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetAllCitiesApiLocationsCitiesGetResponse.parseAsync(data);
    },
    url: "/api/locations/cities",
    ...options,
  });
};

/**
 * Get all pricing plans
 * Get all pricing plans with optional active filter (Public endpoint)
 */
export const getAllPlansApiPricingPlansGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllPlansApiPricingPlansGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAllPlansApiPricingPlansGetResponse,
    GetAllPlansApiPricingPlansGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetAllPlansApiPricingPlansGetResponse.parseAsync(data);
    },
    url: "/api/pricing/plans",
    ...options,
  });
};

/**
 * Create pricing plan
 * Create a new pricing plan (Admin only)
 */
export const createPlanApiPricingPlansPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreatePlanApiPricingPlansPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePlanApiPricingPlansPostResponse,
    CreatePlanApiPricingPlansPostError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zCreatePlanApiPricingPlansPostResponse.parseAsync(data);
    },
    url: "/api/pricing/plans",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete pricing plan
 * Delete a pricing plan (Admin only)
 */
export const deletePlanApiPricingPlansPlanIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeletePlanApiPricingPlansPlanIdDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeletePlanApiPricingPlansPlanIdDeleteResponse,
    DeletePlanApiPricingPlansPlanIdDeleteError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zDeletePlanApiPricingPlansPlanIdDeleteResponse.parseAsync(
        data
      );
    },
    url: "/api/pricing/plans/{plan_id}",
    ...options,
  });
};

/**
 * Get pricing plan by ID
 * Get a specific pricing plan by ID (Public endpoint)
 */
export const getPlanApiPricingPlansPlanIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetPlanApiPricingPlansPlanIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPlanApiPricingPlansPlanIdGetResponse,
    GetPlanApiPricingPlansPlanIdGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetPlanApiPricingPlansPlanIdGetResponse.parseAsync(data);
    },
    url: "/api/pricing/plans/{plan_id}",
    ...options,
  });
};

/**
 * Update pricing plan
 * Update a pricing plan (Admin only)
 */
export const updatePlanApiPricingPlansPlanIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdatePlanApiPricingPlansPlanIdPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePlanApiPricingPlansPlanIdPutResponse,
    UpdatePlanApiPricingPlansPlanIdPutError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zUpdatePlanApiPricingPlansPlanIdPutResponse.parseAsync(data);
    },
    url: "/api/pricing/plans/{plan_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get user storage information
 * Get storage information for all users (Admin only)
 */
export const getUserStorageInfoApiPricingUsersStorageGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetUserStorageInfoApiPricingUsersStorageGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserStorageInfoApiPricingUsersStorageGetResponse,
    GetUserStorageInfoApiPricingUsersStorageGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetUserStorageInfoApiPricingUsersStorageGetResponse.parseAsync(
        data
      );
    },
    url: "/api/pricing/users/storage",
    ...options,
  });
};

/**
 * Get storage summary
 * Get storage usage summary for all users (Admin only)
 */
export const getStorageSummaryApiPricingStorageSummaryGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetStorageSummaryApiPricingStorageSummaryGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStorageSummaryApiPricingStorageSummaryGetResponse,
    GetStorageSummaryApiPricingStorageSummaryGetError,
    ThrowOnError
  >({
    responseValidator: async (data) => {
      return await zGetStorageSummaryApiPricingStorageSummaryGetResponse.parseAsync(
        data
      );
    },
    url: "/api/pricing/storage/summary",
    ...options,
  });
};
