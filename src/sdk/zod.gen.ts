// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zApiResponse = z.object({
  success: z.boolean(),
  data: z.union([z.unknown(), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zUserRole = z.enum(["user", "admin"]);

export const zUserDao = z.object({
  id: z.string(),
  email: z
    .string()
    .max(254)
    .regex(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/),
  first_name: z.string(),
  last_name: z.string(),
  profile_picture_url: z.union([z.string(), z.null()]).optional(),
  city_id: z.union([z.number().int(), z.null()]).optional(),
  override_plan_id: z.union([z.string(), z.null()]).optional(),
  role: zUserRole.optional(),
  is_active: z.boolean().optional().default(true),
});

export const zAuthTokenDao = z.object({
  access_token: z.string(),
  refresh_token: z.string(),
  expires_in: z.number().int(),
  user: zUserDao,
  is_new: z.boolean().optional().default(false),
});

export const zApiResponseAuthTokenDao = z.object({
  success: z.boolean(),
  data: z.union([zAuthTokenDao, z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zAuthUrlDao = z.object({
  url: z.string(),
});

export const zApiResponseAuthUrlDao = z.object({
  success: z.boolean(),
  data: z.union([zAuthUrlDao, z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zProcessingStatus = z.enum([
  "pending",
  "processing",
  "completed",
  "failed",
]);

export const zDocumentDao = z.object({
  document_id: z.string().uuid(),
  uploaded_by: z.string().uuid(),
  file_name: z.string(),
  file_path: z.string(),
  file_url: z.union([z.string(), z.null()]).optional(),
  mime_type: z.union([z.string(), z.null()]).optional(),
  file_size: z.union([z.number().int(), z.null()]).optional(),
  processing_status: zProcessingStatus,
  ai_summary: z.union([z.string(), z.null()]).optional(),
  metadata: z.union([z.object({}), z.null()]).optional(),
  uploaded_at: z.string().datetime(),
  processed_at: z.union([z.string().datetime(), z.null()]).optional(),
});

export const zApiResponseDocumentDao = z.object({
  success: z.boolean(),
  data: z.union([zDocumentDao, z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zCityDao = z.object({
  id: z.number().int(),
  name: z.string(),
  state_id: z.number().int(),
  country_id: z.number().int(),
  latitude: z.number(),
  longitude: z.number(),
});

export const zStateDao = z.object({
  id: z.number().int(),
  name: z.string(),
  country_id: z.number().int(),
  country_code: z.string(),
  latitude: z.union([z.number(), z.null()]).optional(),
  longitude: z.union([z.number(), z.null()]).optional(),
});

export const zCountryDao = z.object({
  id: z.number().int(),
  name: z.string(),
  region_id: z.union([z.number().int(), z.null()]).optional(),
  subregion_id: z.union([z.number().int(), z.null()]).optional(),
  latitude: z.union([z.number(), z.null()]).optional(),
  longitude: z.union([z.number(), z.null()]).optional(),
});

export const zRegionDao = z.object({
  id: z.number().int(),
  name: z.string(),
});

export const zSubregionDao = z.object({
  id: z.number().int(),
  name: z.string(),
  region_id: z.number().int(),
});

export const zLocationDao = z.object({
  city: z.union([zCityDao, z.null()]).optional(),
  state: z.union([zStateDao, z.null()]).optional(),
  country: z.union([zCountryDao, z.null()]).optional(),
  region: z.union([zRegionDao, z.null()]).optional(),
  subregion: z.union([zSubregionDao, z.null()]).optional(),
});

export const zApiResponseLocationDao = z.object({
  success: z.boolean(),
  data: z.union([zLocationDao, z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zPlanType = z.enum(["free", "premium"]);

export const zPricingPlanDao = z.object({
  plan_id: z.string().uuid(),
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
  type: zPlanType,
  price: z.string(),
  duration_days: z.number().int(),
  storage_gb: z.number().int(),
  token_count: z.number().int(),
  is_active: z.boolean(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
});

export const zApiResponsePricingPlanDao = z.object({
  success: z.boolean(),
  data: z.union([zPricingPlanDao, z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zStorageSummaryDao = z.object({
  total_users: z.number().int(),
  premium_users: z.number().int(),
  free_users: z.number().int(),
  total_storage_used_gb: z.number(),
  total_storage_limit_gb: z.number().int(),
  total_files: z.number().int(),
  average_storage_per_user_gb: z.number(),
  storage_utilization_percentage: z.number(),
});

export const zApiResponseStorageSummaryDao = z.object({
  success: z.boolean(),
  data: z.union([zStorageSummaryDao, z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zUserProfileDao = z.object({
  id: z.string(),
  email: z.string(),
  first_name: z.string(),
  last_name: z.string(),
  profile_picture_url: z.union([z.string(), z.null()]).optional(),
  city_id: z.union([z.number().int(), z.null()]).optional(),
  override_plan_id: z.union([z.string(), z.null()]).optional(),
  city_name: z.union([z.string(), z.null()]).optional(),
  state_name: z.union([z.string(), z.null()]).optional(),
  country_name: z.union([z.string(), z.null()]).optional(),
  role: zUserRole.optional(),
  is_active: z.boolean().optional().default(true),
});

export const zApiResponseUserProfileDao = z.object({
  success: z.boolean(),
  data: z.union([zUserProfileDao, z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zBackendModuleDocumentEntityDocumentDaoUserStorageInfoDao =
  z.object({
    user_id: z.string().uuid(),
    current_storage_bytes: z.number().int(),
    current_storage_mb: z.number(),
    current_storage_gb: z.number(),
    storage_limit_bytes: z.number().int(),
    storage_limit_mb: z.number(),
    storage_limit_gb: z.number(),
    file_count: z.number().int(),
    user_role: z.string(),
    bypass_plan: z.union([z.string(), z.null()]).optional(),
  });

export const zApiResponseUserStorageInfoDao = z.object({
  success: z.boolean(),
  data: z
    .union([
      zBackendModuleDocumentEntityDocumentDaoUserStorageInfoDao,
      z.null(),
    ])
    .optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zApiResponseBool = z.object({
  success: z.boolean(),
  data: z.union([z.boolean(), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zApiResponseDict = z.object({
  success: z.boolean(),
  data: z.union([z.object({}), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zApiResponseDictStrAny = z.object({
  success: z.boolean(),
  data: z.union([z.object({}), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
});

export const zFieldError = z.object({
  field: z.string(),
  message: z.string(),
  tag: z.string(),
});

export const zBadRequestResponse = z.object({
  success: z.boolean().optional().default(false),
  data: z.null().optional(),
  message: z.string().optional().default("Bad Request"),
  errors: z.union([z.array(zFieldError), z.null()]).optional(),
});

export const zBodyUpdateProfileApiAuthProfilePut = z.object({
  first_name: z.union([z.string(), z.null()]).optional(),
  last_name: z.union([z.string(), z.null()]).optional(),
  city_id: z.union([z.number().int(), z.null()]).optional(),
  profile_picture: z.union([z.string(), z.null()]).optional(),
});

export const zBodyUploadDocumentAltApiDocumentsPost = z.object({
  file: z.string(),
});

export const zBodyUploadDocumentApiDocumentsUploadPost = z.object({
  file: z.string(),
});

export const zErrorResponse = z.object({
  success: z.boolean(),
  data: z.null().optional(),
  message: z.union([z.string(), z.null()]).optional(),
  errors: z.union([z.array(zFieldError), z.null()]).optional(),
});

export const zForbiddenResponse = z.object({
  success: z.boolean().optional().default(false),
  data: z.null().optional(),
  message: z.string().optional().default("Forbidden"),
  errors: z.union([z.array(zFieldError), z.null()]).optional(),
});

export const zGoogleAuthRequest = z.object({
  code: z.string().min(10).max(500),
  state: z
    .union([
      z
        .string()
        .max(255)
        .regex(/^[a-zA-Z0-9._-]+$/),
      z.null(),
    ])
    .optional(),
});

export const zLogoutRequest = z.object({
  refresh_token: z
    .string()
    .min(20)
    .max(500)
    .regex(/^[A-Za-z0-9_-]+$/),
});

export const zNotFoundResponse = z.object({
  success: z.boolean().optional().default(false),
  data: z.null().optional(),
  message: z.string().optional().default("Resource not found"),
  errors: z.union([z.array(zFieldError), z.null()]).optional(),
});

export const zPaginationMetaModel = z.object({
  limit: z.number().int(),
  total: z.number().int(),
  totalPage: z.number().int(),
  currentPage: z.number().int(),
});

export const zPaginatedApiResponse = z.object({
  success: z.boolean(),
  data: z.union([z.unknown(), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPaginatedApiResponseListCityDao = z.object({
  success: z.boolean(),
  data: z.union([z.array(zCityDao), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPaginatedApiResponseListCountryDao = z.object({
  success: z.boolean(),
  data: z.union([z.array(zCountryDao), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPaginatedApiResponseListDocumentDao = z.object({
  success: z.boolean(),
  data: z.union([z.array(zDocumentDao), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPaginatedApiResponseListPricingPlanDao = z.object({
  success: z.boolean(),
  data: z.union([z.array(zPricingPlanDao), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPaginatedApiResponseListRegionDao = z.object({
  success: z.boolean(),
  data: z.union([z.array(zRegionDao), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPaginatedApiResponseListStateDao = z.object({
  success: z.boolean(),
  data: z.union([z.array(zStateDao), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPaginatedApiResponseListSubregionDao = z.object({
  success: z.boolean(),
  data: z.union([z.array(zSubregionDao), z.null()]).optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zBackendModulePricingEntityPricingDaoUserStorageInfoDao = z.object(
  {
    user_id: z.string().uuid(),
    email: z.string(),
    full_name: z.union([z.string(), z.null()]).optional(),
    account_status: z.string(),
    current_plan: z.union([z.string(), z.null()]).optional(),
    bypass_plan: z.union([z.string(), z.null()]).optional(),
    storage_used_gb: z.number(),
    storage_limit_gb: z.number().int(),
    file_count: z.number().int(),
    last_activity: z.union([z.string().datetime(), z.null()]).optional(),
  }
);

export const zPaginatedApiResponseListUserStorageInfoDao = z.object({
  success: z.boolean(),
  data: z
    .union([
      z.array(zBackendModulePricingEntityPricingDaoUserStorageInfoDao),
      z.null(),
    ])
    .optional(),
  message: z.union([z.string(), z.null()]).optional(),
  meta: z.union([zPaginationMetaModel, z.object({})]),
});

export const zPricingPlanCreateDao = z.object({
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
  type: zPlanType,
  price: z.union([z.number(), z.string()]),
  duration_days: z.number().int(),
  storage_gb: z.number().int(),
  token_count: z.number().int(),
  is_active: z.boolean().optional().default(true),
});

export const zPricingPlanUpdateDao = z.object({
  name: z.union([z.string(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  type: z.union([zPlanType, z.null()]).optional(),
  price: z.union([z.number(), z.string(), z.null()]).optional(),
  duration_days: z.union([z.number().int(), z.null()]).optional(),
  storage_gb: z.union([z.number().int(), z.null()]).optional(),
  token_count: z.union([z.number().int(), z.null()]).optional(),
  is_active: z.union([z.boolean(), z.null()]).optional(),
});

export const zRefreshTokenRequest = z.object({
  refresh_token: z
    .string()
    .min(20)
    .max(500)
    .regex(/^[A-Za-z0-9_-]+$/),
});

export const zUnauthorizedResponse = z.object({
  success: z.boolean().optional().default(false),
  data: z.null().optional(),
  message: z.string().optional().default("Unauthorized"),
  errors: z.union([z.array(zFieldError), z.null()]).optional(),
});

export const zUpdateUserRequest = z.object({
  first_name: z.union([z.string().max(100), z.null()]).optional(),
  last_name: z.union([z.string().max(100), z.null()]).optional(),
  email: z.union([z.string().max(255), z.null()]).optional(),
  city_id: z.union([z.string(), z.null()]).optional(),
  override_plan_id: z.union([z.string(), z.null()]).optional(),
  is_active: z.union([z.boolean(), z.null()]).optional(),
  role: z.union([z.string().max(50), z.null()]).optional(),
});

export const zGetUsersApiAdminUsersGetResponse = zPaginatedApiResponse;

export const zGetUserDetailsApiAdminUsersUserIdGetResponse = zApiResponse;

export const zUpdateUserApiAdminUsersUserIdPutResponse = zApiResponse;

export const zGetStorageSummaryApiAdminStorageSummaryGetResponse = zApiResponse;

export const zGoogleAuthUrlApiAuthGoogleUrlPostResponse =
  zApiResponseAuthUrlDao;

export const zGoogleLoginApiAuthGoogleCallbackPostResponse =
  zApiResponseAuthTokenDao;

export const zRefreshTokenApiAuthRefreshPostResponse = zApiResponseAuthTokenDao;

export const zLogoutApiAuthLogoutPostResponse = zApiResponseBool;

export const zGetProfileApiAuthProfileGetResponse = zApiResponseUserProfileDao;

export const zUpdateProfileApiAuthProfilePutResponse =
  zApiResponseUserProfileDao;

export const zUploadDocumentApiDocumentsUploadPostResponse =
  zApiResponseDocumentDao;

export const zListDocumentsApiDocumentsGetResponse =
  zPaginatedApiResponseListDocumentDao;

export const zUploadDocumentAltApiDocumentsPostResponse =
  zApiResponseDocumentDao;

export const zDeleteDocumentApiDocumentsDocumentIdDeleteResponse =
  zApiResponseBool;

export const zGetDocumentApiDocumentsDocumentIdGetResponse =
  zApiResponseDocumentDao;

export const zGetUserStorageInfoApiDocumentsStorageInfoGetResponse =
  zApiResponseUserStorageInfoDao;

export const zHealthCheckApiHealthGetResponse = zApiResponseDictStrAny;

export const zGetLocationInfoApiLocationsInfoCityIdGetResponse =
  zApiResponseLocationDao;

export const zGetAllRegionsApiLocationsRegionsGetResponse =
  zPaginatedApiResponseListRegionDao;

export const zGetAllSubregionsApiLocationsSubregionsGetResponse =
  zPaginatedApiResponseListSubregionDao;

export const zGetAllCountriesApiLocationsCountriesGetResponse =
  zPaginatedApiResponseListCountryDao;

export const zGetAllStatesApiLocationsStatesGetResponse =
  zPaginatedApiResponseListStateDao;

export const zGetAllCitiesApiLocationsCitiesGetResponse =
  zPaginatedApiResponseListCityDao;

export const zGetAllPlansApiPricingPlansGetResponse =
  zPaginatedApiResponseListPricingPlanDao;

export const zCreatePlanApiPricingPlansPostResponse =
  zApiResponsePricingPlanDao;

export const zDeletePlanApiPricingPlansPlanIdDeleteResponse = zApiResponseDict;

export const zGetPlanApiPricingPlansPlanIdGetResponse =
  zApiResponsePricingPlanDao;

export const zUpdatePlanApiPricingPlansPlanIdPutResponse =
  zApiResponsePricingPlanDao;

export const zGetUserStorageInfoApiPricingUsersStorageGetResponse =
  zPaginatedApiResponseListUserStorageInfoDao;

export const zGetStorageSummaryApiPricingStorageSummaryGetResponse =
  zApiResponseStorageSummaryDao;
