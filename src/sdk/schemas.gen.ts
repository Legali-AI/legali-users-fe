// This file is auto-generated by @hey-api/openapi-ts

export const ApiResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse",
} as const;

export const ApiResponse_AuthTokenDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/AuthTokenDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[AuthTokenDAO]",
} as const;

export const ApiResponse_AuthUrlDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/AuthUrlDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[AuthUrlDAO]",
} as const;

export const ApiResponse_DocumentDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/DocumentDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[DocumentDAO]",
} as const;

export const ApiResponse_LocationDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/LocationDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[LocationDAO]",
} as const;

export const ApiResponse_PricingPlanDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/PricingPlanDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[PricingPlanDAO]",
} as const;

export const ApiResponse_StorageSummaryDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/StorageSummaryDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[StorageSummaryDAO]",
} as const;

export const ApiResponse_UserProfileDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/UserProfileDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[UserProfileDAO]",
} as const;

export const ApiResponse_UserStorageInfoDAO_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          $ref: "#/components/schemas/backend__module__document__entity__document_dao__UserStorageInfoDAO",
        },
        {
          type: "null",
        },
      ],
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[UserStorageInfoDAO]",
} as const;

export const ApiResponse_bool_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[bool]",
} as const;

export const ApiResponse_dict_Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          additionalProperties: true,
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[dict]",
} as const;

export const ApiResponse_dict_str__Any__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          additionalProperties: true,
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
  },
  type: "object",
  required: ["success"],
  title: "ApiResponse[dict[str, Any]]",
} as const;

export const AuthTokenDAOSchema = {
  properties: {
    access_token: {
      type: "string",
      title: "Access Token",
      description: "JWT access token",
    },
    refresh_token: {
      type: "string",
      title: "Refresh Token",
      description: "JWT refresh token",
    },
    expires_in: {
      type: "integer",
      title: "Expires In",
      description: "Token expiration time in seconds",
    },
    user: {
      $ref: "#/components/schemas/UserDAO",
      description: "User information",
    },
    is_new: {
      type: "boolean",
      title: "Is New",
      description:
        "Whether the user was newly registered during this auth flow",
      default: false,
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["access_token", "refresh_token", "expires_in", "user"],
  title: "AuthTokenDAO",
  description: "Authentication token data access object",
} as const;

export const AuthUrlDAOSchema = {
  properties: {
    url: {
      type: "string",
      title: "Url",
      description: "Authorization URL",
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["url"],
  title: "AuthUrlDAO",
  description: "DAO for representing an authentication URL payload",
} as const;

export const BadRequestResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
      default: false,
    },
    data: {
      type: "null",
      title: "Data",
    },
    message: {
      type: "string",
      title: "Message",
      default: "Bad Request",
    },
    errors: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/FieldError",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Errors",
    },
  },
  type: "object",
  title: "BadRequestResponse",
  description: "Response model for 400 Bad Request errors",
} as const;

export const Body_update_profile_api_auth_profile_putSchema = {
  properties: {
    first_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
    },
    city_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "City Id",
    },
    profile_picture: {
      anyOf: [
        {
          type: "string",
          format: "binary",
        },
        {
          type: "null",
        },
      ],
      title: "Profile Picture",
    },
  },
  type: "object",
  title: "Body_update_profile_api_auth_profile_put",
} as const;

export const Body_upload_document_alt_api_documents__postSchema = {
  properties: {
    file: {
      type: "string",
      format: "binary",
      title: "File",
    },
  },
  type: "object",
  required: ["file"],
  title: "Body_upload_document_alt_api_documents__post",
} as const;

export const Body_upload_document_api_documents_upload_postSchema = {
  properties: {
    file: {
      type: "string",
      format: "binary",
      title: "File",
    },
  },
  type: "object",
  required: ["file"],
  title: "Body_upload_document_api_documents_upload_post",
} as const;

export const CityDAOSchema = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
      description: "City unique identifier",
    },
    name: {
      type: "string",
      title: "Name",
      description: "City name",
    },
    state_id: {
      type: "integer",
      title: "State Id",
      description: "State ID",
    },
    country_id: {
      type: "integer",
      title: "Country Id",
      description: "Country ID",
    },
    latitude: {
      type: "number",
      title: "Latitude",
      description: "City latitude",
    },
    longitude: {
      type: "number",
      title: "Longitude",
      description: "City longitude",
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["id", "name", "state_id", "country_id", "latitude", "longitude"],
  title: "CityDAO",
} as const;

export const CountryDAOSchema = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
      description: "Country unique identifier",
    },
    name: {
      type: "string",
      title: "Name",
      description: "Country name",
    },
    region_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Region Id",
      description: "Region ID",
    },
    subregion_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Subregion Id",
      description: "Subregion ID",
    },
    latitude: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Latitude",
      description: "Country latitude",
    },
    longitude: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Longitude",
      description: "Country longitude",
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["id", "name"],
  title: "CountryDAO",
} as const;

export const DocumentDAOSchema = {
  properties: {
    document_id: {
      type: "string",
      format: "uuid",
      title: "Document Id",
      description: "Document ID",
    },
    uploaded_by: {
      type: "string",
      format: "uuid",
      title: "Uploaded By",
      description: "Uploader user ID",
    },
    file_name: {
      type: "string",
      title: "File Name",
      description: "Original file name",
    },
    file_path: {
      type: "string",
      title: "File Path",
      description: "Storage file path",
    },
    file_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "File Url",
      description: "Public URL to access the file",
    },
    mime_type: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Mime Type",
      description: "File MIME type",
    },
    file_size: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "File Size",
      description: "File size in bytes",
    },
    processing_status: {
      $ref: "#/components/schemas/ProcessingStatus",
      description: "Processing status",
    },
    ai_summary: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Ai Summary",
      description: "AI generated summary",
    },
    metadata: {
      anyOf: [
        {
          additionalProperties: true,
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Metadata",
      description: "Additional metadata",
    },
    uploaded_at: {
      type: "string",
      format: "date-time",
      title: "Uploaded At",
      description: "Upload date",
    },
    processed_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Processed At",
      description: "Processing completion date",
    },
  },
  type: "object",
  required: [
    "document_id",
    "uploaded_by",
    "file_name",
    "file_path",
    "processing_status",
    "uploaded_at",
  ],
  title: "DocumentDAO",
  description: "Document data access object",
} as const;

export const ErrorResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      type: "null",
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    errors: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/FieldError",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Errors",
    },
  },
  type: "object",
  required: ["success"],
  title: "ErrorResponse",
} as const;

export const FieldErrorSchema = {
  properties: {
    field: {
      type: "string",
      title: "Field",
    },
    message: {
      type: "string",
      title: "Message",
    },
    tag: {
      type: "string",
      title: "Tag",
    },
  },
  type: "object",
  required: ["field", "message", "tag"],
  title: "FieldError",
} as const;

export const ForbiddenResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
      default: false,
    },
    data: {
      type: "null",
      title: "Data",
    },
    message: {
      type: "string",
      title: "Message",
      default: "Forbidden",
    },
    errors: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/FieldError",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Errors",
    },
  },
  type: "object",
  title: "ForbiddenResponse",
  description: "Response model for 403 Forbidden errors",
} as const;

export const GoogleAuthRequestSchema = {
  properties: {
    code: {
      type: "string",
      maxLength: 500,
      minLength: 10,
      title: "Code",
      description: "Google OAuth authorization code",
    },
    state: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          pattern: "^[a-zA-Z0-9._-]+$",
        },
        {
          type: "null",
        },
      ],
      title: "State",
      description: "State parameter for CSRF protection",
    },
  },
  type: "object",
  required: ["code"],
  title: "GoogleAuthRequest",
  description: "Google OAuth authentication request",
} as const;

export const LocationDAOSchema = {
  properties: {
    city: {
      anyOf: [
        {
          $ref: "#/components/schemas/CityDAO",
        },
        {
          type: "null",
        },
      ],
      description: "City information",
    },
    state: {
      anyOf: [
        {
          $ref: "#/components/schemas/StateDAO",
        },
        {
          type: "null",
        },
      ],
      description: "State information",
    },
    country: {
      anyOf: [
        {
          $ref: "#/components/schemas/CountryDAO",
        },
        {
          type: "null",
        },
      ],
      description: "Country information",
    },
    region: {
      anyOf: [
        {
          $ref: "#/components/schemas/RegionDAO",
        },
        {
          type: "null",
        },
      ],
      description: "Region information",
    },
    subregion: {
      anyOf: [
        {
          $ref: "#/components/schemas/SubregionDAO",
        },
        {
          type: "null",
        },
      ],
      description: "Subregion information",
    },
  },
  additionalProperties: false,
  type: "object",
  title: "LocationDAO",
} as const;

export const LogoutRequestSchema = {
  properties: {
    refresh_token: {
      type: "string",
      maxLength: 500,
      minLength: 20,
      pattern: "^[A-Za-z0-9_-]+$",
      title: "Refresh Token",
      description: "Refresh token to invalidate",
    },
  },
  type: "object",
  required: ["refresh_token"],
  title: "LogoutRequest",
  description: "User logout request",
} as const;

export const NotFoundResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
      default: false,
    },
    data: {
      type: "null",
      title: "Data",
    },
    message: {
      type: "string",
      title: "Message",
      default: "Resource not found",
    },
    errors: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/FieldError",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Errors",
    },
  },
  type: "object",
  title: "NotFoundResponse",
  description: "Response model for 404 Not Found errors",
} as const;

export const PaginatedApiResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse",
} as const;

export const PaginatedApiResponse_list_CityDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/CityDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[CityDAO]]",
} as const;

export const PaginatedApiResponse_list_CountryDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/CountryDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[CountryDAO]]",
} as const;

export const PaginatedApiResponse_list_DocumentDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/DocumentDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[DocumentDAO]]",
} as const;

export const PaginatedApiResponse_list_PricingPlanDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/PricingPlanDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[PricingPlanDAO]]",
} as const;

export const PaginatedApiResponse_list_RegionDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/RegionDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[RegionDAO]]",
} as const;

export const PaginatedApiResponse_list_StateDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/StateDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[StateDAO]]",
} as const;

export const PaginatedApiResponse_list_SubregionDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/SubregionDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[SubregionDAO]]",
} as const;

export const PaginatedApiResponse_list_UserStorageInfoDAO__Schema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
    },
    data: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/backend__module__pricing__entity__pricing_dao__UserStorageInfoDAO",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Data",
    },
    message: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Message",
    },
    meta: {
      anyOf: [
        {
          $ref: "#/components/schemas/PaginationMetaModel",
        },
        {
          additionalProperties: true,
          type: "object",
        },
      ],
      title: "Meta",
    },
  },
  type: "object",
  required: ["success", "meta"],
  title: "PaginatedApiResponse[list[UserStorageInfoDAO]]",
} as const;

export const PaginationMetaModelSchema = {
  properties: {
    limit: {
      type: "integer",
      title: "Limit",
    },
    total: {
      type: "integer",
      title: "Total",
    },
    totalPage: {
      type: "integer",
      title: "Totalpage",
    },
    currentPage: {
      type: "integer",
      title: "Currentpage",
    },
  },
  type: "object",
  required: ["limit", "total", "totalPage", "currentPage"],
  title: "PaginationMetaModel",
} as const;

export const PlanTypeSchema = {
  type: "string",
  enum: ["free", "premium"],
  title: "PlanType",
  description: "Plan type enumeration",
} as const;

export const PricingPlanCreateDAOSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
      description: "Plan name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
      description: "Plan description",
    },
    type: {
      $ref: "#/components/schemas/PlanType",
      description: "Plan type",
    },
    price: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "string",
        },
      ],
      title: "Price",
      description: "Plan price",
    },
    duration_days: {
      type: "integer",
      title: "Duration Days",
      description: "Duration in days",
    },
    storage_gb: {
      type: "integer",
      title: "Storage Gb",
      description: "Storage limit in GB",
    },
    token_count: {
      type: "integer",
      title: "Token Count",
      description: "Token count",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "Is plan active",
      default: true,
    },
  },
  type: "object",
  required: [
    "name",
    "type",
    "price",
    "duration_days",
    "storage_gb",
    "token_count",
  ],
  title: "PricingPlanCreateDAO",
  description: "Pricing plan creation data access object",
} as const;

export const PricingPlanDAOSchema = {
  properties: {
    plan_id: {
      type: "string",
      format: "uuid",
      title: "Plan Id",
      description: "Plan ID",
    },
    name: {
      type: "string",
      title: "Name",
      description: "Plan name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
      description: "Plan description",
    },
    type: {
      $ref: "#/components/schemas/PlanType",
      description: "Plan type",
    },
    price: {
      type: "string",
      title: "Price",
      description: "Plan price",
    },
    duration_days: {
      type: "integer",
      title: "Duration Days",
      description: "Duration in days",
    },
    storage_gb: {
      type: "integer",
      title: "Storage Gb",
      description: "Storage limit in GB",
    },
    token_count: {
      type: "integer",
      title: "Token Count",
      description: "Token count",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "Is plan active",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
      description: "Creation date",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
      description: "Last update date",
    },
  },
  type: "object",
  required: [
    "plan_id",
    "name",
    "type",
    "price",
    "duration_days",
    "storage_gb",
    "token_count",
    "is_active",
    "created_at",
    "updated_at",
  ],
  title: "PricingPlanDAO",
  description: "Pricing plan data access object",
} as const;

export const PricingPlanUpdateDAOSchema = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Name",
      description: "Plan name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
      description: "Plan description",
    },
    type: {
      anyOf: [
        {
          $ref: "#/components/schemas/PlanType",
        },
        {
          type: "null",
        },
      ],
      description: "Plan type",
    },
    price: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Price",
      description: "Plan price",
    },
    duration_days: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Duration Days",
      description: "Duration in days",
    },
    storage_gb: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Storage Gb",
      description: "Storage limit in GB",
    },
    token_count: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Token Count",
      description: "Token count",
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      description: "Is plan active",
    },
  },
  type: "object",
  title: "PricingPlanUpdateDAO",
  description: "Pricing plan update data access object",
} as const;

export const ProcessingStatusSchema = {
  type: "string",
  enum: ["pending", "processing", "completed", "failed"],
  title: "ProcessingStatus",
  description: "Document processing status enumeration",
} as const;

export const RefreshTokenRequestSchema = {
  properties: {
    refresh_token: {
      type: "string",
      maxLength: 500,
      minLength: 20,
      pattern: "^[A-Za-z0-9_-]+$",
      title: "Refresh Token",
      description: "Refresh token to generate new access token",
    },
  },
  type: "object",
  required: ["refresh_token"],
  title: "RefreshTokenRequest",
  description: "Token refresh request",
} as const;

export const RegionDAOSchema = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
      description: "Region unique identifier",
    },
    name: {
      type: "string",
      title: "Name",
      description: "Region name",
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["id", "name"],
  title: "RegionDAO",
} as const;

export const StateDAOSchema = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
      description: "State unique identifier",
    },
    name: {
      type: "string",
      title: "Name",
      description: "State name",
    },
    country_id: {
      type: "integer",
      title: "Country Id",
      description: "Country ID",
    },
    country_code: {
      type: "string",
      title: "Country Code",
      description: "Country code",
    },
    latitude: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Latitude",
      description: "State latitude",
    },
    longitude: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Longitude",
      description: "State longitude",
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["id", "name", "country_id", "country_code"],
  title: "StateDAO",
} as const;

export const StorageSummaryDAOSchema = {
  properties: {
    total_users: {
      type: "integer",
      title: "Total Users",
      description: "Total number of users",
    },
    premium_users: {
      type: "integer",
      title: "Premium Users",
      description: "Number of premium users",
    },
    free_users: {
      type: "integer",
      title: "Free Users",
      description: "Number of free users",
    },
    total_storage_used_gb: {
      type: "number",
      title: "Total Storage Used Gb",
      description: "Total storage used in GB",
    },
    total_storage_limit_gb: {
      type: "integer",
      title: "Total Storage Limit Gb",
      description: "Total storage limit in GB",
    },
    total_files: {
      type: "integer",
      title: "Total Files",
      description: "Total number of files",
    },
    average_storage_per_user_gb: {
      type: "number",
      title: "Average Storage Per User Gb",
      description: "Average storage per user in GB",
    },
    storage_utilization_percentage: {
      type: "number",
      title: "Storage Utilization Percentage",
      description: "Storage utilization percentage",
    },
  },
  type: "object",
  required: [
    "total_users",
    "premium_users",
    "free_users",
    "total_storage_used_gb",
    "total_storage_limit_gb",
    "total_files",
    "average_storage_per_user_gb",
    "storage_utilization_percentage",
  ],
  title: "StorageSummaryDAO",
  description: "Storage summary data access object",
} as const;

export const SubregionDAOSchema = {
  properties: {
    id: {
      type: "integer",
      title: "Id",
      description: "Subregion unique identifier",
    },
    name: {
      type: "string",
      title: "Name",
      description: "Subregion name",
    },
    region_id: {
      type: "integer",
      title: "Region Id",
      description: "Parent region ID",
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["id", "name", "region_id"],
  title: "SubregionDAO",
} as const;

export const UnauthorizedResponseSchema = {
  properties: {
    success: {
      type: "boolean",
      title: "Success",
      default: false,
    },
    data: {
      type: "null",
      title: "Data",
    },
    message: {
      type: "string",
      title: "Message",
      default: "Unauthorized",
    },
    errors: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/FieldError",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Errors",
    },
  },
  type: "object",
  title: "UnauthorizedResponse",
  description: "Response model for 401 Unauthorized errors",
} as const;

export const UpdateUserRequestSchema = {
  properties: {
    first_name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
      description: "User's first name",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
      description: "User's last name",
    },
    email: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
        },
        {
          type: "null",
        },
      ],
      title: "Email",
      description: "User's email",
    },
    city_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "City Id",
      description: "User's city ID",
    },
    override_plan_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Override Plan Id",
      description: "Override plan ID for premium features",
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      description: "User's active status",
    },
    role: {
      anyOf: [
        {
          type: "string",
          maxLength: 50,
        },
        {
          type: "null",
        },
      ],
      title: "Role",
      description: "User's role",
    },
  },
  type: "object",
  title: "UpdateUserRequest",
  description: "Request DTO for admin to update user data",
} as const;

export const UserDAOSchema = {
  properties: {
    id: {
      type: "string",
      title: "Id",
      description: "User unique identifier",
    },
    email: {
      type: "string",
      maxLength: 254,
      pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
      title: "Email",
      description: "User email address",
    },
    first_name: {
      type: "string",
      title: "First Name",
      description: "User first name",
    },
    last_name: {
      type: "string",
      title: "Last Name",
      description: "User last name",
    },
    profile_picture_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Profile Picture Url",
      description: "Profile picture URL",
    },
    city_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "City Id",
      description: "User city ID",
    },
    override_plan_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Override Plan Id",
      description: "User override pricing plan ID",
    },
    role: {
      $ref: "#/components/schemas/UserRole",
      description: "User role",
      default: "user",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "User active status",
      default: true,
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["id", "email", "first_name", "last_name"],
  title: "UserDAO",
  description: "User data access object",
} as const;

export const UserProfileDAOSchema = {
  properties: {
    id: {
      type: "string",
      title: "Id",
      description: "User unique identifier",
    },
    email: {
      type: "string",
      title: "Email",
      description: "User email address",
    },
    first_name: {
      type: "string",
      title: "First Name",
      description: "User first name",
    },
    last_name: {
      type: "string",
      title: "Last Name",
      description: "User last name",
    },
    profile_picture_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Profile Picture Url",
      description: "Profile picture URL",
    },
    city_id: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "City Id",
      description: "User city ID",
    },
    override_plan_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Override Plan Id",
      description: "User override pricing plan ID",
    },
    city_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "City Name",
      description: "User city name",
    },
    state_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "State Name",
      description: "User state name",
    },
    country_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Country Name",
      description: "User country name",
    },
    role: {
      $ref: "#/components/schemas/UserRole",
      description: "User role",
      default: "user",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      description: "User active status",
      default: true,
    },
  },
  additionalProperties: false,
  type: "object",
  required: ["id", "email", "first_name", "last_name"],
  title: "UserProfileDAO",
  description:
    "Enriched user profile data access object with location information",
} as const;

export const UserRoleSchema = {
  type: "string",
  enum: ["user", "admin"],
  title: "UserRole",
  description: "User roles for system access control",
} as const;

export const backend__module__document__entity__document_dao__UserStorageInfoDAOSchema =
  {
    properties: {
      user_id: {
        type: "string",
        format: "uuid",
        title: "User Id",
        description: "User ID",
      },
      current_storage_bytes: {
        type: "integer",
        title: "Current Storage Bytes",
        description: "Current storage used in bytes",
      },
      current_storage_mb: {
        type: "number",
        title: "Current Storage Mb",
        description: "Current storage used in MB",
      },
      current_storage_gb: {
        type: "number",
        title: "Current Storage Gb",
        description: "Current storage used in GB",
      },
      storage_limit_bytes: {
        type: "integer",
        title: "Storage Limit Bytes",
        description: "Storage limit in bytes",
      },
      storage_limit_mb: {
        type: "number",
        title: "Storage Limit Mb",
        description: "Storage limit in MB",
      },
      storage_limit_gb: {
        type: "number",
        title: "Storage Limit Gb",
        description: "Storage limit in GB",
      },
      file_count: {
        type: "integer",
        title: "File Count",
        description: "Number of files",
      },
      user_role: {
        type: "string",
        title: "User Role",
        description: "User role (user/premium/admin)",
      },
      bypass_plan: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "null",
          },
        ],
        title: "Bypass Plan",
        description: "Bypass plan name if any",
      },
    },
    type: "object",
    required: [
      "user_id",
      "current_storage_bytes",
      "current_storage_mb",
      "current_storage_gb",
      "storage_limit_bytes",
      "storage_limit_mb",
      "storage_limit_gb",
      "file_count",
      "user_role",
    ],
    title: "UserStorageInfoDAO",
    description: "User storage information data access object",
  } as const;

export const backend__module__pricing__entity__pricing_dao__UserStorageInfoDAOSchema =
  {
    properties: {
      user_id: {
        type: "string",
        format: "uuid",
        title: "User Id",
        description: "User ID",
      },
      email: {
        type: "string",
        title: "Email",
        description: "User email",
      },
      full_name: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "null",
          },
        ],
        title: "Full Name",
        description: "User full name",
      },
      account_status: {
        type: "string",
        title: "Account Status",
        description: "Account status (premium/free)",
      },
      current_plan: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "null",
          },
        ],
        title: "Current Plan",
        description: "Current pricing plan name",
      },
      bypass_plan: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "null",
          },
        ],
        title: "Bypass Plan",
        description: "Bypass plan name if any",
      },
      storage_used_gb: {
        type: "number",
        title: "Storage Used Gb",
        description: "Storage used in GB",
      },
      storage_limit_gb: {
        type: "integer",
        title: "Storage Limit Gb",
        description: "Storage limit in GB",
      },
      file_count: {
        type: "integer",
        title: "File Count",
        description: "Number of files",
      },
      last_activity: {
        anyOf: [
          {
            type: "string",
            format: "date-time",
          },
          {
            type: "null",
          },
        ],
        title: "Last Activity",
        description: "Last activity date",
      },
    },
    type: "object",
    required: [
      "user_id",
      "email",
      "account_status",
      "storage_used_gb",
      "storage_limit_gb",
      "file_count",
    ],
    title: "UserStorageInfoDAO",
    description: "User storage information data access object",
  } as const;
