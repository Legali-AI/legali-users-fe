// This file is auto-generated by @hey-api/openapi-ts

export type ApiResponse = {
  success: boolean;
  data?: unknown | null;
  message?: string | null;
};

export type ApiResponseAuthTokenDao = {
  success: boolean;
  data?: AuthTokenDao | null;
  message?: string | null;
};

export type ApiResponseAuthUrlDao = {
  success: boolean;
  data?: AuthUrlDao | null;
  message?: string | null;
};

export type ApiResponseDocumentDao = {
  success: boolean;
  data?: DocumentDao | null;
  message?: string | null;
};

export type ApiResponseLocationDao = {
  success: boolean;
  data?: LocationDao | null;
  message?: string | null;
};

export type ApiResponsePricingPlanDao = {
  success: boolean;
  data?: PricingPlanDao | null;
  message?: string | null;
};

export type ApiResponseStorageSummaryDao = {
  success: boolean;
  data?: StorageSummaryDao | null;
  message?: string | null;
};

export type ApiResponseUserProfileDao = {
  success: boolean;
  data?: UserProfileDao | null;
  message?: string | null;
};

export type ApiResponseUserStorageInfoDao = {
  success: boolean;
  data?: BackendModuleDocumentEntityDocumentDaoUserStorageInfoDao | null;
  message?: string | null;
};

export type ApiResponseBool = {
  success: boolean;
  data?: boolean | null;
  message?: string | null;
};

export type ApiResponseDict = {
  success: boolean;
  data?: {
    [key: string]: unknown;
  } | null;
  message?: string | null;
};

export type ApiResponseDictStrAny = {
  success: boolean;
  data?: {
    [key: string]: unknown;
  } | null;
  message?: string | null;
};

/**
 * Authentication token data access object
 */
export type AuthTokenDao = {
  /**
   * JWT access token
   */
  access_token: string;
  /**
   * JWT refresh token
   */
  refresh_token: string;
  /**
   * Token expiration time in seconds
   */
  expires_in: number;
  /**
   * User information
   */
  user: UserDao;
  /**
   * Whether the user was newly registered during this auth flow
   */
  is_new?: boolean;
};

/**
 * DAO for representing an authentication URL payload
 */
export type AuthUrlDao = {
  /**
   * Authorization URL
   */
  url: string;
};

/**
 * Response model for 400 Bad Request errors
 */
export type BadRequestResponse = {
  success?: boolean;
  data?: null;
  message?: string;
  errors?: Array<FieldError> | null;
};

export type BodyUpdateProfileApiAuthProfilePut = {
  first_name?: string | null;
  last_name?: string | null;
  city_id?: number | null;
  profile_picture?: (Blob | File) | null;
};

export type BodyUploadDocumentAltApiDocumentsPost = {
  file: Blob | File;
};

export type BodyUploadDocumentApiDocumentsUploadPost = {
  file: Blob | File;
};

export type CityDao = {
  /**
   * City unique identifier
   */
  id: number;
  /**
   * City name
   */
  name: string;
  /**
   * State ID
   */
  state_id: number;
  /**
   * Country ID
   */
  country_id: number;
  /**
   * City latitude
   */
  latitude: number;
  /**
   * City longitude
   */
  longitude: number;
};

export type CountryDao = {
  /**
   * Country unique identifier
   */
  id: number;
  /**
   * Country name
   */
  name: string;
  /**
   * Region ID
   */
  region_id?: number | null;
  /**
   * Subregion ID
   */
  subregion_id?: number | null;
  /**
   * Country latitude
   */
  latitude?: number | null;
  /**
   * Country longitude
   */
  longitude?: number | null;
};

/**
 * Document data access object
 */
export type DocumentDao = {
  /**
   * Document ID
   */
  document_id: string;
  /**
   * Uploader user ID
   */
  uploaded_by: string;
  /**
   * Original file name
   */
  file_name: string;
  /**
   * Storage file path
   */
  file_path: string;
  /**
   * Public URL to access the file
   */
  file_url?: string | null;
  /**
   * File MIME type
   */
  mime_type?: string | null;
  /**
   * File size in bytes
   */
  file_size?: number | null;
  /**
   * Processing status
   */
  processing_status: ProcessingStatus;
  /**
   * AI generated summary
   */
  ai_summary?: string | null;
  /**
   * Additional metadata
   */
  metadata?: {
    [key: string]: unknown;
  } | null;
  /**
   * Upload date
   */
  uploaded_at: string;
  /**
   * Processing completion date
   */
  processed_at?: string | null;
};

export type ErrorResponse = {
  success: boolean;
  data?: null;
  message?: string | null;
  errors?: Array<FieldError> | null;
};

export type FieldError = {
  field: string;
  message: string;
  tag: string;
};

/**
 * Response model for 403 Forbidden errors
 */
export type ForbiddenResponse = {
  success?: boolean;
  data?: null;
  message?: string;
  errors?: Array<FieldError> | null;
};

/**
 * Google OAuth authentication request
 */
export type GoogleAuthRequest = {
  /**
   * Google OAuth authorization code
   */
  code: string;
  /**
   * State parameter for CSRF protection
   */
  state?: string | null;
};

export type LocationDao = {
  /**
   * City information
   */
  city?: CityDao | null;
  /**
   * State information
   */
  state?: StateDao | null;
  /**
   * Country information
   */
  country?: CountryDao | null;
  /**
   * Region information
   */
  region?: RegionDao | null;
  /**
   * Subregion information
   */
  subregion?: SubregionDao | null;
};

/**
 * User logout request
 */
export type LogoutRequest = {
  /**
   * Refresh token to invalidate
   */
  refresh_token: string;
};

/**
 * Response model for 404 Not Found errors
 */
export type NotFoundResponse = {
  success?: boolean;
  data?: null;
  message?: string;
  errors?: Array<FieldError> | null;
};

export type PaginatedApiResponse = {
  success: boolean;
  data?: unknown | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListCityDao = {
  success: boolean;
  data?: Array<CityDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListCountryDao = {
  success: boolean;
  data?: Array<CountryDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListDocumentDao = {
  success: boolean;
  data?: Array<DocumentDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListPricingPlanDao = {
  success: boolean;
  data?: Array<PricingPlanDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListRegionDao = {
  success: boolean;
  data?: Array<RegionDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListStateDao = {
  success: boolean;
  data?: Array<StateDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListSubregionDao = {
  success: boolean;
  data?: Array<SubregionDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginatedApiResponseListUserStorageInfoDao = {
  success: boolean;
  data?: Array<BackendModulePricingEntityPricingDaoUserStorageInfoDao> | null;
  message?: string | null;
  meta:
    | PaginationMetaModel
    | {
        [key: string]: unknown;
      };
};

export type PaginationMetaModel = {
  limit: number;
  total: number;
  totalPage: number;
  currentPage: number;
};

/**
 * Plan type enumeration
 */
export enum PlanType {
  FREE = "free",
  PREMIUM = "premium",
}

/**
 * Pricing plan creation data access object
 */
export type PricingPlanCreateDao = {
  /**
   * Plan name
   */
  name: string;
  /**
   * Plan description
   */
  description?: string | null;
  /**
   * Plan type
   */
  type: PlanType;
  /**
   * Plan price
   */
  price: number | string;
  /**
   * Duration in days
   */
  duration_days: number;
  /**
   * Storage limit in GB
   */
  storage_gb: number;
  /**
   * Token count
   */
  token_count: number;
  /**
   * Is plan active
   */
  is_active?: boolean;
};

/**
 * Pricing plan data access object
 */
export type PricingPlanDao = {
  /**
   * Plan ID
   */
  plan_id: string;
  /**
   * Plan name
   */
  name: string;
  /**
   * Plan description
   */
  description?: string | null;
  /**
   * Plan type
   */
  type: PlanType;
  /**
   * Plan price
   */
  price: string;
  /**
   * Duration in days
   */
  duration_days: number;
  /**
   * Storage limit in GB
   */
  storage_gb: number;
  /**
   * Token count
   */
  token_count: number;
  /**
   * Is plan active
   */
  is_active: boolean;
  /**
   * Creation date
   */
  created_at: string;
  /**
   * Last update date
   */
  updated_at: string;
};

/**
 * Pricing plan update data access object
 */
export type PricingPlanUpdateDao = {
  /**
   * Plan name
   */
  name?: string | null;
  /**
   * Plan description
   */
  description?: string | null;
  /**
   * Plan type
   */
  type?: PlanType | null;
  /**
   * Plan price
   */
  price?: number | string | null;
  /**
   * Duration in days
   */
  duration_days?: number | null;
  /**
   * Storage limit in GB
   */
  storage_gb?: number | null;
  /**
   * Token count
   */
  token_count?: number | null;
  /**
   * Is plan active
   */
  is_active?: boolean | null;
};

/**
 * Document processing status enumeration
 */
export enum ProcessingStatus {
  PENDING = "pending",
  PROCESSING = "processing",
  COMPLETED = "completed",
  FAILED = "failed",
}

/**
 * Token refresh request
 */
export type RefreshTokenRequest = {
  /**
   * Refresh token to generate new access token
   */
  refresh_token: string;
};

export type RegionDao = {
  /**
   * Region unique identifier
   */
  id: number;
  /**
   * Region name
   */
  name: string;
};

export type StateDao = {
  /**
   * State unique identifier
   */
  id: number;
  /**
   * State name
   */
  name: string;
  /**
   * Country ID
   */
  country_id: number;
  /**
   * Country code
   */
  country_code: string;
  /**
   * State latitude
   */
  latitude?: number | null;
  /**
   * State longitude
   */
  longitude?: number | null;
};

/**
 * Storage summary data access object
 */
export type StorageSummaryDao = {
  /**
   * Total number of users
   */
  total_users: number;
  /**
   * Number of premium users
   */
  premium_users: number;
  /**
   * Number of free users
   */
  free_users: number;
  /**
   * Total storage used in GB
   */
  total_storage_used_gb: number;
  /**
   * Total storage limit in GB
   */
  total_storage_limit_gb: number;
  /**
   * Total number of files
   */
  total_files: number;
  /**
   * Average storage per user in GB
   */
  average_storage_per_user_gb: number;
  /**
   * Storage utilization percentage
   */
  storage_utilization_percentage: number;
};

export type SubregionDao = {
  /**
   * Subregion unique identifier
   */
  id: number;
  /**
   * Subregion name
   */
  name: string;
  /**
   * Parent region ID
   */
  region_id: number;
};

/**
 * Response model for 401 Unauthorized errors
 */
export type UnauthorizedResponse = {
  success?: boolean;
  data?: null;
  message?: string;
  errors?: Array<FieldError> | null;
};

/**
 * Request DTO for admin to update user data
 */
export type UpdateUserRequest = {
  /**
   * User's first name
   */
  first_name?: string | null;
  /**
   * User's last name
   */
  last_name?: string | null;
  /**
   * User's email
   */
  email?: string | null;
  /**
   * User's city ID
   */
  city_id?: string | null;
  /**
   * Override plan ID for premium features
   */
  override_plan_id?: string | null;
  /**
   * User's active status
   */
  is_active?: boolean | null;
  /**
   * User's role
   */
  role?: string | null;
};

/**
 * User data access object
 */
export type UserDao = {
  /**
   * User unique identifier
   */
  id: string;
  /**
   * User email address
   */
  email: string;
  /**
   * User first name
   */
  first_name: string;
  /**
   * User last name
   */
  last_name: string;
  /**
   * Profile picture URL
   */
  profile_picture_url?: string | null;
  /**
   * User city ID
   */
  city_id?: number | null;
  /**
   * User override pricing plan ID
   */
  override_plan_id?: string | null;
  /**
   * User role
   */
  role?: UserRole;
  /**
   * User active status
   */
  is_active?: boolean;
};

/**
 * Enriched user profile data access object with location information
 */
export type UserProfileDao = {
  /**
   * User unique identifier
   */
  id: string;
  /**
   * User email address
   */
  email: string;
  /**
   * User first name
   */
  first_name: string;
  /**
   * User last name
   */
  last_name: string;
  /**
   * Profile picture URL
   */
  profile_picture_url?: string | null;
  /**
   * User city ID
   */
  city_id?: number | null;
  /**
   * User override pricing plan ID
   */
  override_plan_id?: string | null;
  /**
   * User city name
   */
  city_name?: string | null;
  /**
   * User state name
   */
  state_name?: string | null;
  /**
   * User country name
   */
  country_name?: string | null;
  /**
   * User role
   */
  role?: UserRole;
  /**
   * User active status
   */
  is_active?: boolean;
};

/**
 * User roles for system access control
 */
export enum UserRole {
  USER = "user",
  ADMIN = "admin",
}

/**
 * User storage information data access object
 */
export type BackendModuleDocumentEntityDocumentDaoUserStorageInfoDao = {
  /**
   * User ID
   */
  user_id: string;
  /**
   * Current storage used in bytes
   */
  current_storage_bytes: number;
  /**
   * Current storage used in MB
   */
  current_storage_mb: number;
  /**
   * Current storage used in GB
   */
  current_storage_gb: number;
  /**
   * Storage limit in bytes
   */
  storage_limit_bytes: number;
  /**
   * Storage limit in MB
   */
  storage_limit_mb: number;
  /**
   * Storage limit in GB
   */
  storage_limit_gb: number;
  /**
   * Number of files
   */
  file_count: number;
  /**
   * User role (user/premium/admin)
   */
  user_role: string;
  /**
   * Bypass plan name if any
   */
  bypass_plan?: string | null;
};

/**
 * User storage information data access object
 */
export type BackendModulePricingEntityPricingDaoUserStorageInfoDao = {
  /**
   * User ID
   */
  user_id: string;
  /**
   * User email
   */
  email: string;
  /**
   * User full name
   */
  full_name?: string | null;
  /**
   * Account status (premium/free)
   */
  account_status: string;
  /**
   * Current pricing plan name
   */
  current_plan?: string | null;
  /**
   * Bypass plan name if any
   */
  bypass_plan?: string | null;
  /**
   * Storage used in GB
   */
  storage_used_gb: number;
  /**
   * Storage limit in GB
   */
  storage_limit_gb: number;
  /**
   * Number of files
   */
  file_count: number;
  /**
   * Last activity date
   */
  last_activity?: string | null;
};

export type RootGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/";
};

export type RootGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RootGetError = RootGetErrors[keyof RootGetErrors];

export type RootGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type GetUsersApiAdminUsersGetData = {
  body?: never;
  path?: never;
  query?: {
    search?: string | null;
    is_active?: boolean | null;
    limit?: number;
    offset?: number;
  };
  url: "/api/admin/users";
};

export type GetUsersApiAdminUsersGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetUsersApiAdminUsersGetError =
  GetUsersApiAdminUsersGetErrors[keyof GetUsersApiAdminUsersGetErrors];

export type GetUsersApiAdminUsersGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponse;
};

export type GetUsersApiAdminUsersGetResponse =
  GetUsersApiAdminUsersGetResponses[keyof GetUsersApiAdminUsersGetResponses];

export type GetUserDetailsApiAdminUsersUserIdGetData = {
  body?: never;
  path: {
    user_id: string;
  };
  query?: never;
  url: "/api/admin/users/{user_id}";
};

export type GetUserDetailsApiAdminUsersUserIdGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetUserDetailsApiAdminUsersUserIdGetError =
  GetUserDetailsApiAdminUsersUserIdGetErrors[keyof GetUserDetailsApiAdminUsersUserIdGetErrors];

export type GetUserDetailsApiAdminUsersUserIdGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponse;
};

export type GetUserDetailsApiAdminUsersUserIdGetResponse =
  GetUserDetailsApiAdminUsersUserIdGetResponses[keyof GetUserDetailsApiAdminUsersUserIdGetResponses];

export type UpdateUserApiAdminUsersUserIdPutData = {
  body: UpdateUserRequest;
  path: {
    user_id: string;
  };
  query?: never;
  url: "/api/admin/users/{user_id}";
};

export type UpdateUserApiAdminUsersUserIdPutErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateUserApiAdminUsersUserIdPutError =
  UpdateUserApiAdminUsersUserIdPutErrors[keyof UpdateUserApiAdminUsersUserIdPutErrors];

export type UpdateUserApiAdminUsersUserIdPutResponses = {
  /**
   * Successful Response
   */
  200: ApiResponse;
};

export type UpdateUserApiAdminUsersUserIdPutResponse =
  UpdateUserApiAdminUsersUserIdPutResponses[keyof UpdateUserApiAdminUsersUserIdPutResponses];

export type GetStorageSummaryApiAdminStorageSummaryGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/admin/storage/summary";
};

export type GetStorageSummaryApiAdminStorageSummaryGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetStorageSummaryApiAdminStorageSummaryGetError =
  GetStorageSummaryApiAdminStorageSummaryGetErrors[keyof GetStorageSummaryApiAdminStorageSummaryGetErrors];

export type GetStorageSummaryApiAdminStorageSummaryGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponse;
};

export type GetStorageSummaryApiAdminStorageSummaryGetResponse =
  GetStorageSummaryApiAdminStorageSummaryGetResponses[keyof GetStorageSummaryApiAdminStorageSummaryGetResponses];

export type GoogleAuthUrlApiAuthGoogleUrlPostData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/google/url";
};

export type GoogleAuthUrlApiAuthGoogleUrlPostErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GoogleAuthUrlApiAuthGoogleUrlPostError =
  GoogleAuthUrlApiAuthGoogleUrlPostErrors[keyof GoogleAuthUrlApiAuthGoogleUrlPostErrors];

export type GoogleAuthUrlApiAuthGoogleUrlPostResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseAuthUrlDao;
};

export type GoogleAuthUrlApiAuthGoogleUrlPostResponse =
  GoogleAuthUrlApiAuthGoogleUrlPostResponses[keyof GoogleAuthUrlApiAuthGoogleUrlPostResponses];

export type GoogleLoginApiAuthGoogleCallbackPostData = {
  body: GoogleAuthRequest;
  path?: never;
  query?: never;
  url: "/api/auth/google/callback";
};

export type GoogleLoginApiAuthGoogleCallbackPostErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GoogleLoginApiAuthGoogleCallbackPostError =
  GoogleLoginApiAuthGoogleCallbackPostErrors[keyof GoogleLoginApiAuthGoogleCallbackPostErrors];

export type GoogleLoginApiAuthGoogleCallbackPostResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseAuthTokenDao;
};

export type GoogleLoginApiAuthGoogleCallbackPostResponse =
  GoogleLoginApiAuthGoogleCallbackPostResponses[keyof GoogleLoginApiAuthGoogleCallbackPostResponses];

export type RefreshTokenApiAuthRefreshPostData = {
  body: RefreshTokenRequest;
  path?: never;
  query?: never;
  url: "/api/auth/refresh";
};

export type RefreshTokenApiAuthRefreshPostErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type RefreshTokenApiAuthRefreshPostError =
  RefreshTokenApiAuthRefreshPostErrors[keyof RefreshTokenApiAuthRefreshPostErrors];

export type RefreshTokenApiAuthRefreshPostResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseAuthTokenDao;
};

export type RefreshTokenApiAuthRefreshPostResponse =
  RefreshTokenApiAuthRefreshPostResponses[keyof RefreshTokenApiAuthRefreshPostResponses];

export type LogoutApiAuthLogoutPostData = {
  body: LogoutRequest;
  path?: never;
  query?: never;
  url: "/api/auth/logout";
};

export type LogoutApiAuthLogoutPostErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type LogoutApiAuthLogoutPostError =
  LogoutApiAuthLogoutPostErrors[keyof LogoutApiAuthLogoutPostErrors];

export type LogoutApiAuthLogoutPostResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseBool;
};

export type LogoutApiAuthLogoutPostResponse =
  LogoutApiAuthLogoutPostResponses[keyof LogoutApiAuthLogoutPostResponses];

export type GetProfileApiAuthProfileGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/auth/profile";
};

export type GetProfileApiAuthProfileGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetProfileApiAuthProfileGetError =
  GetProfileApiAuthProfileGetErrors[keyof GetProfileApiAuthProfileGetErrors];

export type GetProfileApiAuthProfileGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseUserProfileDao;
};

export type GetProfileApiAuthProfileGetResponse =
  GetProfileApiAuthProfileGetResponses[keyof GetProfileApiAuthProfileGetResponses];

export type UpdateProfileApiAuthProfilePutData = {
  body?: BodyUpdateProfileApiAuthProfilePut;
  path?: never;
  query?: never;
  url: "/api/auth/profile";
};

export type UpdateProfileApiAuthProfilePutErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdateProfileApiAuthProfilePutError =
  UpdateProfileApiAuthProfilePutErrors[keyof UpdateProfileApiAuthProfilePutErrors];

export type UpdateProfileApiAuthProfilePutResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseUserProfileDao;
};

export type UpdateProfileApiAuthProfilePutResponse =
  UpdateProfileApiAuthProfilePutResponses[keyof UpdateProfileApiAuthProfilePutResponses];

export type UploadDocumentApiDocumentsUploadPostData = {
  body: BodyUploadDocumentApiDocumentsUploadPost;
  path?: never;
  query?: never;
  url: "/api/documents/upload";
};

export type UploadDocumentApiDocumentsUploadPostErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UploadDocumentApiDocumentsUploadPostError =
  UploadDocumentApiDocumentsUploadPostErrors[keyof UploadDocumentApiDocumentsUploadPostErrors];

export type UploadDocumentApiDocumentsUploadPostResponses = {
  /**
   * Successful Response
   */
  201: ApiResponseDocumentDao;
};

export type UploadDocumentApiDocumentsUploadPostResponse =
  UploadDocumentApiDocumentsUploadPostResponses[keyof UploadDocumentApiDocumentsUploadPostResponses];

export type ListDocumentsApiDocumentsGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/documents/";
};

export type ListDocumentsApiDocumentsGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type ListDocumentsApiDocumentsGetError =
  ListDocumentsApiDocumentsGetErrors[keyof ListDocumentsApiDocumentsGetErrors];

export type ListDocumentsApiDocumentsGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListDocumentDao;
};

export type ListDocumentsApiDocumentsGetResponse =
  ListDocumentsApiDocumentsGetResponses[keyof ListDocumentsApiDocumentsGetResponses];

export type UploadDocumentAltApiDocumentsPostData = {
  body: BodyUploadDocumentAltApiDocumentsPost;
  path?: never;
  query?: never;
  url: "/api/documents/";
};

export type UploadDocumentAltApiDocumentsPostErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UploadDocumentAltApiDocumentsPostError =
  UploadDocumentAltApiDocumentsPostErrors[keyof UploadDocumentAltApiDocumentsPostErrors];

export type UploadDocumentAltApiDocumentsPostResponses = {
  /**
   * Successful Response
   */
  201: ApiResponseDocumentDao;
};

export type UploadDocumentAltApiDocumentsPostResponse =
  UploadDocumentAltApiDocumentsPostResponses[keyof UploadDocumentAltApiDocumentsPostResponses];

export type DeleteDocumentApiDocumentsDocumentIdDeleteData = {
  body?: never;
  path: {
    document_id: string;
  };
  query?: never;
  url: "/api/documents/{document_id}";
};

export type DeleteDocumentApiDocumentsDocumentIdDeleteErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeleteDocumentApiDocumentsDocumentIdDeleteError =
  DeleteDocumentApiDocumentsDocumentIdDeleteErrors[keyof DeleteDocumentApiDocumentsDocumentIdDeleteErrors];

export type DeleteDocumentApiDocumentsDocumentIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseBool;
};

export type DeleteDocumentApiDocumentsDocumentIdDeleteResponse =
  DeleteDocumentApiDocumentsDocumentIdDeleteResponses[keyof DeleteDocumentApiDocumentsDocumentIdDeleteResponses];

export type GetDocumentApiDocumentsDocumentIdGetData = {
  body?: never;
  path: {
    document_id: string;
  };
  query?: never;
  url: "/api/documents/{document_id}";
};

export type GetDocumentApiDocumentsDocumentIdGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetDocumentApiDocumentsDocumentIdGetError =
  GetDocumentApiDocumentsDocumentIdGetErrors[keyof GetDocumentApiDocumentsDocumentIdGetErrors];

export type GetDocumentApiDocumentsDocumentIdGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseDocumentDao;
};

export type GetDocumentApiDocumentsDocumentIdGetResponse =
  GetDocumentApiDocumentsDocumentIdGetResponses[keyof GetDocumentApiDocumentsDocumentIdGetResponses];

export type DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetData = {
  body?: never;
  path: {
    document_id: string;
  };
  query?: never;
  url: "/api/documents/{document_id}/download";
};

export type DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetError =
  DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetErrors[keyof DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetErrors];

export type DownloadDocumentPublicApiDocumentsDocumentIdDownloadGetResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetData =
  {
    body?: never;
    path: {
      document_id: string;
    };
    query?: never;
    url: "/api/documents/{document_id}/download/secure";
  };

export type DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetErrors =
  {
    /**
     * Bad Request
     */
    400: BadRequestResponse;
    /**
     * Unauthorized
     */
    401: UnauthorizedResponse;
    /**
     * Forbidden
     */
    403: ForbiddenResponse;
    /**
     * Not Found
     */
    404: NotFoundResponse;
    /**
     * Conflict
     */
    409: ErrorResponse;
    /**
     * Validation Error
     */
    422: ErrorResponse;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
  };

export type DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetError =
  DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetErrors[keyof DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetErrors];

export type DownloadDocumentSecureApiDocumentsDocumentIdDownloadSecureGetResponses =
  {
    /**
     * Successful Response
     */
    200: unknown;
  };

export type GetUserStorageInfoApiDocumentsStorageInfoGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/documents/storage/info";
};

export type GetUserStorageInfoApiDocumentsStorageInfoGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetUserStorageInfoApiDocumentsStorageInfoGetError =
  GetUserStorageInfoApiDocumentsStorageInfoGetErrors[keyof GetUserStorageInfoApiDocumentsStorageInfoGetErrors];

export type GetUserStorageInfoApiDocumentsStorageInfoGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseUserStorageInfoDao;
};

export type GetUserStorageInfoApiDocumentsStorageInfoGetResponse =
  GetUserStorageInfoApiDocumentsStorageInfoGetResponses[keyof GetUserStorageInfoApiDocumentsStorageInfoGetResponses];

export type HealthCheckApiHealthGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/health/";
};

export type HealthCheckApiHealthGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type HealthCheckApiHealthGetError =
  HealthCheckApiHealthGetErrors[keyof HealthCheckApiHealthGetErrors];

export type HealthCheckApiHealthGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseDictStrAny;
};

export type HealthCheckApiHealthGetResponse =
  HealthCheckApiHealthGetResponses[keyof HealthCheckApiHealthGetResponses];

export type GetLocationInfoApiLocationsInfoCityIdGetData = {
  body?: never;
  path: {
    city_id: number;
  };
  query?: never;
  url: "/api/locations/info/{city_id}";
};

export type GetLocationInfoApiLocationsInfoCityIdGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetLocationInfoApiLocationsInfoCityIdGetError =
  GetLocationInfoApiLocationsInfoCityIdGetErrors[keyof GetLocationInfoApiLocationsInfoCityIdGetErrors];

export type GetLocationInfoApiLocationsInfoCityIdGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseLocationDao;
};

export type GetLocationInfoApiLocationsInfoCityIdGetResponse =
  GetLocationInfoApiLocationsInfoCityIdGetResponses[keyof GetLocationInfoApiLocationsInfoCityIdGetResponses];

export type GetAllRegionsApiLocationsRegionsGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Search term for region name
     */
    search?: string | null;
    /**
     * Number of results to return
     */
    limit?: number;
    /**
     * Number of results to skip
     */
    offset?: number;
  };
  url: "/api/locations/regions";
};

export type GetAllRegionsApiLocationsRegionsGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetAllRegionsApiLocationsRegionsGetError =
  GetAllRegionsApiLocationsRegionsGetErrors[keyof GetAllRegionsApiLocationsRegionsGetErrors];

export type GetAllRegionsApiLocationsRegionsGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListRegionDao;
};

export type GetAllRegionsApiLocationsRegionsGetResponse =
  GetAllRegionsApiLocationsRegionsGetResponses[keyof GetAllRegionsApiLocationsRegionsGetResponses];

export type GetAllSubregionsApiLocationsSubregionsGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by region ID
     */
    region_id?: number | null;
    /**
     * Search term for subregion name
     */
    search?: string | null;
    /**
     * Number of results to return
     */
    limit?: number;
    /**
     * Number of results to skip
     */
    offset?: number;
  };
  url: "/api/locations/subregions";
};

export type GetAllSubregionsApiLocationsSubregionsGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetAllSubregionsApiLocationsSubregionsGetError =
  GetAllSubregionsApiLocationsSubregionsGetErrors[keyof GetAllSubregionsApiLocationsSubregionsGetErrors];

export type GetAllSubregionsApiLocationsSubregionsGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListSubregionDao;
};

export type GetAllSubregionsApiLocationsSubregionsGetResponse =
  GetAllSubregionsApiLocationsSubregionsGetResponses[keyof GetAllSubregionsApiLocationsSubregionsGetResponses];

export type GetAllCountriesApiLocationsCountriesGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by region ID
     */
    region_id?: number | null;
    /**
     * Filter by subregion ID
     */
    subregion_id?: number | null;
    /**
     * Search term for country name
     */
    search?: string | null;
    /**
     * Number of results to return
     */
    limit?: number;
    /**
     * Number of results to skip
     */
    offset?: number;
  };
  url: "/api/locations/countries";
};

export type GetAllCountriesApiLocationsCountriesGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetAllCountriesApiLocationsCountriesGetError =
  GetAllCountriesApiLocationsCountriesGetErrors[keyof GetAllCountriesApiLocationsCountriesGetErrors];

export type GetAllCountriesApiLocationsCountriesGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListCountryDao;
};

export type GetAllCountriesApiLocationsCountriesGetResponse =
  GetAllCountriesApiLocationsCountriesGetResponses[keyof GetAllCountriesApiLocationsCountriesGetResponses];

export type GetAllStatesApiLocationsStatesGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by country ID
     */
    country_id?: number | null;
    /**
     * Search term for state name
     */
    search?: string | null;
    /**
     * Number of results to return
     */
    limit?: number;
    /**
     * Number of results to skip
     */
    offset?: number;
  };
  url: "/api/locations/states";
};

export type GetAllStatesApiLocationsStatesGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetAllStatesApiLocationsStatesGetError =
  GetAllStatesApiLocationsStatesGetErrors[keyof GetAllStatesApiLocationsStatesGetErrors];

export type GetAllStatesApiLocationsStatesGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListStateDao;
};

export type GetAllStatesApiLocationsStatesGetResponse =
  GetAllStatesApiLocationsStatesGetResponses[keyof GetAllStatesApiLocationsStatesGetResponses];

export type GetAllCitiesApiLocationsCitiesGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter by state ID
     */
    state_id?: number | null;
    /**
     * Filter by country ID
     */
    country_id?: number | null;
    /**
     * Search term for city name
     */
    search?: string | null;
    /**
     * Number of results to return
     */
    limit?: number;
    /**
     * Number of results to skip
     */
    offset?: number;
  };
  url: "/api/locations/cities";
};

export type GetAllCitiesApiLocationsCitiesGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetAllCitiesApiLocationsCitiesGetError =
  GetAllCitiesApiLocationsCitiesGetErrors[keyof GetAllCitiesApiLocationsCitiesGetErrors];

export type GetAllCitiesApiLocationsCitiesGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListCityDao;
};

export type GetAllCitiesApiLocationsCitiesGetResponse =
  GetAllCitiesApiLocationsCitiesGetResponses[keyof GetAllCitiesApiLocationsCitiesGetResponses];

export type GetAllPlansApiPricingPlansGetData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Filter to show only active plans
     */
    active_only?: boolean;
  };
  url: "/api/pricing/plans";
};

export type GetAllPlansApiPricingPlansGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetAllPlansApiPricingPlansGetError =
  GetAllPlansApiPricingPlansGetErrors[keyof GetAllPlansApiPricingPlansGetErrors];

export type GetAllPlansApiPricingPlansGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListPricingPlanDao;
};

export type GetAllPlansApiPricingPlansGetResponse =
  GetAllPlansApiPricingPlansGetResponses[keyof GetAllPlansApiPricingPlansGetResponses];

export type CreatePlanApiPricingPlansPostData = {
  body: PricingPlanCreateDao;
  path?: never;
  query?: never;
  url: "/api/pricing/plans";
};

export type CreatePlanApiPricingPlansPostErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type CreatePlanApiPricingPlansPostError =
  CreatePlanApiPricingPlansPostErrors[keyof CreatePlanApiPricingPlansPostErrors];

export type CreatePlanApiPricingPlansPostResponses = {
  /**
   * Successful Response
   */
  200: ApiResponsePricingPlanDao;
};

export type CreatePlanApiPricingPlansPostResponse =
  CreatePlanApiPricingPlansPostResponses[keyof CreatePlanApiPricingPlansPostResponses];

export type DeletePlanApiPricingPlansPlanIdDeleteData = {
  body?: never;
  path: {
    plan_id: string;
  };
  query?: never;
  url: "/api/pricing/plans/{plan_id}";
};

export type DeletePlanApiPricingPlansPlanIdDeleteErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type DeletePlanApiPricingPlansPlanIdDeleteError =
  DeletePlanApiPricingPlansPlanIdDeleteErrors[keyof DeletePlanApiPricingPlansPlanIdDeleteErrors];

export type DeletePlanApiPricingPlansPlanIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseDict;
};

export type DeletePlanApiPricingPlansPlanIdDeleteResponse =
  DeletePlanApiPricingPlansPlanIdDeleteResponses[keyof DeletePlanApiPricingPlansPlanIdDeleteResponses];

export type GetPlanApiPricingPlansPlanIdGetData = {
  body?: never;
  path: {
    plan_id: string;
  };
  query?: never;
  url: "/api/pricing/plans/{plan_id}";
};

export type GetPlanApiPricingPlansPlanIdGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetPlanApiPricingPlansPlanIdGetError =
  GetPlanApiPricingPlansPlanIdGetErrors[keyof GetPlanApiPricingPlansPlanIdGetErrors];

export type GetPlanApiPricingPlansPlanIdGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponsePricingPlanDao;
};

export type GetPlanApiPricingPlansPlanIdGetResponse =
  GetPlanApiPricingPlansPlanIdGetResponses[keyof GetPlanApiPricingPlansPlanIdGetResponses];

export type UpdatePlanApiPricingPlansPlanIdPutData = {
  body: PricingPlanUpdateDao;
  path: {
    plan_id: string;
  };
  query?: never;
  url: "/api/pricing/plans/{plan_id}";
};

export type UpdatePlanApiPricingPlansPlanIdPutErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type UpdatePlanApiPricingPlansPlanIdPutError =
  UpdatePlanApiPricingPlansPlanIdPutErrors[keyof UpdatePlanApiPricingPlansPlanIdPutErrors];

export type UpdatePlanApiPricingPlansPlanIdPutResponses = {
  /**
   * Successful Response
   */
  200: ApiResponsePricingPlanDao;
};

export type UpdatePlanApiPricingPlansPlanIdPutResponse =
  UpdatePlanApiPricingPlansPlanIdPutResponses[keyof UpdatePlanApiPricingPlansPlanIdPutResponses];

export type GetUserStorageInfoApiPricingUsersStorageGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/pricing/users/storage";
};

export type GetUserStorageInfoApiPricingUsersStorageGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetUserStorageInfoApiPricingUsersStorageGetError =
  GetUserStorageInfoApiPricingUsersStorageGetErrors[keyof GetUserStorageInfoApiPricingUsersStorageGetErrors];

export type GetUserStorageInfoApiPricingUsersStorageGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedApiResponseListUserStorageInfoDao;
};

export type GetUserStorageInfoApiPricingUsersStorageGetResponse =
  GetUserStorageInfoApiPricingUsersStorageGetResponses[keyof GetUserStorageInfoApiPricingUsersStorageGetResponses];

export type GetStorageSummaryApiPricingStorageSummaryGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/pricing/storage/summary";
};

export type GetStorageSummaryApiPricingStorageSummaryGetErrors = {
  /**
   * Bad Request
   */
  400: BadRequestResponse;
  /**
   * Unauthorized
   */
  401: UnauthorizedResponse;
  /**
   * Forbidden
   */
  403: ForbiddenResponse;
  /**
   * Not Found
   */
  404: NotFoundResponse;
  /**
   * Conflict
   */
  409: ErrorResponse;
  /**
   * Validation Error
   */
  422: ErrorResponse;
  /**
   * Internal Server Error
   */
  500: ErrorResponse;
};

export type GetStorageSummaryApiPricingStorageSummaryGetError =
  GetStorageSummaryApiPricingStorageSummaryGetErrors[keyof GetStorageSummaryApiPricingStorageSummaryGetErrors];

export type GetStorageSummaryApiPricingStorageSummaryGetResponses = {
  /**
   * Successful Response
   */
  200: ApiResponseStorageSummaryDao;
};

export type GetStorageSummaryApiPricingStorageSummaryGetResponse =
  GetStorageSummaryApiPricingStorageSummaryGetResponses[keyof GetStorageSummaryApiPricingStorageSummaryGetResponses];

export type ClientOptions = {
  baseURL: "http://localhost:8000" | (string & {});
};
